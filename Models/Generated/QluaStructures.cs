// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: qlua/rpc/qlua_structures.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Qlua.Structs {

  /// <summary>Holder for reflection information generated from qlua/rpc/qlua_structures.proto</summary>
  public static partial class QluaStructuresReflection {

    #region Descriptor
    /// <summary>File descriptor for qlua/rpc/qlua_structures.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QluaStructuresReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5xbHVhL3JwYy9xbHVhX3N0cnVjdHVyZXMucHJvdG8SDHFsdWEuc3RydWN0",
            "cyJRCgVLbGFzcxIOCgZmaXJtaWQYASABKAkSDAoEbmFtZRgCIAEoCRIMCgRj",
            "b2RlGAMgASgJEg0KBW5wYXJzGAQgASgFEg0KBW5zZWNzGAUgASgFInQKBEZp",
            "cm0SDgoGZmlybWlkGAEgASgJEhEKCWZpcm1fbmFtZRgCIAEoCRIVCgtudWxs",
            "X3N0YXR1cxgDIAEoCEgAEhYKDHZhbHVlX3N0YXR1cxgEIAEoBUgAEhAKCGV4",
            "Y2hhbmdlGAUgASgJQggKBnN0YXR1cyKoAwoIQWxsVHJhZGUSEQoJdHJhZGVf",
            "bnVtGAEgASgDEhQKCm51bGxfZmxhZ3MYAiABKAhIABIVCgt2YWx1ZV9mbGFn",
            "cxgDIAEoBUgAEg0KBXByaWNlGAQgASgJEgsKA3F0eRgFIAEoBRINCgV2YWx1",
            "ZRgGIAEoCRISCgphY2NydWVkaW50GAcgASgJEg0KBXlpZWxkGAggASgJEhIK",
            "CnNldHRsZWNvZGUYCSABKAkSEAoIcmVwb3JhdGUYCiABKAkSEQoJcmVwb3Zh",
            "bHVlGAsgASgJEhIKCnJlcG8ydmFsdWUYDCABKAkSEAoIcmVwb3Rlcm0YDSAB",
            "KAkSEAoIc2VjX2NvZGUYDiABKAkSEgoKY2xhc3NfY29kZRgPIAEoCRItCghk",
            "YXRldGltZRgQIAEoCzIbLnFsdWEuc3RydWN0cy5EYXRlVGltZUVudHJ5Eg4K",
            "BnBlcmlvZBgRIAEoBRIVCg1vcGVuX2ludGVyZXN0GBIgASgJEhUKDWV4Y2hh",
            "bmdlX2NvZGUYEyABKAkSEwoLZXhlY19tYXJrZXQYFCABKAlCBwoFZmxhZ3Mi",
            "3wwKBVRyYWRlEhEKCXRyYWRlX251bRgBIAEoAxIRCglvcmRlcl9udW0YAiAB",
            "KAMSEQoJYnJva2VycmVmGAMgASgJEg4KBnVzZXJpZBgEIAEoCRIOCgZmaXJt",
            "aWQYBSABKAkSFAoMY2FuY2VsZWRfdWlkGAYgASgJEg8KB2FjY291bnQYByAB",
            "KAkSDQoFcHJpY2UYCCABKAkSCwoDcXR5GAkgASgFEg0KBXZhbHVlGAogASgJ",
            "EhIKCmFjY3J1ZWRpbnQYCyABKAkSDQoFeWllbGQYDCABKAkSEgoKc2V0dGxl",
            "Y29kZRgNIAEoCRIQCghjcGZpcm1pZBgOIAEoCRINCgVmbGFncxgPIAEoBRIO",
            "CgZwcmljZTIYECABKAkSEAoIcmVwb3JhdGUYESABKAkSEwoLY2xpZW50X2Nv",
            "ZGUYEiABKAkSEAoIYWNjcnVlZDIYEyABKAkSEAoIcmVwb3Rlcm0YFCABKAkS",
            "EQoJcmVwb3ZhbHVlGBUgASgJEhIKCnJlcG8ydmFsdWUYFiABKAkSFgoOc3Rh",
            "cnRfZGlzY291bnQYFyABKAkSFgoObG93ZXJfZGlzY291bnQYGCABKAkSFgoO",
            "dXBwZXJfZGlzY291bnQYGSABKAkSGAoQYmxvY2tfc2VjdXJpdGllcxgaIAEo",
            "CRIaChJjbGVhcmluZ19jb21pc3Npb24YGyABKAkSGgoSZXhjaGFuZ2VfY29t",
            "aXNzaW9uGBwgASgJEh0KFXRlY2hfY2VudGVyX2NvbWlzc2lvbhgdIAEoCRIT",
            "CgtzZXR0bGVfZGF0ZRgeIAEoCRIXCg9zZXR0bGVfY3VycmVuY3kYHyABKAkS",
            "FgoOdHJhZGVfY3VycmVuY3kYICABKAkSFQoNZXhjaGFuZ2VfY29kZRghIAEo",
            "CRISCgpzdGF0aW9uX2lkGCIgASgJEhAKCHNlY19jb2RlGCMgASgJEhIKCmNs",
            "YXNzX2NvZGUYJCABKAkSLQoIZGF0ZXRpbWUYJSABKAsyGy5xbHVhLnN0cnVj",
            "dHMuRGF0ZVRpbWVFbnRyeRITCgtiYW5rX2FjY19pZBgmIAEoCRIYChBicm9r",
            "ZXJfY29taXNzaW9uGCcgASgJEhQKDGxpbmtlZF90cmFkZRgoIAEoCRIOCgZw",
            "ZXJpb2QYKSABKAUSEAoIdHJhbnNfaWQYKiABKAkSDAoEa2luZBgrIAEoBRIb",
            "ChNjbGVhcmluZ19iYW5rX2FjY2lkGCwgASgJEjYKEWNhbmNlbGVkX2RhdGV0",
            "aW1lGC0gASgLMhsucWx1YS5zdHJ1Y3RzLkRhdGVUaW1lRW50cnkSFwoPY2xl",
            "YXJpbmdfZmlybWlkGC4gASgJEhIKCnN5c3RlbV9yZWYYLyABKAkSCwoDdWlk",
            "GDAgASgJEhAKCGxzZWNjb2RlGDEgASgJEh0KFW9yZGVyX3JldmlzaW9uX251",
            "bWJlchgyIAEoCRIRCglvcmRlcl9xdHkYMyABKAkSEwoLb3JkZXJfcHJpY2UY",
            "NCABKAkSGwoTb3JkZXJfZXhjaGFuZ2VfY29kZRg1IAEoCRITCgtleGVjX21h",
            "cmtldBg2IAEoCRIbChNsaXF1aWRpdHlfaW5kaWNhdG9yGDcgASgFEg4KBmV4",
            "dHJlZhg4IAEoCRIXCg9leHRfdHJhZGVfZmxhZ3MYOSABKAkSGAoQb25fYmVo",
            "YWxmX29mX3VpZBg6IAEoCRIYChBjbGllbnRfcXVhbGlmaWVyGDsgASgFEhkK",
            "EWNsaWVudF9zaG9ydF9jb2RlGDwgASgJEisKI2ludmVzdG1lbnRfZGVjaXNp",
            "b25fbWFrZXJfcXVhbGlmaWVyGD0gASgFEiwKJGludmVzdG1lbnRfZGVjaXNp",
            "b25fbWFrZXJfc2hvcnRfY29kZRg+IAEoCRIiChpleGVjdXRpbmdfdHJhZGVy",
            "X3F1YWxpZmllchg/IAEoBRIjChtleGVjdXRpbmdfdHJhZGVyX3Nob3J0X2Nv",
            "ZGUYQCABKAkSEwoLd2FpdmVyX2ZsYWcYQSABKAUSFQoNbWxlZ19iYXNlX3Np",
            "ZBhCIAEoCRIWCg5zaWRlX3F1YWxpZmllchhDIAEoBRIgChhvdGNfcG9zdF90",
            "cmFkZV9pbmRpY2F0b3IYRCABKAUSEAoIY2FwYWNpdHkYRSABKAUSEgoKY3Jv",
            "c3NfcmF0ZRhGIAEoCSKxCgoFT3JkZXISEQoJb3JkZXJfbnVtGAEgASgDEg0K",
            "BWZsYWdzGAIgASgFEhEKCWJyb2tlcnJlZhgDIAEoCRIOCgZ1c2VyaWQYBCAB",
            "KAkSDgoGZmlybWlkGAUgASgJEg8KB2FjY291bnQYBiABKAkSDQoFcHJpY2UY",
            "ByABKAkSCwoDcXR5GAggASgFEg8KB2JhbGFuY2UYCSABKAkSDQoFdmFsdWUY",
            "CiABKAkSEgoKYWNjcnVlZGludBgLIAEoCRINCgV5aWVsZBgMIAEoCRIQCgh0",
            "cmFuc19pZBgNIAEoCRITCgtjbGllbnRfY29kZRgOIAEoCRIOCgZwcmljZTIY",
            "DyABKAkSEgoKc2V0dGxlY29kZRgQIAEoCRILCgN1aWQYESABKAkSFAoMY2Fu",
            "Y2VsZWRfdWlkGBIgASgJEhUKDWV4Y2hhbmdlX2NvZGUYEyABKAkSFwoPYWN0",
            "aXZhdGlvbl90aW1lGBQgASgJEhMKC2xpbmtlZG9yZGVyGBUgASgJEg4KBmV4",
            "cGlyeRgWIAEoCRIQCghzZWNfY29kZRgXIAEoCRISCgpjbGFzc19jb2RlGBgg",
            "ASgJEi0KCGRhdGV0aW1lGBkgASgLMhsucWx1YS5zdHJ1Y3RzLkRhdGVUaW1l",
            "RW50cnkSNgoRd2l0aGRyYXdfZGF0ZXRpbWUYGiABKAsyGy5xbHVhLnN0cnVj",
            "dHMuRGF0ZVRpbWVFbnRyeRITCgtiYW5rX2FjY19pZBgbIAEoCRIYChB2YWx1",
            "ZV9lbnRyeV90eXBlGBwgASgFEhAKCHJlcG90ZXJtGB0gASgJEhEKCXJlcG92",
            "YWx1ZRgeIAEoCRISCgpyZXBvMnZhbHVlGB8gASgJEhoKEnJlcG9fdmFsdWVf",
            "YmFsYW5jZRggIAEoCRIWCg5zdGFydF9kaXNjb3VudBghIAEoCRIVCg1yZWpl",
            "Y3RfcmVhc29uGCIgASgJEhcKD2V4dF9vcmRlcl9mbGFncxgjIAEoCRIPCgdt",
            "aW5fcXR5GCQgASgFEhEKCWV4ZWNfdHlwZRglIAEoBRIWCg5zaWRlX3F1YWxp",
            "ZmllchgmIAEoBRIRCglhY250X3R5cGUYJyABKAUSEAoIY2FwYWNpdHkYKCAB",
            "KAUSGgoScGFzc2l2ZV9vbmx5X29yZGVyGCkgASgFEg8KB3Zpc2libGUYKiAB",
            "KAUSEQoJYXdnX3ByaWNlGCsgASgJEhMKC2V4cGlyeV90aW1lGCwgASgJEhcK",
            "D3JldmlzaW9uX251bWJlchgtIAEoCRIWCg5wcmljZV9jdXJyZW5jeRguIAEo",
            "CRIYChBleHRfb3JkZXJfc3RhdHVzGC8gASgFEhQKDGFjY2VwdGVkX3VpZBgw",
            "IAEoCRIUCgxmaWxsZWRfdmFsdWUYMSABKAkSDgoGZXh0cmVmGDIgASgJEhcK",
            "D3NldHRsZV9jdXJyZW5jeRgzIAEoCRIYChBvbl9iZWhhbGZfb2ZfdWlkGDQg",
            "ASgJEhgKEGNsaWVudF9xdWFsaWZpZXIYNSABKAUSGQoRY2xpZW50X3Nob3J0",
            "X2NvZGUYNiABKAkSKwojaW52ZXN0bWVudF9kZWNpc2lvbl9tYWtlcl9xdWFs",
            "aWZpZXIYNyABKAUSLAokaW52ZXN0bWVudF9kZWNpc2lvbl9tYWtlcl9zaG9y",
            "dF9jb2RlGDggASgJEiIKGmV4ZWN1dGluZ190cmFkZXJfcXVhbGlmaWVyGDkg",
            "ASgFEiMKG2V4ZWN1dGluZ190cmFkZXJfc2hvcnRfY29kZRg6IAEoCSKlAgoO",
            "QWNjb3VudEJhbGFuY2USDgoGZmlybWlkGAEgASgJEhAKCHNlY19jb2RlGAIg",
            "ASgJEhAKCHRyZGFjY2lkGAMgASgJEhAKCGRlcGFjY2lkGAQgASgJEg8KB29w",
            "ZW5iYWwYBSABKAkSEgoKY3VycmVudHBvcxgGIAEoCRIWCg5wbGFubmVkcG9z",
            "c2VsbBgHIAEoCRIVCg1wbGFubmVkcG9zYnV5GAggASgJEg8KB3BsYW5iYWwY",
            "CSABKAkSDgoGdXNxdHliGAogASgJEg4KBnVzcXR5cxgLIAEoCRIPCgdwbGFu",
            "bmVkGAwgASgJEhEKCXNldHRsZWJhbBgNIAEoCRITCgtiYW5rX2FjY19pZBgO",
            "IAEoCRIPCgdmaXJtdXNlGA8gASgFIqQGCglTdG9wT3JkZXISEQoJb3JkZXJf",
            "bnVtGAEgASgDEhEKCW9yZGVydGltZRgCIAEoCRINCgVmbGFncxgDIAEoBRIR",
            "Cglicm9rZXJyZWYYBCABKAkSDgoGZmlybWlkGAUgASgJEg8KB2FjY291bnQY",
            "BiABKAkSEQoJY29uZGl0aW9uGAcgASgFEhcKD2NvbmRpdGlvbl9wcmljZRgI",
            "IAEoCRINCgVwcmljZRgJIAEoCRILCgNxdHkYCiABKAUSEwoLbGlua2Vkb3Jk",
            "ZXIYCyABKAkSDgoGZXhwaXJ5GAwgASgJEhAKCHRyYW5zX2lkGA0gASgJEhMK",
            "C2NsaWVudF9jb2RlGA4gASgJEhQKDGNvX29yZGVyX251bRgPIAEoCRIWCg5j",
            "b19vcmRlcl9wcmljZRgQIAEoCRIXCg9zdG9wX29yZGVyX3R5cGUYESABKAUS",
            "EQoJb3JkZXJkYXRlGBIgASgJEhQKDGFsbHRyYWRlX251bRgTIAEoCRIRCglz",
            "dG9wZmxhZ3MYFCABKAUSDgoGb2Zmc2V0GBUgASgJEg4KBnNwcmVhZBgWIAEo",
            "CRIPCgdiYWxhbmNlGBcgASgJEgsKA3VpZBgYIAEoCRISCgpmaWxsZWRfcXR5",
            "GBkgASgFEhUKDXdpdGhkcmF3X3RpbWUYGiABKAkSGAoQY29uZGl0aW9uX3By",
            "aWNlMhgbIAEoCRIYChBhY3RpdmVfZnJvbV90aW1lGBwgASgJEhYKDmFjdGl2",
            "ZV90b190aW1lGB0gASgJEhAKCHNlY19jb2RlGB4gASgJEhIKCmNsYXNzX2Nv",
            "ZGUYHyABKAkSGgoSY29uZGl0aW9uX3NlY19jb2RlGCAgASgJEhwKFGNvbmRp",
            "dGlvbl9jbGFzc19jb2RlGCEgASgJEhQKDGNhbmNlbGVkX3VpZBgiIAEoCRI0",
            "Cg9vcmRlcl9kYXRlX3RpbWUYIyABKAsyGy5xbHVhLnN0cnVjdHMuRGF0ZVRp",
            "bWVFbnRyeRI2ChF3aXRoZHJhd19kYXRldGltZRgkIAEoCzIbLnFsdWEuc3Ry",
            "dWN0cy5EYXRlVGltZUVudHJ5IvcCCgxGdXR1cmVzTGltaXQSDgoGZmlybWlk",
            "GAEgASgJEhAKCHRyZGFjY2lkGAIgASgJEhIKCmxpbWl0X3R5cGUYAyABKAUS",
            "FgoObGlxdWlkaXR5X2NvZWYYBCABKAkSFgoOY2JwX3ByZXZfbGltaXQYBSAB",
            "KAkSEAoIY2JwbGltaXQYBiABKAkSEAoIY2JwbHVzZWQYByABKAkSEwoLY2Jw",
            "bHBsYW5uZWQYCCABKAkSEQoJdmFybWFyZ2luGAkgASgJEhIKCmFjY3J1ZWRp",
            "bnQYCiABKAkSGwoTY2JwbHVzZWRfZm9yX29yZGVycxgLIAEoCRIeChZjYnBs",
            "dXNlZF9mb3JfcG9zaXRpb25zGAwgASgJEhcKD29wdGlvbnNfcHJlbWl1bRgN",
            "IAEoCRIUCgx0c19jb21pc3Npb24YDiABKAkSCwoDa2dvGA8gASgJEhAKCGN1",
            "cnJjb2RlGBAgASgJEhYKDnJlYWxfdmFybWFyZ2luGBEgASgJIpsDChRGdXR1",
            "cmVzQ2xpZW50SG9sZGluZxIOCgZmaXJtaWQYASABKAkSEAoIdHJkYWNjaWQY",
            "AiABKAkSEAoIc2VjX2NvZGUYAyABKAkSDAoEdHlwZRgEIAEoBRIQCghzdGFy",
            "dGJ1eRgFIAEoCRIRCglzdGFydHNlbGwYBiABKAkSEAoIc3RhcnRuZXQYByAB",
            "KAkSEAoIdG9kYXlidXkYCCABKAkSEQoJdG9kYXlzZWxsGAkgASgJEhAKCHRv",
            "dGFsbmV0GAogASgJEhAKCG9wZW5idXlzGAsgASgFEhEKCW9wZW5zZWxscxgM",
            "IAEoBRIQCghjYnBsdXNlZBgNIAEoCRITCgtjYnBscGxhbm5lZBgOIAEoCRIR",
            "Cgl2YXJtYXJnaW4YDyABKAkSFAoMYXZycG9zbnByaWNlGBAgASgJEhUKDXBv",
            "c2l0aW9udmFsdWUYESABKAkSFgoOcmVhbF92YXJtYXJnaW4YEiABKAkSFwoP",
            "dG90YWxfdmFybWFyZ2luGBMgASgJEhYKDnNlc3Npb25fc3RhdHVzGBQgASgF",
            "IuACCgpNb25leUxpbWl0EhAKCGN1cnJjb2RlGAEgASgJEgsKA3RhZxgCIAEo",
            "CRIOCgZmaXJtaWQYAyABKAkSEwoLY2xpZW50X2NvZGUYBCABKAkSDwoHb3Bl",
            "bmJhbBgFIAEoCRIRCglvcGVubGltaXQYBiABKAkSEgoKY3VycmVudGJhbBgH",
            "IAEoCRIUCgxjdXJyZW50bGltaXQYCCABKAkSDgoGbG9ja2VkGAkgASgJEhkK",
            "EWxvY2tlZF92YWx1ZV9jb2VmGAogASgJEhsKE2xvY2tlZF9tYXJnaW5fdmFs",
            "dWUYCyABKAkSEAoIbGV2ZXJhZ2UYDCABKAkSEgoKbGltaXRfa2luZBgNIAEo",
            "BRIZChF3YV9wb3NpdGlvbl9wcmljZRgOIAEoCRIZChFvcmRlcnNfY29sbGF0",
            "ZXJhbBgPIAEoCRIcChRwb3NpdGlvbnNfY29sbGF0ZXJhbBgQIAEoCSJqChBN",
            "b25leUxpbWl0RGVsZXRlEhAKCGN1cnJjb2RlGAEgASgJEgsKA3RhZxgCIAEo",
            "CRITCgtjbGllbnRfY29kZRgDIAEoCRIOCgZmaXJtaWQYBCABKAkSEgoKbGlt",
            "aXRfa2luZBgFIAEoBSJuCg9EZXBvTGltaXREZWxldGUSEAoIc2VjX2NvZGUY",
            "ASABKAkSEAoIdHJkYWNjaWQYAiABKAkSDgoGZmlybWlkGAMgASgJEhMKC2Ns",
            "aWVudF9jb2RlGAQgASgJEhIKCmxpbWl0X2tpbmQYBSABKAUiOAoSRnV0dXJl",
            "c0xpbWl0RGVsZXRlEg4KBmZpcm1pZBgBIAEoCRISCgpsaW1pdF90eXBlGAIg",
            "ASgFIq8CCglEZXBvTGltaXQSEAoIc2VjX2NvZGUYASABKAkSEAoIdHJkYWNj",
            "aWQYAiABKAkSDgoGZmlybWlkGAMgASgJEhMKC2NsaWVudF9jb2RlGAQgASgJ",
            "Eg8KB29wZW5iYWwYBSABKAUSEQoJb3BlbmxpbWl0GAYgASgFEhIKCmN1cnJl",
            "bnRiYWwYByABKAUSFAoMY3VycmVudGxpbWl0GAggASgFEhMKC2xvY2tlZF9z",
            "ZWxsGAkgASgFEhIKCmxvY2tlZF9idXkYCiABKAUSGAoQbG9ja2VkX2J1eV92",
            "YWx1ZRgLIAEoCRIZChFsb2NrZWRfc2VsbF92YWx1ZRgMIAEoCRIZChF3YV9w",
            "b3NpdGlvbl9wcmljZRgNIAEoCRISCgpsaW1pdF9raW5kGA4gASgFItECCg9B",
            "Y2NvdW50UG9zaXRpb24SDgoGZmlybWlkGAEgASgJEhAKCGN1cnJjb2RlGAIg",
            "ASgJEgsKA3RhZxgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRIPCgdvcGVu",
            "YmFsGAUgASgJEhIKCmN1cnJlbnRwb3MYBiABKAkSEgoKcGxhbm5lZHBvcxgH",
            "IAEoCRIOCgZsaW1pdDEYCCABKAkSDgoGbGltaXQyGAkgASgJEhAKCG9yZGVy",
            "YnV5GAogASgJEhEKCW9yZGVyc2VsbBgLIAEoCRINCgVuZXR0bxgMIAEoCRIS",
            "CgpwbGFubmVkYmFsGA0gASgJEg0KBWRlYml0GA4gASgJEg4KBmNyZWRpdBgP",
            "IAEoCRITCgtiYW5rX2FjY19pZBgQIAEoCRISCgptYXJnaW5jYWxsGBEgASgJ",
            "EhEKCXNldHRsZWJhbBgSIAEoCSKiCwoHTmVnRGVhbBIUCgxuZWdfZGVhbF9u",
            "dW0YASABKAMSFQoNbmVnX2RlYWxfdGltZRgCIAEoCRINCgVmbGFncxgDIAEo",
            "BRIRCglicm9rZXJyZWYYBCABKAkSDgoGdXNlcmlkGAUgASgJEg4KBmZpcm1p",
            "ZBgGIAEoCRIQCghjcHVzZXJpZBgHIAEoCRIQCghjcGZpcm1pZBgIIAEoCRIP",
            "CgdhY2NvdW50GAkgASgJEg0KBXByaWNlGAogASgJEgsKA3F0eRgLIAEoBRIQ",
            "CghtYXRjaHJlZhgMIAEoCRISCgpzZXR0bGVjb2RlGA0gASgJEg0KBXlpZWxk",
            "GA4gASgJEhIKCmFjY3J1ZWRpbnQYDyABKAkSDQoFdmFsdWUYECABKAkSDgoG",
            "cHJpY2UyGBEgASgJEhAKCHJlcG9yYXRlGBIgASgJEhIKCnJlZnVuZHJhdGUY",
            "EyABKAkSEAoIdHJhbnNfaWQYFCABKAkSEwoLY2xpZW50X2NvZGUYFSABKAkS",
            "EQoJcmVwb2VudHJ5GBYgASgFEhEKCXJlcG92YWx1ZRgXIAEoCRISCgpyZXBv",
            "MnZhbHVlGBggASgJEhAKCHJlcG90ZXJtGBkgASgJEhYKDnN0YXJ0X2Rpc2Nv",
            "dW50GBogASgJEhYKDmxvd2VyX2Rpc2NvdW50GBsgASgJEhYKDnVwcGVyX2Rp",
            "c2NvdW50GBwgASgJEhgKEGJsb2NrX3NlY3VyaXRpZXMYHSABKAkSCwoDdWlk",
            "GB4gASgJEhUKDXdpdGhkcmF3X3RpbWUYHyABKAkSFQoNbmVnX2RlYWxfZGF0",
            "ZRggIAEoCRIPCgdiYWxhbmNlGCEgASgJEhgKEG9yaWdpbl9yZXBvdmFsdWUY",
            "IiABKAkSEgoKb3JpZ2luX3F0eRgjIAEoCRIXCg9vcmlnaW5fZGlzY291bnQY",
            "JCABKAkSIAoYbmVnX2RlYWxfYWN0aXZhdGlvbl9kYXRlGCUgASgJEiAKGG5l",
            "Z19kZWFsX2FjdGl2YXRpb25fdGltZRgmIAEoCRIPCgdxdW90ZW5vGCcgASgJ",
            "EhcKD3NldHRsZV9jdXJyZW5jeRgoIAEoCRIQCghzZWNfY29kZRgpIAEoCRIS",
            "CgpjbGFzc19jb2RlGCogASgJEhMKC2JhbmtfYWNjX2lkGCsgASgJEhUKDXdp",
            "dGhkcmF3X2RhdGUYLCABKAkSEwoLbGlua2Vkb3JkZXIYLSABKAkSOQoUYWN0",
            "aXZhdGlvbl9kYXRlX3RpbWUYLiABKAsyGy5xbHVhLnN0cnVjdHMuRGF0ZVRp",
            "bWVFbnRyeRI3ChJ3aXRoZHJhd19kYXRlX3RpbWUYLyABKAsyGy5xbHVhLnN0",
            "cnVjdHMuRGF0ZVRpbWVFbnRyeRIuCglkYXRlX3RpbWUYMCABKAsyGy5xbHVh",
            "LnN0cnVjdHMuRGF0ZVRpbWVFbnRyeRIQCghsc2VjY29kZRgxIAEoCRIUCgxj",
            "YW5jZWxlZF91aWQYMiABKAkSEgoKc3lzdGVtX3JlZhgzIAEoCRIWCg5wcmlj",
            "ZV9jdXJyZW5jeRg0IAEoCRIbChNvcmRlcl9leGNoYW5nZV9jb2RlGDUgASgJ",
            "Eg4KBmV4dHJlZhg2IAEoCRIOCgZwZXJpb2QYNyABKAkSGAoQY2xpZW50X3F1",
            "YWxpZmllchg4IAEoBRIZChFjbGllbnRfc2hvcnRfY29kZRg5IAEoCRIrCiNp",
            "bnZlc3RtZW50X2RlY2lzaW9uX21ha2VyX3F1YWxpZmllchg6IAEoBRIsCiRp",
            "bnZlc3RtZW50X2RlY2lzaW9uX21ha2VyX3Nob3J0X2NvZGUYOyABKAkSIgoa",
            "ZXhlY3V0aW5nX3RyYWRlcl9xdWFsaWZpZXIYPCABKAUSIwobZXhlY3V0aW5n",
            "X3RyYWRlcl9zaG9ydF9jb2RlGD0gASgJIpIKCghOZWdUcmFkZRIRCgl0cmFk",
            "ZV9udW0YASABKAMSEgoKdHJhZGVfZGF0ZRgCIAEoCRITCgtzZXR0bGVfZGF0",
            "ZRgDIAEoCRINCgVmbGFncxgEIAEoBRIRCglicm9rZXJyZWYYBSABKAkSDgoG",
            "ZmlybWlkGAYgASgJEg8KB2FjY291bnQYByABKAkSEAoIY3BmaXJtaWQYCCAB",
            "KAkSEQoJY3BhY2NvdW50GAkgASgJEg0KBXByaWNlGAogASgJEgsKA3F0eRgL",
            "IAEoBRINCgV2YWx1ZRgMIAEoCRISCgpzZXR0bGVjb2RlGA0gASgJEhIKCnJl",
            "cG9ydF9udW0YDiABKAkSFAoMY3ByZXBvcnRfbnVtGA8gASgJEhIKCmFjY3J1",
            "ZWRpbnQYECABKAkSEwoLcmVwb3RyYWRlbm8YESABKAkSDgoGcHJpY2UxGBIg",
            "ASgJEhAKCHJlcG9yYXRlGBMgASgJEg4KBnByaWNlMhgUIAEoCRITCgtjbGll",
            "bnRfY29kZRgVIAEoCRIUCgx0c19jb21pc3Npb24YFiABKAkSDwoHYmFsYW5j",
            "ZRgXIAEoCRITCgtzZXR0bGVfdGltZRgYIAEoCRIOCgZhbW91bnQYGSABKAkS",
            "EQoJcmVwb3ZhbHVlGBogASgJEhAKCHJlcG90ZXJtGBsgASgJEhIKCnJlcG8y",
            "dmFsdWUYHCABKAkSFAoMcmV0dXJuX3ZhbHVlGB0gASgJEhAKCGRpc2NvdW50",
            "GB4gASgJEhYKDmxvd2VyX2Rpc2NvdW50GB8gASgJEhYKDnVwcGVyX2Rpc2Nv",
            "dW50GCAgASgJEhgKEGJsb2NrX3NlY3VyaXRpZXMYISABKAkSFAoMdXJnZW5j",
            "eV9mbGFnGCIgASgJEgwKBHR5cGUYIyABKAUSFgoOb3BlcmF0aW9uX3R5cGUY",
            "JCABKAUSGQoRZXhwZWN0ZWRfZGlzY291bnQYJSABKAkSGQoRZXhwZWN0ZWRf",
            "cXVhbnRpdHkYJiABKAkSGgoSZXhwZWN0ZWRfcmVwb3ZhbHVlGCcgASgJEhsK",
            "E2V4cGVjdGVkX3JlcG8ydmFsdWUYKCABKAkSHQoVZXhwZWN0ZWRfcmV0dXJu",
            "X3ZhbHVlGCkgASgJEhEKCW9yZGVyX251bRgqIAEoCRIZChFyZXBvcnRfdHJh",
            "ZGVfZGF0ZRgrIAEoCRIPCgdzZXR0bGVkGCwgASgFEhUKDWNsZWFyaW5nX3R5",
            "cGUYLSABKAUSGAoQcmVwb3J0X2NvbWlzc2lvbhguIAEoCRIWCg5jb3Vwb25f",
            "cGF5bWVudBgvIAEoCRIZChFwcmluY2lwYWxfcGF5bWVudBgwIAEoCRIeChZw",
            "cmluY2lwYWxfcGF5bWVudF9kYXRlGDEgASgJEhUKDW5leHRkYXlzZXR0bGUY",
            "MiABKAkSFwoPc2V0dGxlX2N1cnJlbmN5GDMgASgJEhAKCHNlY19jb2RlGDQg",
            "ASgJEhIKCmNsYXNzX2NvZGUYNSABKAkSDwoHY29tcHZhbBg2IAEoCRIVCg1w",
            "YXJlbnR0cmFkZW5vGDcgASgJEg4KBmJhbmtpZBg4IAEoCRIRCgliYW5rYWNj",
            "aWQYOSABKAkSFgoOcHJlY2lzZWJhbGFuY2UYOiABKAkSEwoLY29uZmlybXRp",
            "bWUYOyABKAkSEAoIZXhfZmxhZ3MYPCABKAUSFQoNY29uZmlybXJlcG9ydBg9",
            "IAEoCRIOCgZleHRyZWYYPiABKAki5wEKCFNlY3VyaXR5EgwKBGNvZGUYASAB",
            "KAkSDAoEbmFtZRgCIAEoCRISCgpzaG9ydF9uYW1lGAMgASgJEhIKCmNsYXNz",
            "X2NvZGUYBCABKAkSEgoKY2xhc3NfbmFtZRgFIAEoCRISCgpmYWNlX3ZhbHVl",
            "GAYgASgJEhEKCWZhY2VfdW5pdBgHIAEoCRINCgVzY2FsZRgIIAEoCRIQCght",
            "YXRfZGF0ZRgJIAEoCRIQCghsb3Rfc2l6ZRgKIAEoCRIRCglpc2luX2NvZGUY",
            "CyABKAkSFgoObWluX3ByaWNlX3N0ZXAYDCABKAkimAEKC0NhbmRsZUVudHJ5",
            "EgwKBG9wZW4YASABKAkSDQoFY2xvc2UYAiABKAkSDAoEaGlnaBgDIAEoCRIL",
            "CgNsb3cYBCABKAkSDgoGdm9sdW1lGAUgASgJEi0KCGRhdGV0aW1lGAYgASgL",
            "MhsucWx1YS5zdHJ1Y3RzLkRhdGVUaW1lRW50cnkSEgoKZG9lc19leGlzdBgH",
            "IAEoBSKMAQoNRGF0ZVRpbWVFbnRyeRILCgNtY3MYASABKAUSCgoCbXMYAiAB",
            "KAUSCwoDc2VjGAMgASgFEgsKA21pbhgEIAEoBRIMCgRob3VyGAUgASgFEgsK",
            "A2RheRgGIAEoBRIQCgh3ZWVrX2RheRgHIAEoBRINCgVtb250aBgIIAEoBRIM",
            "CgR5ZWFyGAkgASgFIvQCCgtUcmFuc2FjdGlvbhIQCgh0cmFuc19pZBgBIAEo",
            "AxIOCgZzdGF0dXMYAiABKAUSEgoKcmVzdWx0X21zZxgDIAEoCRIuCglkYXRl",
            "X3RpbWUYBCABKAsyGy5xbHVhLnN0cnVjdHMuRGF0ZVRpbWVFbnRyeRILCgN1",
            "aWQYBSABKAkSDQoFZmxhZ3MYBiABKAUSFwoPc2VydmVyX3RyYW5zX2lkGAcg",
            "ASgJEhEKCW9yZGVyX251bRgIIAEoCRINCgVwcmljZRgJIAEoCRIQCghxdWFu",
            "dGl0eRgKIAEoCRIPCgdiYWxhbmNlGAsgASgJEg8KB2Zpcm1faWQYDCABKAkS",
            "DwoHYWNjb3VudBgNIAEoCRITCgtjbGllbnRfY29kZRgOIAEoCRIRCglicm9r",
            "ZXJyZWYYDyABKAkSEgoKY2xhc3NfY29kZRgQIAEoCRIQCghzZWNfY29kZRgR",
            "IAEoCRIVCg1leGNoYW5nZV9jb2RlGBIgASgJIjYKDlBhcmFtRXZlbnRJbmZv",
            "EhIKCmNsYXNzX2NvZGUYASABKAkSEAoIc2VjX2NvZGUYAiABKAkiNgoOUXVv",
            "dGVFdmVudEluZm8SEgoKY2xhc3NfY29kZRgBIAEoCRIQCghzZWNfY29kZRgC",
            "IAEoCSIiChJDb25uZWN0ZWRFdmVudEluZm8SDAoEZmxhZxgBIAEoCCIdCg1T",
            "dG9wRXZlbnRJbmZvEgwKBGZsYWcYASABKAUijwEKDkRhdGFTb3VyY2VUaW1l",
            "EgwKBHllYXIYASABKAUSDQoFbW9udGgYAiABKAUSCwoDZGF5GAMgASgFEhAK",
            "CHdlZWtfZGF5GAQgASgFEgwKBGhvdXIYBSABKAUSCwoDbWluGAYgASgFEgsK",
            "A3NlYxgHIAEoBRIKCgJtcxgIIAEoBRINCgVjb3VudBgJIAEoBSLaAQoURGF0",
            "YVNvdXJjZVVwZGF0ZUluZm8SDAoEdXVpZBgBIAEoCRINCgVpbmRleBgCIAEo",
            "BRIMCgRvcGVuGAMgASgJEgwKBGhpZ2gYBCABKAkSCwoDbG93GAUgASgJEg0K",
            "BWNsb3NlGAYgASgJEg4KBnZvbHVtZRgHIAEoCRIqCgR0aW1lGAggASgLMhwu",
            "cWx1YS5zdHJ1Y3RzLkRhdGFTb3VyY2VUaW1lEhMKCW51bGxfc2l6ZRgJIAEo",
            "CEgAEhQKCnZhbHVlX3NpemUYCiABKAVIAEIGCgRzaXplYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Klass), global::Qlua.Structs.Klass.Parser, new[]{ "Firmid", "Name", "Code", "Npars", "Nsecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Firm), global::Qlua.Structs.Firm.Parser, new[]{ "Firmid", "FirmName", "NullStatus", "ValueStatus", "Exchange" }, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.AllTrade), global::Qlua.Structs.AllTrade.Parser, new[]{ "TradeNum", "NullFlags", "ValueFlags", "Price", "Qty", "Value", "Accruedint", "Yield", "Settlecode", "Reporate", "Repovalue", "Repo2Value", "Repoterm", "SecCode", "ClassCode", "Datetime", "Period", "OpenInterest", "ExchangeCode", "ExecMarket" }, new[]{ "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Trade), global::Qlua.Structs.Trade.Parser, new[]{ "TradeNum", "OrderNum", "Brokerref", "Userid", "Firmid", "CanceledUid", "Account", "Price", "Qty", "Value", "Accruedint", "Yield", "Settlecode", "Cpfirmid", "Flags", "Price2", "Reporate", "ClientCode", "Accrued2", "Repoterm", "Repovalue", "Repo2Value", "StartDiscount", "LowerDiscount", "UpperDiscount", "BlockSecurities", "ClearingComission", "ExchangeComission", "TechCenterComission", "SettleDate", "SettleCurrency", "TradeCurrency", "ExchangeCode", "StationId", "SecCode", "ClassCode", "Datetime", "BankAccId", "BrokerComission", "LinkedTrade", "Period", "TransId", "Kind", "ClearingBankAccid", "CanceledDatetime", "ClearingFirmid", "SystemRef", "Uid", "Lseccode", "OrderRevisionNumber", "OrderQty", "OrderPrice", "OrderExchangeCode", "ExecMarket", "LiquidityIndicator", "Extref", "ExtTradeFlags", "OnBehalfOfUid", "ClientQualifier", "ClientShortCode", "InvestmentDecisionMakerQualifier", "InvestmentDecisionMakerShortCode", "ExecutingTraderQualifier", "ExecutingTraderShortCode", "WaiverFlag", "MlegBaseSid", "SideQualifier", "OtcPostTradeIndicator", "Capacity", "CrossRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Order), global::Qlua.Structs.Order.Parser, new[]{ "OrderNum", "Flags", "Brokerref", "Userid", "Firmid", "Account", "Price", "Qty", "Balance", "Value", "Accruedint", "Yield", "TransId", "ClientCode", "Price2", "Settlecode", "Uid", "CanceledUid", "ExchangeCode", "ActivationTime", "Linkedorder", "Expiry", "SecCode", "ClassCode", "Datetime", "WithdrawDatetime", "BankAccId", "ValueEntryType", "Repoterm", "Repovalue", "Repo2Value", "RepoValueBalance", "StartDiscount", "RejectReason", "ExtOrderFlags", "MinQty", "ExecType", "SideQualifier", "AcntType", "Capacity", "PassiveOnlyOrder", "Visible", "AwgPrice", "ExpiryTime", "RevisionNumber", "PriceCurrency", "ExtOrderStatus", "AcceptedUid", "FilledValue", "Extref", "SettleCurrency", "OnBehalfOfUid", "ClientQualifier", "ClientShortCode", "InvestmentDecisionMakerQualifier", "InvestmentDecisionMakerShortCode", "ExecutingTraderQualifier", "ExecutingTraderShortCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.AccountBalance), global::Qlua.Structs.AccountBalance.Parser, new[]{ "Firmid", "SecCode", "Trdaccid", "Depaccid", "Openbal", "Currentpos", "Plannedpossell", "Plannedposbuy", "Planbal", "Usqtyb", "Usqtys", "Planned", "Settlebal", "BankAccId", "Firmuse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.StopOrder), global::Qlua.Structs.StopOrder.Parser, new[]{ "OrderNum", "Ordertime", "Flags", "Brokerref", "Firmid", "Account", "Condition", "ConditionPrice", "Price", "Qty", "Linkedorder", "Expiry", "TransId", "ClientCode", "CoOrderNum", "CoOrderPrice", "StopOrderType", "Orderdate", "AlltradeNum", "Stopflags", "Offset", "Spread", "Balance", "Uid", "FilledQty", "WithdrawTime", "ConditionPrice2", "ActiveFromTime", "ActiveToTime", "SecCode", "ClassCode", "ConditionSecCode", "ConditionClassCode", "CanceledUid", "OrderDateTime", "WithdrawDatetime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.FuturesLimit), global::Qlua.Structs.FuturesLimit.Parser, new[]{ "Firmid", "Trdaccid", "LimitType", "LiquidityCoef", "CbpPrevLimit", "Cbplimit", "Cbplused", "Cbplplanned", "Varmargin", "Accruedint", "CbplusedForOrders", "CbplusedForPositions", "OptionsPremium", "TsComission", "Kgo", "Currcode", "RealVarmargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.FuturesClientHolding), global::Qlua.Structs.FuturesClientHolding.Parser, new[]{ "Firmid", "Trdaccid", "SecCode", "Type", "Startbuy", "Startsell", "Startnet", "Todaybuy", "Todaysell", "Totalnet", "Openbuys", "Opensells", "Cbplused", "Cbplplanned", "Varmargin", "Avrposnprice", "Positionvalue", "RealVarmargin", "TotalVarmargin", "SessionStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.MoneyLimit), global::Qlua.Structs.MoneyLimit.Parser, new[]{ "Currcode", "Tag", "Firmid", "ClientCode", "Openbal", "Openlimit", "Currentbal", "Currentlimit", "Locked", "LockedValueCoef", "LockedMarginValue", "Leverage", "LimitKind", "WaPositionPrice", "OrdersCollateral", "PositionsCollateral" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.MoneyLimitDelete), global::Qlua.Structs.MoneyLimitDelete.Parser, new[]{ "Currcode", "Tag", "ClientCode", "Firmid", "LimitKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.DepoLimitDelete), global::Qlua.Structs.DepoLimitDelete.Parser, new[]{ "SecCode", "Trdaccid", "Firmid", "ClientCode", "LimitKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.FuturesLimitDelete), global::Qlua.Structs.FuturesLimitDelete.Parser, new[]{ "Firmid", "LimitType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.DepoLimit), global::Qlua.Structs.DepoLimit.Parser, new[]{ "SecCode", "Trdaccid", "Firmid", "ClientCode", "Openbal", "Openlimit", "Currentbal", "Currentlimit", "LockedSell", "LockedBuy", "LockedBuyValue", "LockedSellValue", "WaPositionPrice", "LimitKind" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.AccountPosition), global::Qlua.Structs.AccountPosition.Parser, new[]{ "Firmid", "Currcode", "Tag", "Description", "Openbal", "Currentpos", "Plannedpos", "Limit1", "Limit2", "Orderbuy", "Ordersell", "Netto", "Plannedbal", "Debit", "Credit", "BankAccId", "Margincall", "Settlebal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.NegDeal), global::Qlua.Structs.NegDeal.Parser, new[]{ "NegDealNum", "NegDealTime", "Flags", "Brokerref", "Userid", "Firmid", "Cpuserid", "Cpfirmid", "Account", "Price", "Qty", "Matchref", "Settlecode", "Yield", "Accruedint", "Value", "Price2", "Reporate", "Refundrate", "TransId", "ClientCode", "Repoentry", "Repovalue", "Repo2Value", "Repoterm", "StartDiscount", "LowerDiscount", "UpperDiscount", "BlockSecurities", "Uid", "WithdrawTime", "NegDealDate", "Balance", "OriginRepovalue", "OriginQty", "OriginDiscount", "NegDealActivationDate", "NegDealActivationTime", "Quoteno", "SettleCurrency", "SecCode", "ClassCode", "BankAccId", "WithdrawDate", "Linkedorder", "ActivationDateTime", "WithdrawDateTime", "DateTime", "Lseccode", "CanceledUid", "SystemRef", "PriceCurrency", "OrderExchangeCode", "Extref", "Period", "ClientQualifier", "ClientShortCode", "InvestmentDecisionMakerQualifier", "InvestmentDecisionMakerShortCode", "ExecutingTraderQualifier", "ExecutingTraderShortCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.NegTrade), global::Qlua.Structs.NegTrade.Parser, new[]{ "TradeNum", "TradeDate", "SettleDate", "Flags", "Brokerref", "Firmid", "Account", "Cpfirmid", "Cpaccount", "Price", "Qty", "Value", "Settlecode", "ReportNum", "CpreportNum", "Accruedint", "Repotradeno", "Price1", "Reporate", "Price2", "ClientCode", "TsComission", "Balance", "SettleTime", "Amount", "Repovalue", "Repoterm", "Repo2Value", "ReturnValue", "Discount", "LowerDiscount", "UpperDiscount", "BlockSecurities", "UrgencyFlag", "Type", "OperationType", "ExpectedDiscount", "ExpectedQuantity", "ExpectedRepovalue", "ExpectedRepo2Value", "ExpectedReturnValue", "OrderNum", "ReportTradeDate", "Settled", "ClearingType", "ReportComission", "CouponPayment", "PrincipalPayment", "PrincipalPaymentDate", "Nextdaysettle", "SettleCurrency", "SecCode", "ClassCode", "Compval", "Parenttradeno", "Bankid", "Bankaccid", "Precisebalance", "Confirmtime", "ExFlags", "Confirmreport", "Extref" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Security), global::Qlua.Structs.Security.Parser, new[]{ "Code", "Name", "ShortName", "ClassCode", "ClassName", "FaceValue", "FaceUnit", "Scale", "MatDate", "LotSize", "IsinCode", "MinPriceStep" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.CandleEntry), global::Qlua.Structs.CandleEntry.Parser, new[]{ "Open", "Close", "High", "Low", "Volume", "Datetime", "DoesExist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.DateTimeEntry), global::Qlua.Structs.DateTimeEntry.Parser, new[]{ "Mcs", "Ms", "Sec", "Min", "Hour", "Day", "WeekDay", "Month", "Year" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.Transaction), global::Qlua.Structs.Transaction.Parser, new[]{ "TransId", "Status", "ResultMsg", "DateTime", "Uid", "Flags", "ServerTransId", "OrderNum", "Price", "Quantity", "Balance", "FirmId", "Account", "ClientCode", "Brokerref", "ClassCode", "SecCode", "ExchangeCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.ParamEventInfo), global::Qlua.Structs.ParamEventInfo.Parser, new[]{ "ClassCode", "SecCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.QuoteEventInfo), global::Qlua.Structs.QuoteEventInfo.Parser, new[]{ "ClassCode", "SecCode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.ConnectedEventInfo), global::Qlua.Structs.ConnectedEventInfo.Parser, new[]{ "Flag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.StopEventInfo), global::Qlua.Structs.StopEventInfo.Parser, new[]{ "Flag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.DataSourceTime), global::Qlua.Structs.DataSourceTime.Parser, new[]{ "Year", "Month", "Day", "WeekDay", "Hour", "Min", "Sec", "Ms", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Qlua.Structs.DataSourceUpdateInfo), global::Qlua.Structs.DataSourceUpdateInfo.Parser, new[]{ "Uuid", "Index", "Open", "High", "Low", "Close", "Volume", "Time", "NullSize", "ValueSize" }, new[]{ "Size" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Классы
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Klass : pb::IMessage<Klass>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Klass> _parser = new pb::MessageParser<Klass>(() => new Klass());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Klass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Klass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Klass(Klass other) : this() {
      firmid_ = other.firmid_;
      name_ = other.name_;
      code_ = other.code_;
      npars_ = other.npars_;
      nsecs_ = other.nsecs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Klass Clone() {
      return new Klass(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "npars" field.</summary>
    public const int NparsFieldNumber = 4;
    private int npars_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Npars {
      get { return npars_; }
      set {
        npars_ = value;
      }
    }

    /// <summary>Field number for the "nsecs" field.</summary>
    public const int NsecsFieldNumber = 5;
    private int nsecs_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Nsecs {
      get { return nsecs_; }
      set {
        nsecs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Klass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Klass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (Name != other.Name) return false;
      if (Code != other.Code) return false;
      if (Npars != other.Npars) return false;
      if (Nsecs != other.Nsecs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Npars != 0) hash ^= Npars.GetHashCode();
      if (Nsecs != 0) hash ^= Nsecs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Npars != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Npars);
      }
      if (Nsecs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Nsecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Code);
      }
      if (Npars != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Npars);
      }
      if (Nsecs != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Nsecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Npars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npars);
      }
      if (Nsecs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nsecs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Klass other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Npars != 0) {
        Npars = other.Npars;
      }
      if (other.Nsecs != 0) {
        Nsecs = other.Nsecs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 32: {
            Npars = input.ReadInt32();
            break;
          }
          case 40: {
            Nsecs = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Code = input.ReadString();
            break;
          }
          case 32: {
            Npars = input.ReadInt32();
            break;
          }
          case 40: {
            Nsecs = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Фирмы
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Firm : pb::IMessage<Firm>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Firm> _parser = new pb::MessageParser<Firm>(() => new Firm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Firm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Firm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Firm(Firm other) : this() {
      firmid_ = other.firmid_;
      firmName_ = other.firmName_;
      exchange_ = other.exchange_;
      switch (other.StatusCase) {
        case StatusOneofCase.NullStatus:
          NullStatus = other.NullStatus;
          break;
        case StatusOneofCase.ValueStatus:
          ValueStatus = other.ValueStatus;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Firm Clone() {
      return new Firm(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firm_name" field.</summary>
    public const int FirmNameFieldNumber = 2;
    private string firmName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirmName {
      get { return firmName_; }
      set {
        firmName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "null_status" field.</summary>
    public const int NullStatusFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NullStatus {
      get { return HasNullStatus ? (bool) status_ : false; }
      set {
        status_ = value;
        statusCase_ = StatusOneofCase.NullStatus;
      }
    }
    /// <summary>Gets whether the "null_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNullStatus {
      get { return statusCase_ == StatusOneofCase.NullStatus; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "null_status" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNullStatus() {
      if (HasNullStatus) {
        ClearStatus();
      }
    }

    /// <summary>Field number for the "value_status" field.</summary>
    public const int ValueStatusFieldNumber = 4;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ValueStatus {
      get { return HasValueStatus ? (int) status_ : 0; }
      set {
        status_ = value;
        statusCase_ = StatusOneofCase.ValueStatus;
      }
    }
    /// <summary>Gets whether the "value_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValueStatus {
      get { return statusCase_ == StatusOneofCase.ValueStatus; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "value_status" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValueStatus() {
      if (HasValueStatus) {
        ClearStatus();
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 5;
    private string exchange_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Exchange {
      get { return exchange_; }
      set {
        exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object status_;
    /// <summary>Enum of possible cases for the "status" oneof.</summary>
    public enum StatusOneofCase {
      None = 0,
      NullStatus = 3,
      ValueStatus = 4,
    }
    private StatusOneofCase statusCase_ = StatusOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatusOneofCase StatusCase {
      get { return statusCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStatus() {
      statusCase_ = StatusOneofCase.None;
      status_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Firm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Firm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (FirmName != other.FirmName) return false;
      if (NullStatus != other.NullStatus) return false;
      if (ValueStatus != other.ValueStatus) return false;
      if (Exchange != other.Exchange) return false;
      if (StatusCase != other.StatusCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (FirmName.Length != 0) hash ^= FirmName.GetHashCode();
      if (HasNullStatus) hash ^= NullStatus.GetHashCode();
      if (HasValueStatus) hash ^= ValueStatus.GetHashCode();
      if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
      hash ^= (int) statusCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (FirmName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirmName);
      }
      if (HasNullStatus) {
        output.WriteRawTag(24);
        output.WriteBool(NullStatus);
      }
      if (HasValueStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(ValueStatus);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (FirmName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirmName);
      }
      if (HasNullStatus) {
        output.WriteRawTag(24);
        output.WriteBool(NullStatus);
      }
      if (HasValueStatus) {
        output.WriteRawTag(32);
        output.WriteInt32(ValueStatus);
      }
      if (Exchange.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Exchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (FirmName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmName);
      }
      if (HasNullStatus) {
        size += 1 + 1;
      }
      if (HasValueStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueStatus);
      }
      if (Exchange.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Firm other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.FirmName.Length != 0) {
        FirmName = other.FirmName;
      }
      if (other.Exchange.Length != 0) {
        Exchange = other.Exchange;
      }
      switch (other.StatusCase) {
        case StatusOneofCase.NullStatus:
          NullStatus = other.NullStatus;
          break;
        case StatusOneofCase.ValueStatus:
          ValueStatus = other.ValueStatus;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            FirmName = input.ReadString();
            break;
          }
          case 24: {
            NullStatus = input.ReadBool();
            break;
          }
          case 32: {
            ValueStatus = input.ReadInt32();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            FirmName = input.ReadString();
            break;
          }
          case 24: {
            NullStatus = input.ReadBool();
            break;
          }
          case 32: {
            ValueStatus = input.ReadInt32();
            break;
          }
          case 42: {
            Exchange = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Обезличенные сделки
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AllTrade : pb::IMessage<AllTrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllTrade> _parser = new pb::MessageParser<AllTrade>(() => new AllTrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AllTrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllTrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllTrade(AllTrade other) : this() {
      tradeNum_ = other.tradeNum_;
      price_ = other.price_;
      qty_ = other.qty_;
      value_ = other.value_;
      accruedint_ = other.accruedint_;
      yield_ = other.yield_;
      settlecode_ = other.settlecode_;
      reporate_ = other.reporate_;
      repovalue_ = other.repovalue_;
      repo2Value_ = other.repo2Value_;
      repoterm_ = other.repoterm_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
      period_ = other.period_;
      openInterest_ = other.openInterest_;
      exchangeCode_ = other.exchangeCode_;
      execMarket_ = other.execMarket_;
      switch (other.FlagsCase) {
        case FlagsOneofCase.NullFlags:
          NullFlags = other.NullFlags;
          break;
        case FlagsOneofCase.ValueFlags:
          ValueFlags = other.ValueFlags;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllTrade Clone() {
      return new AllTrade(this);
    }

    /// <summary>Field number for the "trade_num" field.</summary>
    public const int TradeNumFieldNumber = 1;
    private long tradeNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeNum {
      get { return tradeNum_; }
      set {
        tradeNum_ = value;
      }
    }

    /// <summary>Field number for the "null_flags" field.</summary>
    public const int NullFlagsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NullFlags {
      get { return HasNullFlags ? (bool) flags_ : false; }
      set {
        flags_ = value;
        flagsCase_ = FlagsOneofCase.NullFlags;
      }
    }
    /// <summary>Gets whether the "null_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNullFlags {
      get { return flagsCase_ == FlagsOneofCase.NullFlags; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "null_flags" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNullFlags() {
      if (HasNullFlags) {
        ClearFlags();
      }
    }

    /// <summary>Field number for the "value_flags" field.</summary>
    public const int ValueFlagsFieldNumber = 3;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ValueFlags {
      get { return HasValueFlags ? (int) flags_ : 0; }
      set {
        flags_ = value;
        flagsCase_ = FlagsOneofCase.ValueFlags;
      }
    }
    /// <summary>Gets whether the "value_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValueFlags {
      get { return flagsCase_ == FlagsOneofCase.ValueFlags; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "value_flags" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValueFlags() {
      if (HasValueFlags) {
        ClearFlags();
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 4;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 5;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private string value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 7;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 8;
    private string yield_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Yield {
      get { return yield_; }
      set {
        yield_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlecode" field.</summary>
    public const int SettlecodeFieldNumber = 9;
    private string settlecode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlecode {
      get { return settlecode_; }
      set {
        settlecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporate" field.</summary>
    public const int ReporateFieldNumber = 10;
    private string reporate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reporate {
      get { return reporate_; }
      set {
        reporate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repovalue" field.</summary>
    public const int RepovalueFieldNumber = 11;
    private string repovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repovalue {
      get { return repovalue_; }
      set {
        repovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo2value" field.</summary>
    public const int Repo2ValueFieldNumber = 12;
    private string repo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repo2Value {
      get { return repo2Value_; }
      set {
        repo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repoterm" field.</summary>
    public const int RepotermFieldNumber = 13;
    private string repoterm_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repoterm {
      get { return repoterm_; }
      set {
        repoterm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 14;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 15;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 16;
    private global::Qlua.Structs.DateTimeEntry datetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 17;
    private int period_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "open_interest" field.</summary>
    public const int OpenInterestFieldNumber = 18;
    private string openInterest_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OpenInterest {
      get { return openInterest_; }
      set {
        openInterest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_code" field.</summary>
    public const int ExchangeCodeFieldNumber = 19;
    private string exchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeCode {
      get { return exchangeCode_; }
      set {
        exchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_market" field.</summary>
    public const int ExecMarketFieldNumber = 20;
    private string execMarket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecMarket {
      get { return execMarket_; }
      set {
        execMarket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object flags_;
    /// <summary>Enum of possible cases for the "flags" oneof.</summary>
    public enum FlagsOneofCase {
      None = 0,
      NullFlags = 2,
      ValueFlags = 3,
    }
    private FlagsOneofCase flagsCase_ = FlagsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlagsOneofCase FlagsCase {
      get { return flagsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlags() {
      flagsCase_ = FlagsOneofCase.None;
      flags_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AllTrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AllTrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeNum != other.TradeNum) return false;
      if (NullFlags != other.NullFlags) return false;
      if (ValueFlags != other.ValueFlags) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Value != other.Value) return false;
      if (Accruedint != other.Accruedint) return false;
      if (Yield != other.Yield) return false;
      if (Settlecode != other.Settlecode) return false;
      if (Reporate != other.Reporate) return false;
      if (Repovalue != other.Repovalue) return false;
      if (Repo2Value != other.Repo2Value) return false;
      if (Repoterm != other.Repoterm) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (Period != other.Period) return false;
      if (OpenInterest != other.OpenInterest) return false;
      if (ExchangeCode != other.ExchangeCode) return false;
      if (ExecMarket != other.ExecMarket) return false;
      if (FlagsCase != other.FlagsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeNum != 0L) hash ^= TradeNum.GetHashCode();
      if (HasNullFlags) hash ^= NullFlags.GetHashCode();
      if (HasValueFlags) hash ^= ValueFlags.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (Yield.Length != 0) hash ^= Yield.GetHashCode();
      if (Settlecode.Length != 0) hash ^= Settlecode.GetHashCode();
      if (Reporate.Length != 0) hash ^= Reporate.GetHashCode();
      if (Repovalue.Length != 0) hash ^= Repovalue.GetHashCode();
      if (Repo2Value.Length != 0) hash ^= Repo2Value.GetHashCode();
      if (Repoterm.Length != 0) hash ^= Repoterm.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (datetime_ != null) hash ^= Datetime.GetHashCode();
      if (Period != 0) hash ^= Period.GetHashCode();
      if (OpenInterest.Length != 0) hash ^= OpenInterest.GetHashCode();
      if (ExchangeCode.Length != 0) hash ^= ExchangeCode.GetHashCode();
      if (ExecMarket.Length != 0) hash ^= ExecMarket.GetHashCode();
      hash ^= (int) flagsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (HasNullFlags) {
        output.WriteRawTag(16);
        output.WriteBool(NullFlags);
      }
      if (HasValueFlags) {
        output.WriteRawTag(24);
        output.WriteInt32(ValueFlags);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Yield);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Settlecode);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Reporate);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Repoterm);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Datetime);
      }
      if (Period != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Period);
      }
      if (OpenInterest.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OpenInterest);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ExecMarket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (HasNullFlags) {
        output.WriteRawTag(16);
        output.WriteBool(NullFlags);
      }
      if (HasValueFlags) {
        output.WriteRawTag(24);
        output.WriteInt32(ValueFlags);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Yield);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Settlecode);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Reporate);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Repoterm);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Datetime);
      }
      if (Period != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Period);
      }
      if (OpenInterest.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(OpenInterest);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ExecMarket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TradeNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TradeNum);
      }
      if (HasNullFlags) {
        size += 1 + 1;
      }
      if (HasValueFlags) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueFlags);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Accruedint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (Yield.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yield);
      }
      if (Settlecode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Settlecode);
      }
      if (Reporate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reporate);
      }
      if (Repovalue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Repoterm);
      }
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (datetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (Period != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Period);
      }
      if (OpenInterest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpenInterest);
      }
      if (ExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecMarket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AllTrade other) {
      if (other == null) {
        return;
      }
      if (other.TradeNum != 0L) {
        TradeNum = other.TradeNum;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.Yield.Length != 0) {
        Yield = other.Yield;
      }
      if (other.Settlecode.Length != 0) {
        Settlecode = other.Settlecode;
      }
      if (other.Reporate.Length != 0) {
        Reporate = other.Reporate;
      }
      if (other.Repovalue.Length != 0) {
        Repovalue = other.Repovalue;
      }
      if (other.Repo2Value.Length != 0) {
        Repo2Value = other.Repo2Value;
      }
      if (other.Repoterm.Length != 0) {
        Repoterm = other.Repoterm;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.datetime_ != null) {
        if (datetime_ == null) {
          Datetime = new global::Qlua.Structs.DateTimeEntry();
        }
        Datetime.MergeFrom(other.Datetime);
      }
      if (other.Period != 0) {
        Period = other.Period;
      }
      if (other.OpenInterest.Length != 0) {
        OpenInterest = other.OpenInterest;
      }
      if (other.ExchangeCode.Length != 0) {
        ExchangeCode = other.ExchangeCode;
      }
      if (other.ExecMarket.Length != 0) {
        ExecMarket = other.ExecMarket;
      }
      switch (other.FlagsCase) {
        case FlagsOneofCase.NullFlags:
          NullFlags = other.NullFlags;
          break;
        case FlagsOneofCase.ValueFlags:
          ValueFlags = other.ValueFlags;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 16: {
            NullFlags = input.ReadBool();
            break;
          }
          case 24: {
            ValueFlags = input.ReadInt32();
            break;
          }
          case 34: {
            Price = input.ReadString();
            break;
          }
          case 40: {
            Qty = input.ReadInt32();
            break;
          }
          case 50: {
            Value = input.ReadString();
            break;
          }
          case 58: {
            Accruedint = input.ReadString();
            break;
          }
          case 66: {
            Yield = input.ReadString();
            break;
          }
          case 74: {
            Settlecode = input.ReadString();
            break;
          }
          case 82: {
            Reporate = input.ReadString();
            break;
          }
          case 90: {
            Repovalue = input.ReadString();
            break;
          }
          case 98: {
            Repo2Value = input.ReadString();
            break;
          }
          case 106: {
            Repoterm = input.ReadString();
            break;
          }
          case 114: {
            SecCode = input.ReadString();
            break;
          }
          case 122: {
            ClassCode = input.ReadString();
            break;
          }
          case 130: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 136: {
            Period = input.ReadInt32();
            break;
          }
          case 146: {
            OpenInterest = input.ReadString();
            break;
          }
          case 154: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 162: {
            ExecMarket = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 16: {
            NullFlags = input.ReadBool();
            break;
          }
          case 24: {
            ValueFlags = input.ReadInt32();
            break;
          }
          case 34: {
            Price = input.ReadString();
            break;
          }
          case 40: {
            Qty = input.ReadInt32();
            break;
          }
          case 50: {
            Value = input.ReadString();
            break;
          }
          case 58: {
            Accruedint = input.ReadString();
            break;
          }
          case 66: {
            Yield = input.ReadString();
            break;
          }
          case 74: {
            Settlecode = input.ReadString();
            break;
          }
          case 82: {
            Reporate = input.ReadString();
            break;
          }
          case 90: {
            Repovalue = input.ReadString();
            break;
          }
          case 98: {
            Repo2Value = input.ReadString();
            break;
          }
          case 106: {
            Repoterm = input.ReadString();
            break;
          }
          case 114: {
            SecCode = input.ReadString();
            break;
          }
          case 122: {
            ClassCode = input.ReadString();
            break;
          }
          case 130: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 136: {
            Period = input.ReadInt32();
            break;
          }
          case 146: {
            OpenInterest = input.ReadString();
            break;
          }
          case 154: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 162: {
            ExecMarket = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Сделки
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Trade : pb::IMessage<Trade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trade> _parser = new pb::MessageParser<Trade>(() => new Trade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade(Trade other) : this() {
      tradeNum_ = other.tradeNum_;
      orderNum_ = other.orderNum_;
      brokerref_ = other.brokerref_;
      userid_ = other.userid_;
      firmid_ = other.firmid_;
      canceledUid_ = other.canceledUid_;
      account_ = other.account_;
      price_ = other.price_;
      qty_ = other.qty_;
      value_ = other.value_;
      accruedint_ = other.accruedint_;
      yield_ = other.yield_;
      settlecode_ = other.settlecode_;
      cpfirmid_ = other.cpfirmid_;
      flags_ = other.flags_;
      price2_ = other.price2_;
      reporate_ = other.reporate_;
      clientCode_ = other.clientCode_;
      accrued2_ = other.accrued2_;
      repoterm_ = other.repoterm_;
      repovalue_ = other.repovalue_;
      repo2Value_ = other.repo2Value_;
      startDiscount_ = other.startDiscount_;
      lowerDiscount_ = other.lowerDiscount_;
      upperDiscount_ = other.upperDiscount_;
      blockSecurities_ = other.blockSecurities_;
      clearingComission_ = other.clearingComission_;
      exchangeComission_ = other.exchangeComission_;
      techCenterComission_ = other.techCenterComission_;
      settleDate_ = other.settleDate_;
      settleCurrency_ = other.settleCurrency_;
      tradeCurrency_ = other.tradeCurrency_;
      exchangeCode_ = other.exchangeCode_;
      stationId_ = other.stationId_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
      bankAccId_ = other.bankAccId_;
      brokerComission_ = other.brokerComission_;
      linkedTrade_ = other.linkedTrade_;
      period_ = other.period_;
      transId_ = other.transId_;
      kind_ = other.kind_;
      clearingBankAccid_ = other.clearingBankAccid_;
      canceledDatetime_ = other.canceledDatetime_ != null ? other.canceledDatetime_.Clone() : null;
      clearingFirmid_ = other.clearingFirmid_;
      systemRef_ = other.systemRef_;
      uid_ = other.uid_;
      lseccode_ = other.lseccode_;
      orderRevisionNumber_ = other.orderRevisionNumber_;
      orderQty_ = other.orderQty_;
      orderPrice_ = other.orderPrice_;
      orderExchangeCode_ = other.orderExchangeCode_;
      execMarket_ = other.execMarket_;
      liquidityIndicator_ = other.liquidityIndicator_;
      extref_ = other.extref_;
      extTradeFlags_ = other.extTradeFlags_;
      onBehalfOfUid_ = other.onBehalfOfUid_;
      clientQualifier_ = other.clientQualifier_;
      clientShortCode_ = other.clientShortCode_;
      investmentDecisionMakerQualifier_ = other.investmentDecisionMakerQualifier_;
      investmentDecisionMakerShortCode_ = other.investmentDecisionMakerShortCode_;
      executingTraderQualifier_ = other.executingTraderQualifier_;
      executingTraderShortCode_ = other.executingTraderShortCode_;
      waiverFlag_ = other.waiverFlag_;
      mlegBaseSid_ = other.mlegBaseSid_;
      sideQualifier_ = other.sideQualifier_;
      otcPostTradeIndicator_ = other.otcPostTradeIndicator_;
      capacity_ = other.capacity_;
      crossRate_ = other.crossRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trade Clone() {
      return new Trade(this);
    }

    /// <summary>Field number for the "trade_num" field.</summary>
    public const int TradeNumFieldNumber = 1;
    private long tradeNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeNum {
      get { return tradeNum_; }
      set {
        tradeNum_ = value;
      }
    }

    /// <summary>Field number for the "order_num" field.</summary>
    public const int OrderNumFieldNumber = 2;
    private long orderNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = value;
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 3;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 4;
    private string userid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 5;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canceled_uid" field.</summary>
    public const int CanceledUidFieldNumber = 6;
    private string canceledUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CanceledUid {
      get { return canceledUid_; }
      set {
        canceledUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 7;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 8;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 9;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 10;
    private string value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 11;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 12;
    private string yield_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Yield {
      get { return yield_; }
      set {
        yield_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlecode" field.</summary>
    public const int SettlecodeFieldNumber = 13;
    private string settlecode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlecode {
      get { return settlecode_; }
      set {
        settlecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpfirmid" field.</summary>
    public const int CpfirmidFieldNumber = 14;
    private string cpfirmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cpfirmid {
      get { return cpfirmid_; }
      set {
        cpfirmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 15;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "price2" field.</summary>
    public const int Price2FieldNumber = 16;
    private string price2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price2 {
      get { return price2_; }
      set {
        price2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporate" field.</summary>
    public const int ReporateFieldNumber = 17;
    private string reporate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reporate {
      get { return reporate_; }
      set {
        reporate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 18;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accrued2" field.</summary>
    public const int Accrued2FieldNumber = 19;
    private string accrued2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accrued2 {
      get { return accrued2_; }
      set {
        accrued2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repoterm" field.</summary>
    public const int RepotermFieldNumber = 20;
    private string repoterm_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repoterm {
      get { return repoterm_; }
      set {
        repoterm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repovalue" field.</summary>
    public const int RepovalueFieldNumber = 21;
    private string repovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repovalue {
      get { return repovalue_; }
      set {
        repovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo2value" field.</summary>
    public const int Repo2ValueFieldNumber = 22;
    private string repo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repo2Value {
      get { return repo2Value_; }
      set {
        repo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_discount" field.</summary>
    public const int StartDiscountFieldNumber = 23;
    private string startDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDiscount {
      get { return startDiscount_; }
      set {
        startDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lower_discount" field.</summary>
    public const int LowerDiscountFieldNumber = 24;
    private string lowerDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LowerDiscount {
      get { return lowerDiscount_; }
      set {
        lowerDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upper_discount" field.</summary>
    public const int UpperDiscountFieldNumber = 25;
    private string upperDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpperDiscount {
      get { return upperDiscount_; }
      set {
        upperDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_securities" field.</summary>
    public const int BlockSecuritiesFieldNumber = 26;
    private string blockSecurities_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BlockSecurities {
      get { return blockSecurities_; }
      set {
        blockSecurities_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clearing_comission" field.</summary>
    public const int ClearingComissionFieldNumber = 27;
    private string clearingComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingComission {
      get { return clearingComission_; }
      set {
        clearingComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_comission" field.</summary>
    public const int ExchangeComissionFieldNumber = 28;
    private string exchangeComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeComission {
      get { return exchangeComission_; }
      set {
        exchangeComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tech_center_comission" field.</summary>
    public const int TechCenterComissionFieldNumber = 29;
    private string techCenterComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TechCenterComission {
      get { return techCenterComission_; }
      set {
        techCenterComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_date" field.</summary>
    public const int SettleDateFieldNumber = 30;
    private string settleDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleDate {
      get { return settleDate_; }
      set {
        settleDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_currency" field.</summary>
    public const int SettleCurrencyFieldNumber = 31;
    private string settleCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleCurrency {
      get { return settleCurrency_; }
      set {
        settleCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trade_currency" field.</summary>
    public const int TradeCurrencyFieldNumber = 32;
    private string tradeCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeCurrency {
      get { return tradeCurrency_; }
      set {
        tradeCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_code" field.</summary>
    public const int ExchangeCodeFieldNumber = 33;
    private string exchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeCode {
      get { return exchangeCode_; }
      set {
        exchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "station_id" field.</summary>
    public const int StationIdFieldNumber = 34;
    private string stationId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StationId {
      get { return stationId_; }
      set {
        stationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 35;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 36;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 37;
    private global::Qlua.Structs.DateTimeEntry datetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    /// <summary>Field number for the "bank_acc_id" field.</summary>
    public const int BankAccIdFieldNumber = 38;
    private string bankAccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BankAccId {
      get { return bankAccId_; }
      set {
        bankAccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "broker_comission" field.</summary>
    public const int BrokerComissionFieldNumber = 39;
    private string brokerComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BrokerComission {
      get { return brokerComission_; }
      set {
        brokerComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "linked_trade" field.</summary>
    public const int LinkedTradeFieldNumber = 40;
    private string linkedTrade_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LinkedTrade {
      get { return linkedTrade_; }
      set {
        linkedTrade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 41;
    private int period_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 42;
    private string transId_ = "";
    /// <summary>
    /// NUMBER in QLUA; if not nullable then it should be of type long
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransId {
      get { return transId_; }
      set {
        transId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 43;
    private int kind_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "clearing_bank_accid" field.</summary>
    public const int ClearingBankAccidFieldNumber = 44;
    private string clearingBankAccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingBankAccid {
      get { return clearingBankAccid_; }
      set {
        clearingBankAccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canceled_datetime" field.</summary>
    public const int CanceledDatetimeFieldNumber = 45;
    private global::Qlua.Structs.DateTimeEntry canceledDatetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry CanceledDatetime {
      get { return canceledDatetime_; }
      set {
        canceledDatetime_ = value;
      }
    }

    /// <summary>Field number for the "clearing_firmid" field.</summary>
    public const int ClearingFirmidFieldNumber = 46;
    private string clearingFirmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClearingFirmid {
      get { return clearingFirmid_; }
      set {
        clearingFirmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "system_ref" field.</summary>
    public const int SystemRefFieldNumber = 47;
    private string systemRef_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SystemRef {
      get { return systemRef_; }
      set {
        systemRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 48;
    private string uid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lseccode" field.</summary>
    public const int LseccodeFieldNumber = 49;
    private string lseccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Lseccode {
      get { return lseccode_; }
      set {
        lseccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_revision_number" field.</summary>
    public const int OrderRevisionNumberFieldNumber = 50;
    private string orderRevisionNumber_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderRevisionNumber {
      get { return orderRevisionNumber_; }
      set {
        orderRevisionNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_qty" field.</summary>
    public const int OrderQtyFieldNumber = 51;
    private string orderQty_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderQty {
      get { return orderQty_; }
      set {
        orderQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_price" field.</summary>
    public const int OrderPriceFieldNumber = 52;
    private string orderPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderPrice {
      get { return orderPrice_; }
      set {
        orderPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_exchange_code" field.</summary>
    public const int OrderExchangeCodeFieldNumber = 53;
    private string orderExchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderExchangeCode {
      get { return orderExchangeCode_; }
      set {
        orderExchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exec_market" field.</summary>
    public const int ExecMarketFieldNumber = 54;
    private string execMarket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecMarket {
      get { return execMarket_; }
      set {
        execMarket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liquidity_indicator" field.</summary>
    public const int LiquidityIndicatorFieldNumber = 55;
    private int liquidityIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LiquidityIndicator {
      get { return liquidityIndicator_; }
      set {
        liquidityIndicator_ = value;
      }
    }

    /// <summary>Field number for the "extref" field.</summary>
    public const int ExtrefFieldNumber = 56;
    private string extref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Extref {
      get { return extref_; }
      set {
        extref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext_trade_flags" field.</summary>
    public const int ExtTradeFlagsFieldNumber = 57;
    private string extTradeFlags_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtTradeFlags {
      get { return extTradeFlags_; }
      set {
        extTradeFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "on_behalf_of_uid" field.</summary>
    public const int OnBehalfOfUidFieldNumber = 58;
    private string onBehalfOfUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OnBehalfOfUid {
      get { return onBehalfOfUid_; }
      set {
        onBehalfOfUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_qualifier" field.</summary>
    public const int ClientQualifierFieldNumber = 59;
    private int clientQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientQualifier {
      get { return clientQualifier_; }
      set {
        clientQualifier_ = value;
      }
    }

    /// <summary>Field number for the "client_short_code" field.</summary>
    public const int ClientShortCodeFieldNumber = 60;
    private string clientShortCode_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientShortCode {
      get { return clientShortCode_; }
      set {
        clientShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investment_decision_maker_qualifier" field.</summary>
    public const int InvestmentDecisionMakerQualifierFieldNumber = 61;
    private int investmentDecisionMakerQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InvestmentDecisionMakerQualifier {
      get { return investmentDecisionMakerQualifier_; }
      set {
        investmentDecisionMakerQualifier_ = value;
      }
    }

    /// <summary>Field number for the "investment_decision_maker_short_code" field.</summary>
    public const int InvestmentDecisionMakerShortCodeFieldNumber = 62;
    private string investmentDecisionMakerShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InvestmentDecisionMakerShortCode {
      get { return investmentDecisionMakerShortCode_; }
      set {
        investmentDecisionMakerShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executing_trader_qualifier" field.</summary>
    public const int ExecutingTraderQualifierFieldNumber = 63;
    private int executingTraderQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExecutingTraderQualifier {
      get { return executingTraderQualifier_; }
      set {
        executingTraderQualifier_ = value;
      }
    }

    /// <summary>Field number for the "executing_trader_short_code" field.</summary>
    public const int ExecutingTraderShortCodeFieldNumber = 64;
    private string executingTraderShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutingTraderShortCode {
      get { return executingTraderShortCode_; }
      set {
        executingTraderShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "waiver_flag" field.</summary>
    public const int WaiverFlagFieldNumber = 65;
    private int waiverFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaiverFlag {
      get { return waiverFlag_; }
      set {
        waiverFlag_ = value;
      }
    }

    /// <summary>Field number for the "mleg_base_sid" field.</summary>
    public const int MlegBaseSidFieldNumber = 66;
    private string mlegBaseSid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MlegBaseSid {
      get { return mlegBaseSid_; }
      set {
        mlegBaseSid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side_qualifier" field.</summary>
    public const int SideQualifierFieldNumber = 67;
    private int sideQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SideQualifier {
      get { return sideQualifier_; }
      set {
        sideQualifier_ = value;
      }
    }

    /// <summary>Field number for the "otc_post_trade_indicator" field.</summary>
    public const int OtcPostTradeIndicatorFieldNumber = 68;
    private int otcPostTradeIndicator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtcPostTradeIndicator {
      get { return otcPostTradeIndicator_; }
      set {
        otcPostTradeIndicator_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 69;
    private int capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "cross_rate" field.</summary>
    public const int CrossRateFieldNumber = 70;
    private string crossRate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CrossRate {
      get { return crossRate_; }
      set {
        crossRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeNum != other.TradeNum) return false;
      if (OrderNum != other.OrderNum) return false;
      if (Brokerref != other.Brokerref) return false;
      if (Userid != other.Userid) return false;
      if (Firmid != other.Firmid) return false;
      if (CanceledUid != other.CanceledUid) return false;
      if (Account != other.Account) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Value != other.Value) return false;
      if (Accruedint != other.Accruedint) return false;
      if (Yield != other.Yield) return false;
      if (Settlecode != other.Settlecode) return false;
      if (Cpfirmid != other.Cpfirmid) return false;
      if (Flags != other.Flags) return false;
      if (Price2 != other.Price2) return false;
      if (Reporate != other.Reporate) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Accrued2 != other.Accrued2) return false;
      if (Repoterm != other.Repoterm) return false;
      if (Repovalue != other.Repovalue) return false;
      if (Repo2Value != other.Repo2Value) return false;
      if (StartDiscount != other.StartDiscount) return false;
      if (LowerDiscount != other.LowerDiscount) return false;
      if (UpperDiscount != other.UpperDiscount) return false;
      if (BlockSecurities != other.BlockSecurities) return false;
      if (ClearingComission != other.ClearingComission) return false;
      if (ExchangeComission != other.ExchangeComission) return false;
      if (TechCenterComission != other.TechCenterComission) return false;
      if (SettleDate != other.SettleDate) return false;
      if (SettleCurrency != other.SettleCurrency) return false;
      if (TradeCurrency != other.TradeCurrency) return false;
      if (ExchangeCode != other.ExchangeCode) return false;
      if (StationId != other.StationId) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (BankAccId != other.BankAccId) return false;
      if (BrokerComission != other.BrokerComission) return false;
      if (LinkedTrade != other.LinkedTrade) return false;
      if (Period != other.Period) return false;
      if (TransId != other.TransId) return false;
      if (Kind != other.Kind) return false;
      if (ClearingBankAccid != other.ClearingBankAccid) return false;
      if (!object.Equals(CanceledDatetime, other.CanceledDatetime)) return false;
      if (ClearingFirmid != other.ClearingFirmid) return false;
      if (SystemRef != other.SystemRef) return false;
      if (Uid != other.Uid) return false;
      if (Lseccode != other.Lseccode) return false;
      if (OrderRevisionNumber != other.OrderRevisionNumber) return false;
      if (OrderQty != other.OrderQty) return false;
      if (OrderPrice != other.OrderPrice) return false;
      if (OrderExchangeCode != other.OrderExchangeCode) return false;
      if (ExecMarket != other.ExecMarket) return false;
      if (LiquidityIndicator != other.LiquidityIndicator) return false;
      if (Extref != other.Extref) return false;
      if (ExtTradeFlags != other.ExtTradeFlags) return false;
      if (OnBehalfOfUid != other.OnBehalfOfUid) return false;
      if (ClientQualifier != other.ClientQualifier) return false;
      if (ClientShortCode != other.ClientShortCode) return false;
      if (InvestmentDecisionMakerQualifier != other.InvestmentDecisionMakerQualifier) return false;
      if (InvestmentDecisionMakerShortCode != other.InvestmentDecisionMakerShortCode) return false;
      if (ExecutingTraderQualifier != other.ExecutingTraderQualifier) return false;
      if (ExecutingTraderShortCode != other.ExecutingTraderShortCode) return false;
      if (WaiverFlag != other.WaiverFlag) return false;
      if (MlegBaseSid != other.MlegBaseSid) return false;
      if (SideQualifier != other.SideQualifier) return false;
      if (OtcPostTradeIndicator != other.OtcPostTradeIndicator) return false;
      if (Capacity != other.Capacity) return false;
      if (CrossRate != other.CrossRate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeNum != 0L) hash ^= TradeNum.GetHashCode();
      if (OrderNum != 0L) hash ^= OrderNum.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (CanceledUid.Length != 0) hash ^= CanceledUid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (Yield.Length != 0) hash ^= Yield.GetHashCode();
      if (Settlecode.Length != 0) hash ^= Settlecode.GetHashCode();
      if (Cpfirmid.Length != 0) hash ^= Cpfirmid.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Price2.Length != 0) hash ^= Price2.GetHashCode();
      if (Reporate.Length != 0) hash ^= Reporate.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Accrued2.Length != 0) hash ^= Accrued2.GetHashCode();
      if (Repoterm.Length != 0) hash ^= Repoterm.GetHashCode();
      if (Repovalue.Length != 0) hash ^= Repovalue.GetHashCode();
      if (Repo2Value.Length != 0) hash ^= Repo2Value.GetHashCode();
      if (StartDiscount.Length != 0) hash ^= StartDiscount.GetHashCode();
      if (LowerDiscount.Length != 0) hash ^= LowerDiscount.GetHashCode();
      if (UpperDiscount.Length != 0) hash ^= UpperDiscount.GetHashCode();
      if (BlockSecurities.Length != 0) hash ^= BlockSecurities.GetHashCode();
      if (ClearingComission.Length != 0) hash ^= ClearingComission.GetHashCode();
      if (ExchangeComission.Length != 0) hash ^= ExchangeComission.GetHashCode();
      if (TechCenterComission.Length != 0) hash ^= TechCenterComission.GetHashCode();
      if (SettleDate.Length != 0) hash ^= SettleDate.GetHashCode();
      if (SettleCurrency.Length != 0) hash ^= SettleCurrency.GetHashCode();
      if (TradeCurrency.Length != 0) hash ^= TradeCurrency.GetHashCode();
      if (ExchangeCode.Length != 0) hash ^= ExchangeCode.GetHashCode();
      if (StationId.Length != 0) hash ^= StationId.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (datetime_ != null) hash ^= Datetime.GetHashCode();
      if (BankAccId.Length != 0) hash ^= BankAccId.GetHashCode();
      if (BrokerComission.Length != 0) hash ^= BrokerComission.GetHashCode();
      if (LinkedTrade.Length != 0) hash ^= LinkedTrade.GetHashCode();
      if (Period != 0) hash ^= Period.GetHashCode();
      if (TransId.Length != 0) hash ^= TransId.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (ClearingBankAccid.Length != 0) hash ^= ClearingBankAccid.GetHashCode();
      if (canceledDatetime_ != null) hash ^= CanceledDatetime.GetHashCode();
      if (ClearingFirmid.Length != 0) hash ^= ClearingFirmid.GetHashCode();
      if (SystemRef.Length != 0) hash ^= SystemRef.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Lseccode.Length != 0) hash ^= Lseccode.GetHashCode();
      if (OrderRevisionNumber.Length != 0) hash ^= OrderRevisionNumber.GetHashCode();
      if (OrderQty.Length != 0) hash ^= OrderQty.GetHashCode();
      if (OrderPrice.Length != 0) hash ^= OrderPrice.GetHashCode();
      if (OrderExchangeCode.Length != 0) hash ^= OrderExchangeCode.GetHashCode();
      if (ExecMarket.Length != 0) hash ^= ExecMarket.GetHashCode();
      if (LiquidityIndicator != 0) hash ^= LiquidityIndicator.GetHashCode();
      if (Extref.Length != 0) hash ^= Extref.GetHashCode();
      if (ExtTradeFlags.Length != 0) hash ^= ExtTradeFlags.GetHashCode();
      if (OnBehalfOfUid.Length != 0) hash ^= OnBehalfOfUid.GetHashCode();
      if (ClientQualifier != 0) hash ^= ClientQualifier.GetHashCode();
      if (ClientShortCode.Length != 0) hash ^= ClientShortCode.GetHashCode();
      if (InvestmentDecisionMakerQualifier != 0) hash ^= InvestmentDecisionMakerQualifier.GetHashCode();
      if (InvestmentDecisionMakerShortCode.Length != 0) hash ^= InvestmentDecisionMakerShortCode.GetHashCode();
      if (ExecutingTraderQualifier != 0) hash ^= ExecutingTraderQualifier.GetHashCode();
      if (ExecutingTraderShortCode.Length != 0) hash ^= ExecutingTraderShortCode.GetHashCode();
      if (WaiverFlag != 0) hash ^= WaiverFlag.GetHashCode();
      if (MlegBaseSid.Length != 0) hash ^= MlegBaseSid.GetHashCode();
      if (SideQualifier != 0) hash ^= SideQualifier.GetHashCode();
      if (OtcPostTradeIndicator != 0) hash ^= OtcPostTradeIndicator.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (CrossRate.Length != 0) hash ^= CrossRate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (OrderNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OrderNum);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CanceledUid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Yield);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Cpfirmid);
      }
      if (Flags != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Flags);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Price2);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Reporate);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClientCode);
      }
      if (Accrued2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Accrued2);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Repoterm);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Repo2Value);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BlockSecurities);
      }
      if (ClearingComission.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ClearingComission);
      }
      if (ExchangeComission.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ExchangeComission);
      }
      if (TechCenterComission.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(TechCenterComission);
      }
      if (SettleDate.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SettleDate);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(SettleCurrency);
      }
      if (TradeCurrency.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(TradeCurrency);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ExchangeCode);
      }
      if (StationId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StationId);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Datetime);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(BankAccId);
      }
      if (BrokerComission.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(BrokerComission);
      }
      if (LinkedTrade.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(LinkedTrade);
      }
      if (Period != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(Period);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(TransId);
      }
      if (Kind != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Kind);
      }
      if (ClearingBankAccid.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ClearingBankAccid);
      }
      if (canceledDatetime_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CanceledDatetime);
      }
      if (ClearingFirmid.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(ClearingFirmid);
      }
      if (SystemRef.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(SystemRef);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Uid);
      }
      if (Lseccode.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Lseccode);
      }
      if (OrderRevisionNumber.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(OrderRevisionNumber);
      }
      if (OrderQty.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(OrderQty);
      }
      if (OrderPrice.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(OrderPrice);
      }
      if (OrderExchangeCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(OrderExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ExecMarket);
      }
      if (LiquidityIndicator != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(LiquidityIndicator);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Extref);
      }
      if (ExtTradeFlags.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(ExtTradeFlags);
      }
      if (OnBehalfOfUid.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (WaiverFlag != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(WaiverFlag);
      }
      if (MlegBaseSid.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(MlegBaseSid);
      }
      if (SideQualifier != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(SideQualifier);
      }
      if (OtcPostTradeIndicator != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(OtcPostTradeIndicator);
      }
      if (Capacity != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Capacity);
      }
      if (CrossRate.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(CrossRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (OrderNum != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OrderNum);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CanceledUid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Yield);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Cpfirmid);
      }
      if (Flags != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Flags);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Price2);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Reporate);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ClientCode);
      }
      if (Accrued2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Accrued2);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Repoterm);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Repo2Value);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(BlockSecurities);
      }
      if (ClearingComission.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ClearingComission);
      }
      if (ExchangeComission.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ExchangeComission);
      }
      if (TechCenterComission.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(TechCenterComission);
      }
      if (SettleDate.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SettleDate);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(SettleCurrency);
      }
      if (TradeCurrency.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(TradeCurrency);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ExchangeCode);
      }
      if (StationId.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(StationId);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(Datetime);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(BankAccId);
      }
      if (BrokerComission.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(BrokerComission);
      }
      if (LinkedTrade.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(LinkedTrade);
      }
      if (Period != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(Period);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(TransId);
      }
      if (Kind != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Kind);
      }
      if (ClearingBankAccid.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ClearingBankAccid);
      }
      if (canceledDatetime_ != null) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(CanceledDatetime);
      }
      if (ClearingFirmid.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(ClearingFirmid);
      }
      if (SystemRef.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(SystemRef);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Uid);
      }
      if (Lseccode.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Lseccode);
      }
      if (OrderRevisionNumber.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(OrderRevisionNumber);
      }
      if (OrderQty.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(OrderQty);
      }
      if (OrderPrice.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(OrderPrice);
      }
      if (OrderExchangeCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(OrderExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ExecMarket);
      }
      if (LiquidityIndicator != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(LiquidityIndicator);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Extref);
      }
      if (ExtTradeFlags.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(ExtTradeFlags);
      }
      if (OnBehalfOfUid.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (WaiverFlag != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(WaiverFlag);
      }
      if (MlegBaseSid.Length != 0) {
        output.WriteRawTag(146, 4);
        output.WriteString(MlegBaseSid);
      }
      if (SideQualifier != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(SideQualifier);
      }
      if (OtcPostTradeIndicator != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(OtcPostTradeIndicator);
      }
      if (Capacity != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(Capacity);
      }
      if (CrossRate.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(CrossRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TradeNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TradeNum);
      }
      if (OrderNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderNum);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (CanceledUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CanceledUid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Accruedint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (Yield.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yield);
      }
      if (Settlecode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Settlecode);
      }
      if (Cpfirmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpfirmid);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Price2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price2);
      }
      if (Reporate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Reporate);
      }
      if (ClientCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Accrued2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accrued2);
      }
      if (Repoterm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repoterm);
      }
      if (Repovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repo2Value);
      }
      if (StartDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BlockSecurities);
      }
      if (ClearingComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingComission);
      }
      if (ExchangeComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeComission);
      }
      if (TechCenterComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TechCenterComission);
      }
      if (SettleDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleDate);
      }
      if (SettleCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleCurrency);
      }
      if (TradeCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TradeCurrency);
      }
      if (ExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeCode);
      }
      if (StationId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StationId);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (datetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (BankAccId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BankAccId);
      }
      if (BrokerComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BrokerComission);
      }
      if (LinkedTrade.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LinkedTrade);
      }
      if (Period != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Period);
      }
      if (TransId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TransId);
      }
      if (Kind != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Kind);
      }
      if (ClearingBankAccid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingBankAccid);
      }
      if (canceledDatetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CanceledDatetime);
      }
      if (ClearingFirmid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClearingFirmid);
      }
      if (SystemRef.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SystemRef);
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Lseccode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lseccode);
      }
      if (OrderRevisionNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderRevisionNumber);
      }
      if (OrderQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderQty);
      }
      if (OrderPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderPrice);
      }
      if (OrderExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderExchangeCode);
      }
      if (ExecMarket.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecMarket);
      }
      if (LiquidityIndicator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LiquidityIndicator);
      }
      if (Extref.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Extref);
      }
      if (ExtTradeFlags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtTradeFlags);
      }
      if (OnBehalfOfUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutingTraderShortCode);
      }
      if (WaiverFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WaiverFlag);
      }
      if (MlegBaseSid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MlegBaseSid);
      }
      if (SideQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SideQualifier);
      }
      if (OtcPostTradeIndicator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtcPostTradeIndicator);
      }
      if (Capacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (CrossRate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CrossRate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trade other) {
      if (other == null) {
        return;
      }
      if (other.TradeNum != 0L) {
        TradeNum = other.TradeNum;
      }
      if (other.OrderNum != 0L) {
        OrderNum = other.OrderNum;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.CanceledUid.Length != 0) {
        CanceledUid = other.CanceledUid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.Yield.Length != 0) {
        Yield = other.Yield;
      }
      if (other.Settlecode.Length != 0) {
        Settlecode = other.Settlecode;
      }
      if (other.Cpfirmid.Length != 0) {
        Cpfirmid = other.Cpfirmid;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Price2.Length != 0) {
        Price2 = other.Price2;
      }
      if (other.Reporate.Length != 0) {
        Reporate = other.Reporate;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Accrued2.Length != 0) {
        Accrued2 = other.Accrued2;
      }
      if (other.Repoterm.Length != 0) {
        Repoterm = other.Repoterm;
      }
      if (other.Repovalue.Length != 0) {
        Repovalue = other.Repovalue;
      }
      if (other.Repo2Value.Length != 0) {
        Repo2Value = other.Repo2Value;
      }
      if (other.StartDiscount.Length != 0) {
        StartDiscount = other.StartDiscount;
      }
      if (other.LowerDiscount.Length != 0) {
        LowerDiscount = other.LowerDiscount;
      }
      if (other.UpperDiscount.Length != 0) {
        UpperDiscount = other.UpperDiscount;
      }
      if (other.BlockSecurities.Length != 0) {
        BlockSecurities = other.BlockSecurities;
      }
      if (other.ClearingComission.Length != 0) {
        ClearingComission = other.ClearingComission;
      }
      if (other.ExchangeComission.Length != 0) {
        ExchangeComission = other.ExchangeComission;
      }
      if (other.TechCenterComission.Length != 0) {
        TechCenterComission = other.TechCenterComission;
      }
      if (other.SettleDate.Length != 0) {
        SettleDate = other.SettleDate;
      }
      if (other.SettleCurrency.Length != 0) {
        SettleCurrency = other.SettleCurrency;
      }
      if (other.TradeCurrency.Length != 0) {
        TradeCurrency = other.TradeCurrency;
      }
      if (other.ExchangeCode.Length != 0) {
        ExchangeCode = other.ExchangeCode;
      }
      if (other.StationId.Length != 0) {
        StationId = other.StationId;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.datetime_ != null) {
        if (datetime_ == null) {
          Datetime = new global::Qlua.Structs.DateTimeEntry();
        }
        Datetime.MergeFrom(other.Datetime);
      }
      if (other.BankAccId.Length != 0) {
        BankAccId = other.BankAccId;
      }
      if (other.BrokerComission.Length != 0) {
        BrokerComission = other.BrokerComission;
      }
      if (other.LinkedTrade.Length != 0) {
        LinkedTrade = other.LinkedTrade;
      }
      if (other.Period != 0) {
        Period = other.Period;
      }
      if (other.TransId.Length != 0) {
        TransId = other.TransId;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.ClearingBankAccid.Length != 0) {
        ClearingBankAccid = other.ClearingBankAccid;
      }
      if (other.canceledDatetime_ != null) {
        if (canceledDatetime_ == null) {
          CanceledDatetime = new global::Qlua.Structs.DateTimeEntry();
        }
        CanceledDatetime.MergeFrom(other.CanceledDatetime);
      }
      if (other.ClearingFirmid.Length != 0) {
        ClearingFirmid = other.ClearingFirmid;
      }
      if (other.SystemRef.Length != 0) {
        SystemRef = other.SystemRef;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Lseccode.Length != 0) {
        Lseccode = other.Lseccode;
      }
      if (other.OrderRevisionNumber.Length != 0) {
        OrderRevisionNumber = other.OrderRevisionNumber;
      }
      if (other.OrderQty.Length != 0) {
        OrderQty = other.OrderQty;
      }
      if (other.OrderPrice.Length != 0) {
        OrderPrice = other.OrderPrice;
      }
      if (other.OrderExchangeCode.Length != 0) {
        OrderExchangeCode = other.OrderExchangeCode;
      }
      if (other.ExecMarket.Length != 0) {
        ExecMarket = other.ExecMarket;
      }
      if (other.LiquidityIndicator != 0) {
        LiquidityIndicator = other.LiquidityIndicator;
      }
      if (other.Extref.Length != 0) {
        Extref = other.Extref;
      }
      if (other.ExtTradeFlags.Length != 0) {
        ExtTradeFlags = other.ExtTradeFlags;
      }
      if (other.OnBehalfOfUid.Length != 0) {
        OnBehalfOfUid = other.OnBehalfOfUid;
      }
      if (other.ClientQualifier != 0) {
        ClientQualifier = other.ClientQualifier;
      }
      if (other.ClientShortCode.Length != 0) {
        ClientShortCode = other.ClientShortCode;
      }
      if (other.InvestmentDecisionMakerQualifier != 0) {
        InvestmentDecisionMakerQualifier = other.InvestmentDecisionMakerQualifier;
      }
      if (other.InvestmentDecisionMakerShortCode.Length != 0) {
        InvestmentDecisionMakerShortCode = other.InvestmentDecisionMakerShortCode;
      }
      if (other.ExecutingTraderQualifier != 0) {
        ExecutingTraderQualifier = other.ExecutingTraderQualifier;
      }
      if (other.ExecutingTraderShortCode.Length != 0) {
        ExecutingTraderShortCode = other.ExecutingTraderShortCode;
      }
      if (other.WaiverFlag != 0) {
        WaiverFlag = other.WaiverFlag;
      }
      if (other.MlegBaseSid.Length != 0) {
        MlegBaseSid = other.MlegBaseSid;
      }
      if (other.SideQualifier != 0) {
        SideQualifier = other.SideQualifier;
      }
      if (other.OtcPostTradeIndicator != 0) {
        OtcPostTradeIndicator = other.OtcPostTradeIndicator;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.CrossRate.Length != 0) {
        CrossRate = other.CrossRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 16: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 26: {
            Brokerref = input.ReadString();
            break;
          }
          case 34: {
            Userid = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            CanceledUid = input.ReadString();
            break;
          }
          case 58: {
            Account = input.ReadString();
            break;
          }
          case 66: {
            Price = input.ReadString();
            break;
          }
          case 72: {
            Qty = input.ReadInt32();
            break;
          }
          case 82: {
            Value = input.ReadString();
            break;
          }
          case 90: {
            Accruedint = input.ReadString();
            break;
          }
          case 98: {
            Yield = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 120: {
            Flags = input.ReadInt32();
            break;
          }
          case 130: {
            Price2 = input.ReadString();
            break;
          }
          case 138: {
            Reporate = input.ReadString();
            break;
          }
          case 146: {
            ClientCode = input.ReadString();
            break;
          }
          case 154: {
            Accrued2 = input.ReadString();
            break;
          }
          case 162: {
            Repoterm = input.ReadString();
            break;
          }
          case 170: {
            Repovalue = input.ReadString();
            break;
          }
          case 178: {
            Repo2Value = input.ReadString();
            break;
          }
          case 186: {
            StartDiscount = input.ReadString();
            break;
          }
          case 194: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 202: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 210: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 218: {
            ClearingComission = input.ReadString();
            break;
          }
          case 226: {
            ExchangeComission = input.ReadString();
            break;
          }
          case 234: {
            TechCenterComission = input.ReadString();
            break;
          }
          case 242: {
            SettleDate = input.ReadString();
            break;
          }
          case 250: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 258: {
            TradeCurrency = input.ReadString();
            break;
          }
          case 266: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 274: {
            StationId = input.ReadString();
            break;
          }
          case 282: {
            SecCode = input.ReadString();
            break;
          }
          case 290: {
            ClassCode = input.ReadString();
            break;
          }
          case 298: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 306: {
            BankAccId = input.ReadString();
            break;
          }
          case 314: {
            BrokerComission = input.ReadString();
            break;
          }
          case 322: {
            LinkedTrade = input.ReadString();
            break;
          }
          case 328: {
            Period = input.ReadInt32();
            break;
          }
          case 338: {
            TransId = input.ReadString();
            break;
          }
          case 344: {
            Kind = input.ReadInt32();
            break;
          }
          case 354: {
            ClearingBankAccid = input.ReadString();
            break;
          }
          case 362: {
            if (canceledDatetime_ == null) {
              CanceledDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(CanceledDatetime);
            break;
          }
          case 370: {
            ClearingFirmid = input.ReadString();
            break;
          }
          case 378: {
            SystemRef = input.ReadString();
            break;
          }
          case 386: {
            Uid = input.ReadString();
            break;
          }
          case 394: {
            Lseccode = input.ReadString();
            break;
          }
          case 402: {
            OrderRevisionNumber = input.ReadString();
            break;
          }
          case 410: {
            OrderQty = input.ReadString();
            break;
          }
          case 418: {
            OrderPrice = input.ReadString();
            break;
          }
          case 426: {
            OrderExchangeCode = input.ReadString();
            break;
          }
          case 434: {
            ExecMarket = input.ReadString();
            break;
          }
          case 440: {
            LiquidityIndicator = input.ReadInt32();
            break;
          }
          case 450: {
            Extref = input.ReadString();
            break;
          }
          case 458: {
            ExtTradeFlags = input.ReadString();
            break;
          }
          case 466: {
            OnBehalfOfUid = input.ReadString();
            break;
          }
          case 472: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 482: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 488: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 498: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 504: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 514: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
          case 520: {
            WaiverFlag = input.ReadInt32();
            break;
          }
          case 530: {
            MlegBaseSid = input.ReadString();
            break;
          }
          case 536: {
            SideQualifier = input.ReadInt32();
            break;
          }
          case 544: {
            OtcPostTradeIndicator = input.ReadInt32();
            break;
          }
          case 552: {
            Capacity = input.ReadInt32();
            break;
          }
          case 562: {
            CrossRate = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 16: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 26: {
            Brokerref = input.ReadString();
            break;
          }
          case 34: {
            Userid = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            CanceledUid = input.ReadString();
            break;
          }
          case 58: {
            Account = input.ReadString();
            break;
          }
          case 66: {
            Price = input.ReadString();
            break;
          }
          case 72: {
            Qty = input.ReadInt32();
            break;
          }
          case 82: {
            Value = input.ReadString();
            break;
          }
          case 90: {
            Accruedint = input.ReadString();
            break;
          }
          case 98: {
            Yield = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 120: {
            Flags = input.ReadInt32();
            break;
          }
          case 130: {
            Price2 = input.ReadString();
            break;
          }
          case 138: {
            Reporate = input.ReadString();
            break;
          }
          case 146: {
            ClientCode = input.ReadString();
            break;
          }
          case 154: {
            Accrued2 = input.ReadString();
            break;
          }
          case 162: {
            Repoterm = input.ReadString();
            break;
          }
          case 170: {
            Repovalue = input.ReadString();
            break;
          }
          case 178: {
            Repo2Value = input.ReadString();
            break;
          }
          case 186: {
            StartDiscount = input.ReadString();
            break;
          }
          case 194: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 202: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 210: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 218: {
            ClearingComission = input.ReadString();
            break;
          }
          case 226: {
            ExchangeComission = input.ReadString();
            break;
          }
          case 234: {
            TechCenterComission = input.ReadString();
            break;
          }
          case 242: {
            SettleDate = input.ReadString();
            break;
          }
          case 250: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 258: {
            TradeCurrency = input.ReadString();
            break;
          }
          case 266: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 274: {
            StationId = input.ReadString();
            break;
          }
          case 282: {
            SecCode = input.ReadString();
            break;
          }
          case 290: {
            ClassCode = input.ReadString();
            break;
          }
          case 298: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 306: {
            BankAccId = input.ReadString();
            break;
          }
          case 314: {
            BrokerComission = input.ReadString();
            break;
          }
          case 322: {
            LinkedTrade = input.ReadString();
            break;
          }
          case 328: {
            Period = input.ReadInt32();
            break;
          }
          case 338: {
            TransId = input.ReadString();
            break;
          }
          case 344: {
            Kind = input.ReadInt32();
            break;
          }
          case 354: {
            ClearingBankAccid = input.ReadString();
            break;
          }
          case 362: {
            if (canceledDatetime_ == null) {
              CanceledDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(CanceledDatetime);
            break;
          }
          case 370: {
            ClearingFirmid = input.ReadString();
            break;
          }
          case 378: {
            SystemRef = input.ReadString();
            break;
          }
          case 386: {
            Uid = input.ReadString();
            break;
          }
          case 394: {
            Lseccode = input.ReadString();
            break;
          }
          case 402: {
            OrderRevisionNumber = input.ReadString();
            break;
          }
          case 410: {
            OrderQty = input.ReadString();
            break;
          }
          case 418: {
            OrderPrice = input.ReadString();
            break;
          }
          case 426: {
            OrderExchangeCode = input.ReadString();
            break;
          }
          case 434: {
            ExecMarket = input.ReadString();
            break;
          }
          case 440: {
            LiquidityIndicator = input.ReadInt32();
            break;
          }
          case 450: {
            Extref = input.ReadString();
            break;
          }
          case 458: {
            ExtTradeFlags = input.ReadString();
            break;
          }
          case 466: {
            OnBehalfOfUid = input.ReadString();
            break;
          }
          case 472: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 482: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 488: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 498: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 504: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 514: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
          case 520: {
            WaiverFlag = input.ReadInt32();
            break;
          }
          case 530: {
            MlegBaseSid = input.ReadString();
            break;
          }
          case 536: {
            SideQualifier = input.ReadInt32();
            break;
          }
          case 544: {
            OtcPostTradeIndicator = input.ReadInt32();
            break;
          }
          case 552: {
            Capacity = input.ReadInt32();
            break;
          }
          case 562: {
            CrossRate = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Заявки
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Order : pb::IMessage<Order>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order(Order other) : this() {
      orderNum_ = other.orderNum_;
      flags_ = other.flags_;
      brokerref_ = other.brokerref_;
      userid_ = other.userid_;
      firmid_ = other.firmid_;
      account_ = other.account_;
      price_ = other.price_;
      qty_ = other.qty_;
      balance_ = other.balance_;
      value_ = other.value_;
      accruedint_ = other.accruedint_;
      yield_ = other.yield_;
      transId_ = other.transId_;
      clientCode_ = other.clientCode_;
      price2_ = other.price2_;
      settlecode_ = other.settlecode_;
      uid_ = other.uid_;
      canceledUid_ = other.canceledUid_;
      exchangeCode_ = other.exchangeCode_;
      activationTime_ = other.activationTime_;
      linkedorder_ = other.linkedorder_;
      expiry_ = other.expiry_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
      withdrawDatetime_ = other.withdrawDatetime_ != null ? other.withdrawDatetime_.Clone() : null;
      bankAccId_ = other.bankAccId_;
      valueEntryType_ = other.valueEntryType_;
      repoterm_ = other.repoterm_;
      repovalue_ = other.repovalue_;
      repo2Value_ = other.repo2Value_;
      repoValueBalance_ = other.repoValueBalance_;
      startDiscount_ = other.startDiscount_;
      rejectReason_ = other.rejectReason_;
      extOrderFlags_ = other.extOrderFlags_;
      minQty_ = other.minQty_;
      execType_ = other.execType_;
      sideQualifier_ = other.sideQualifier_;
      acntType_ = other.acntType_;
      capacity_ = other.capacity_;
      passiveOnlyOrder_ = other.passiveOnlyOrder_;
      visible_ = other.visible_;
      awgPrice_ = other.awgPrice_;
      expiryTime_ = other.expiryTime_;
      revisionNumber_ = other.revisionNumber_;
      priceCurrency_ = other.priceCurrency_;
      extOrderStatus_ = other.extOrderStatus_;
      acceptedUid_ = other.acceptedUid_;
      filledValue_ = other.filledValue_;
      extref_ = other.extref_;
      settleCurrency_ = other.settleCurrency_;
      onBehalfOfUid_ = other.onBehalfOfUid_;
      clientQualifier_ = other.clientQualifier_;
      clientShortCode_ = other.clientShortCode_;
      investmentDecisionMakerQualifier_ = other.investmentDecisionMakerQualifier_;
      investmentDecisionMakerShortCode_ = other.investmentDecisionMakerShortCode_;
      executingTraderQualifier_ = other.executingTraderQualifier_;
      executingTraderShortCode_ = other.executingTraderShortCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order Clone() {
      return new Order(this);
    }

    /// <summary>Field number for the "order_num" field.</summary>
    public const int OrderNumFieldNumber = 1;
    private long orderNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 2;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 3;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 4;
    private string userid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 5;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 8;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 9;
    private string balance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 10;
    private string value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 11;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 12;
    private string yield_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Yield {
      get { return yield_; }
      set {
        yield_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 13;
    private string transId_ = "";
    /// <summary>
    /// NUMBER in QLUA; if not nullable then it should be of type long
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransId {
      get { return transId_; }
      set {
        transId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 14;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price2" field.</summary>
    public const int Price2FieldNumber = 15;
    private string price2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price2 {
      get { return price2_; }
      set {
        price2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlecode" field.</summary>
    public const int SettlecodeFieldNumber = 16;
    private string settlecode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlecode {
      get { return settlecode_; }
      set {
        settlecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 17;
    private string uid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canceled_uid" field.</summary>
    public const int CanceledUidFieldNumber = 18;
    private string canceledUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CanceledUid {
      get { return canceledUid_; }
      set {
        canceledUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_code" field.</summary>
    public const int ExchangeCodeFieldNumber = 19;
    private string exchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeCode {
      get { return exchangeCode_; }
      set {
        exchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activation_time" field.</summary>
    public const int ActivationTimeFieldNumber = 20;
    private string activationTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActivationTime {
      get { return activationTime_; }
      set {
        activationTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "linkedorder" field.</summary>
    public const int LinkedorderFieldNumber = 21;
    private string linkedorder_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Linkedorder {
      get { return linkedorder_; }
      set {
        linkedorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 22;
    private string expiry_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Expiry {
      get { return expiry_; }
      set {
        expiry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 23;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 24;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 25;
    private global::Qlua.Structs.DateTimeEntry datetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_datetime" field.</summary>
    public const int WithdrawDatetimeFieldNumber = 26;
    private global::Qlua.Structs.DateTimeEntry withdrawDatetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry WithdrawDatetime {
      get { return withdrawDatetime_; }
      set {
        withdrawDatetime_ = value;
      }
    }

    /// <summary>Field number for the "bank_acc_id" field.</summary>
    public const int BankAccIdFieldNumber = 27;
    private string bankAccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BankAccId {
      get { return bankAccId_; }
      set {
        bankAccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value_entry_type" field.</summary>
    public const int ValueEntryTypeFieldNumber = 28;
    private int valueEntryType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ValueEntryType {
      get { return valueEntryType_; }
      set {
        valueEntryType_ = value;
      }
    }

    /// <summary>Field number for the "repoterm" field.</summary>
    public const int RepotermFieldNumber = 29;
    private string repoterm_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repoterm {
      get { return repoterm_; }
      set {
        repoterm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repovalue" field.</summary>
    public const int RepovalueFieldNumber = 30;
    private string repovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repovalue {
      get { return repovalue_; }
      set {
        repovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo2value" field.</summary>
    public const int Repo2ValueFieldNumber = 31;
    private string repo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repo2Value {
      get { return repo2Value_; }
      set {
        repo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo_value_balance" field.</summary>
    public const int RepoValueBalanceFieldNumber = 32;
    private string repoValueBalance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RepoValueBalance {
      get { return repoValueBalance_; }
      set {
        repoValueBalance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_discount" field.</summary>
    public const int StartDiscountFieldNumber = 33;
    private string startDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDiscount {
      get { return startDiscount_; }
      set {
        startDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reject_reason" field.</summary>
    public const int RejectReasonFieldNumber = 34;
    private string rejectReason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RejectReason {
      get { return rejectReason_; }
      set {
        rejectReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext_order_flags" field.</summary>
    public const int ExtOrderFlagsFieldNumber = 35;
    private string extOrderFlags_ = "";
    /// <summary>
    /// NUMBER in QLUA; not documented as non-nilable, so it should be string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtOrderFlags {
      get { return extOrderFlags_; }
      set {
        extOrderFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_qty" field.</summary>
    public const int MinQtyFieldNumber = 36;
    private int minQty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinQty {
      get { return minQty_; }
      set {
        minQty_ = value;
      }
    }

    /// <summary>Field number for the "exec_type" field.</summary>
    public const int ExecTypeFieldNumber = 37;
    private int execType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExecType {
      get { return execType_; }
      set {
        execType_ = value;
      }
    }

    /// <summary>Field number for the "side_qualifier" field.</summary>
    public const int SideQualifierFieldNumber = 38;
    private int sideQualifier_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SideQualifier {
      get { return sideQualifier_; }
      set {
        sideQualifier_ = value;
      }
    }

    /// <summary>Field number for the "acnt_type" field.</summary>
    public const int AcntTypeFieldNumber = 39;
    private int acntType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AcntType {
      get { return acntType_; }
      set {
        acntType_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 40;
    private int capacity_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "passive_only_order" field.</summary>
    public const int PassiveOnlyOrderFieldNumber = 41;
    private int passiveOnlyOrder_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PassiveOnlyOrder {
      get { return passiveOnlyOrder_; }
      set {
        passiveOnlyOrder_ = value;
      }
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 42;
    private int visible_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "awg_price" field.</summary>
    public const int AwgPriceFieldNumber = 43;
    private string awgPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AwgPrice {
      get { return awgPrice_; }
      set {
        awgPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 44;
    private string expiryTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision_number" field.</summary>
    public const int RevisionNumberFieldNumber = 45;
    private string revisionNumber_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RevisionNumber {
      get { return revisionNumber_; }
      set {
        revisionNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price_currency" field.</summary>
    public const int PriceCurrencyFieldNumber = 46;
    private string priceCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriceCurrency {
      get { return priceCurrency_; }
      set {
        priceCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ext_order_status" field.</summary>
    public const int ExtOrderStatusFieldNumber = 47;
    private int extOrderStatus_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExtOrderStatus {
      get { return extOrderStatus_; }
      set {
        extOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "accepted_uid" field.</summary>
    public const int AcceptedUidFieldNumber = 48;
    private string acceptedUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AcceptedUid {
      get { return acceptedUid_; }
      set {
        acceptedUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filled_value" field.</summary>
    public const int FilledValueFieldNumber = 49;
    private string filledValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FilledValue {
      get { return filledValue_; }
      set {
        filledValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extref" field.</summary>
    public const int ExtrefFieldNumber = 50;
    private string extref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Extref {
      get { return extref_; }
      set {
        extref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_currency" field.</summary>
    public const int SettleCurrencyFieldNumber = 51;
    private string settleCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleCurrency {
      get { return settleCurrency_; }
      set {
        settleCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "on_behalf_of_uid" field.</summary>
    public const int OnBehalfOfUidFieldNumber = 52;
    private string onBehalfOfUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OnBehalfOfUid {
      get { return onBehalfOfUid_; }
      set {
        onBehalfOfUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_qualifier" field.</summary>
    public const int ClientQualifierFieldNumber = 53;
    private int clientQualifier_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientQualifier {
      get { return clientQualifier_; }
      set {
        clientQualifier_ = value;
      }
    }

    /// <summary>Field number for the "client_short_code" field.</summary>
    public const int ClientShortCodeFieldNumber = 54;
    private string clientShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientShortCode {
      get { return clientShortCode_; }
      set {
        clientShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investment_decision_maker_qualifier" field.</summary>
    public const int InvestmentDecisionMakerQualifierFieldNumber = 55;
    private int investmentDecisionMakerQualifier_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InvestmentDecisionMakerQualifier {
      get { return investmentDecisionMakerQualifier_; }
      set {
        investmentDecisionMakerQualifier_ = value;
      }
    }

    /// <summary>Field number for the "investment_decision_maker_short_code" field.</summary>
    public const int InvestmentDecisionMakerShortCodeFieldNumber = 56;
    private string investmentDecisionMakerShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InvestmentDecisionMakerShortCode {
      get { return investmentDecisionMakerShortCode_; }
      set {
        investmentDecisionMakerShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executing_trader_qualifier" field.</summary>
    public const int ExecutingTraderQualifierFieldNumber = 57;
    private int executingTraderQualifier_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExecutingTraderQualifier {
      get { return executingTraderQualifier_; }
      set {
        executingTraderQualifier_ = value;
      }
    }

    /// <summary>Field number for the "executing_trader_short_code" field.</summary>
    public const int ExecutingTraderShortCodeFieldNumber = 58;
    private string executingTraderShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutingTraderShortCode {
      get { return executingTraderShortCode_; }
      set {
        executingTraderShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Order other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderNum != other.OrderNum) return false;
      if (Flags != other.Flags) return false;
      if (Brokerref != other.Brokerref) return false;
      if (Userid != other.Userid) return false;
      if (Firmid != other.Firmid) return false;
      if (Account != other.Account) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Balance != other.Balance) return false;
      if (Value != other.Value) return false;
      if (Accruedint != other.Accruedint) return false;
      if (Yield != other.Yield) return false;
      if (TransId != other.TransId) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Price2 != other.Price2) return false;
      if (Settlecode != other.Settlecode) return false;
      if (Uid != other.Uid) return false;
      if (CanceledUid != other.CanceledUid) return false;
      if (ExchangeCode != other.ExchangeCode) return false;
      if (ActivationTime != other.ActivationTime) return false;
      if (Linkedorder != other.Linkedorder) return false;
      if (Expiry != other.Expiry) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (!object.Equals(WithdrawDatetime, other.WithdrawDatetime)) return false;
      if (BankAccId != other.BankAccId) return false;
      if (ValueEntryType != other.ValueEntryType) return false;
      if (Repoterm != other.Repoterm) return false;
      if (Repovalue != other.Repovalue) return false;
      if (Repo2Value != other.Repo2Value) return false;
      if (RepoValueBalance != other.RepoValueBalance) return false;
      if (StartDiscount != other.StartDiscount) return false;
      if (RejectReason != other.RejectReason) return false;
      if (ExtOrderFlags != other.ExtOrderFlags) return false;
      if (MinQty != other.MinQty) return false;
      if (ExecType != other.ExecType) return false;
      if (SideQualifier != other.SideQualifier) return false;
      if (AcntType != other.AcntType) return false;
      if (Capacity != other.Capacity) return false;
      if (PassiveOnlyOrder != other.PassiveOnlyOrder) return false;
      if (Visible != other.Visible) return false;
      if (AwgPrice != other.AwgPrice) return false;
      if (ExpiryTime != other.ExpiryTime) return false;
      if (RevisionNumber != other.RevisionNumber) return false;
      if (PriceCurrency != other.PriceCurrency) return false;
      if (ExtOrderStatus != other.ExtOrderStatus) return false;
      if (AcceptedUid != other.AcceptedUid) return false;
      if (FilledValue != other.FilledValue) return false;
      if (Extref != other.Extref) return false;
      if (SettleCurrency != other.SettleCurrency) return false;
      if (OnBehalfOfUid != other.OnBehalfOfUid) return false;
      if (ClientQualifier != other.ClientQualifier) return false;
      if (ClientShortCode != other.ClientShortCode) return false;
      if (InvestmentDecisionMakerQualifier != other.InvestmentDecisionMakerQualifier) return false;
      if (InvestmentDecisionMakerShortCode != other.InvestmentDecisionMakerShortCode) return false;
      if (ExecutingTraderQualifier != other.ExecutingTraderQualifier) return false;
      if (ExecutingTraderShortCode != other.ExecutingTraderShortCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderNum != 0L) hash ^= OrderNum.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (Yield.Length != 0) hash ^= Yield.GetHashCode();
      if (TransId.Length != 0) hash ^= TransId.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Price2.Length != 0) hash ^= Price2.GetHashCode();
      if (Settlecode.Length != 0) hash ^= Settlecode.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (CanceledUid.Length != 0) hash ^= CanceledUid.GetHashCode();
      if (ExchangeCode.Length != 0) hash ^= ExchangeCode.GetHashCode();
      if (ActivationTime.Length != 0) hash ^= ActivationTime.GetHashCode();
      if (Linkedorder.Length != 0) hash ^= Linkedorder.GetHashCode();
      if (Expiry.Length != 0) hash ^= Expiry.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (datetime_ != null) hash ^= Datetime.GetHashCode();
      if (withdrawDatetime_ != null) hash ^= WithdrawDatetime.GetHashCode();
      if (BankAccId.Length != 0) hash ^= BankAccId.GetHashCode();
      if (ValueEntryType != 0) hash ^= ValueEntryType.GetHashCode();
      if (Repoterm.Length != 0) hash ^= Repoterm.GetHashCode();
      if (Repovalue.Length != 0) hash ^= Repovalue.GetHashCode();
      if (Repo2Value.Length != 0) hash ^= Repo2Value.GetHashCode();
      if (RepoValueBalance.Length != 0) hash ^= RepoValueBalance.GetHashCode();
      if (StartDiscount.Length != 0) hash ^= StartDiscount.GetHashCode();
      if (RejectReason.Length != 0) hash ^= RejectReason.GetHashCode();
      if (ExtOrderFlags.Length != 0) hash ^= ExtOrderFlags.GetHashCode();
      if (MinQty != 0) hash ^= MinQty.GetHashCode();
      if (ExecType != 0) hash ^= ExecType.GetHashCode();
      if (SideQualifier != 0) hash ^= SideQualifier.GetHashCode();
      if (AcntType != 0) hash ^= AcntType.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (PassiveOnlyOrder != 0) hash ^= PassiveOnlyOrder.GetHashCode();
      if (Visible != 0) hash ^= Visible.GetHashCode();
      if (AwgPrice.Length != 0) hash ^= AwgPrice.GetHashCode();
      if (ExpiryTime.Length != 0) hash ^= ExpiryTime.GetHashCode();
      if (RevisionNumber.Length != 0) hash ^= RevisionNumber.GetHashCode();
      if (PriceCurrency.Length != 0) hash ^= PriceCurrency.GetHashCode();
      if (ExtOrderStatus != 0) hash ^= ExtOrderStatus.GetHashCode();
      if (AcceptedUid.Length != 0) hash ^= AcceptedUid.GetHashCode();
      if (FilledValue.Length != 0) hash ^= FilledValue.GetHashCode();
      if (Extref.Length != 0) hash ^= Extref.GetHashCode();
      if (SettleCurrency.Length != 0) hash ^= SettleCurrency.GetHashCode();
      if (OnBehalfOfUid.Length != 0) hash ^= OnBehalfOfUid.GetHashCode();
      if (ClientQualifier != 0) hash ^= ClientQualifier.GetHashCode();
      if (ClientShortCode.Length != 0) hash ^= ClientShortCode.GetHashCode();
      if (InvestmentDecisionMakerQualifier != 0) hash ^= InvestmentDecisionMakerQualifier.GetHashCode();
      if (InvestmentDecisionMakerShortCode.Length != 0) hash ^= InvestmentDecisionMakerShortCode.GetHashCode();
      if (ExecutingTraderQualifier != 0) hash ^= ExecutingTraderQualifier.GetHashCode();
      if (ExecutingTraderShortCode.Length != 0) hash ^= ExecutingTraderShortCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OrderNum);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Qty);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Balance);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Yield);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Price2);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Settlecode);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Uid);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CanceledUid);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeCode);
      }
      if (ActivationTime.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ActivationTime);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Linkedorder);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Expiry);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Datetime);
      }
      if (withdrawDatetime_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(WithdrawDatetime);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(BankAccId);
      }
      if (ValueEntryType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ValueEntryType);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Repoterm);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Repo2Value);
      }
      if (RepoValueBalance.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(RepoValueBalance);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(StartDiscount);
      }
      if (RejectReason.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(RejectReason);
      }
      if (ExtOrderFlags.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(ExtOrderFlags);
      }
      if (MinQty != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(MinQty);
      }
      if (ExecType != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ExecType);
      }
      if (SideQualifier != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SideQualifier);
      }
      if (AcntType != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(AcntType);
      }
      if (Capacity != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Capacity);
      }
      if (PassiveOnlyOrder != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(PassiveOnlyOrder);
      }
      if (Visible != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Visible);
      }
      if (AwgPrice.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(AwgPrice);
      }
      if (ExpiryTime.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ExpiryTime);
      }
      if (RevisionNumber.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(RevisionNumber);
      }
      if (PriceCurrency.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(PriceCurrency);
      }
      if (ExtOrderStatus != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ExtOrderStatus);
      }
      if (AcceptedUid.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(AcceptedUid);
      }
      if (FilledValue.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(FilledValue);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Extref);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SettleCurrency);
      }
      if (OnBehalfOfUid.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OrderNum);
      }
      if (Flags != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Qty);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Balance);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Value);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Accruedint);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Yield);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Price2);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Settlecode);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Uid);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CanceledUid);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ExchangeCode);
      }
      if (ActivationTime.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ActivationTime);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Linkedorder);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Expiry);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ClassCode);
      }
      if (datetime_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Datetime);
      }
      if (withdrawDatetime_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(WithdrawDatetime);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(BankAccId);
      }
      if (ValueEntryType != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(ValueEntryType);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Repoterm);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Repo2Value);
      }
      if (RepoValueBalance.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(RepoValueBalance);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(StartDiscount);
      }
      if (RejectReason.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(RejectReason);
      }
      if (ExtOrderFlags.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(ExtOrderFlags);
      }
      if (MinQty != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(MinQty);
      }
      if (ExecType != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(ExecType);
      }
      if (SideQualifier != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SideQualifier);
      }
      if (AcntType != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(AcntType);
      }
      if (Capacity != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Capacity);
      }
      if (PassiveOnlyOrder != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(PassiveOnlyOrder);
      }
      if (Visible != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Visible);
      }
      if (AwgPrice.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(AwgPrice);
      }
      if (ExpiryTime.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(ExpiryTime);
      }
      if (RevisionNumber.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(RevisionNumber);
      }
      if (PriceCurrency.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(PriceCurrency);
      }
      if (ExtOrderStatus != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(ExtOrderStatus);
      }
      if (AcceptedUid.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(AcceptedUid);
      }
      if (FilledValue.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(FilledValue);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Extref);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SettleCurrency);
      }
      if (OnBehalfOfUid.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (OrderNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderNum);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Balance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Accruedint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (Yield.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yield);
      }
      if (TransId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransId);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Price2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price2);
      }
      if (Settlecode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Settlecode);
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (CanceledUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CanceledUid);
      }
      if (ExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeCode);
      }
      if (ActivationTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActivationTime);
      }
      if (Linkedorder.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Linkedorder);
      }
      if (Expiry.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Expiry);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (datetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (withdrawDatetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithdrawDatetime);
      }
      if (BankAccId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BankAccId);
      }
      if (ValueEntryType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ValueEntryType);
      }
      if (Repoterm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repoterm);
      }
      if (Repovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repo2Value);
      }
      if (RepoValueBalance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RepoValueBalance);
      }
      if (StartDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartDiscount);
      }
      if (RejectReason.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RejectReason);
      }
      if (ExtOrderFlags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExtOrderFlags);
      }
      if (MinQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinQty);
      }
      if (ExecType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecType);
      }
      if (SideQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SideQualifier);
      }
      if (AcntType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AcntType);
      }
      if (Capacity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Capacity);
      }
      if (PassiveOnlyOrder != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PassiveOnlyOrder);
      }
      if (Visible != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Visible);
      }
      if (AwgPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AwgPrice);
      }
      if (ExpiryTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpiryTime);
      }
      if (RevisionNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RevisionNumber);
      }
      if (PriceCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriceCurrency);
      }
      if (ExtOrderStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExtOrderStatus);
      }
      if (AcceptedUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AcceptedUid);
      }
      if (FilledValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FilledValue);
      }
      if (Extref.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Extref);
      }
      if (SettleCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleCurrency);
      }
      if (OnBehalfOfUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OnBehalfOfUid);
      }
      if (ClientQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Order other) {
      if (other == null) {
        return;
      }
      if (other.OrderNum != 0L) {
        OrderNum = other.OrderNum;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.Yield.Length != 0) {
        Yield = other.Yield;
      }
      if (other.TransId.Length != 0) {
        TransId = other.TransId;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Price2.Length != 0) {
        Price2 = other.Price2;
      }
      if (other.Settlecode.Length != 0) {
        Settlecode = other.Settlecode;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.CanceledUid.Length != 0) {
        CanceledUid = other.CanceledUid;
      }
      if (other.ExchangeCode.Length != 0) {
        ExchangeCode = other.ExchangeCode;
      }
      if (other.ActivationTime.Length != 0) {
        ActivationTime = other.ActivationTime;
      }
      if (other.Linkedorder.Length != 0) {
        Linkedorder = other.Linkedorder;
      }
      if (other.Expiry.Length != 0) {
        Expiry = other.Expiry;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.datetime_ != null) {
        if (datetime_ == null) {
          Datetime = new global::Qlua.Structs.DateTimeEntry();
        }
        Datetime.MergeFrom(other.Datetime);
      }
      if (other.withdrawDatetime_ != null) {
        if (withdrawDatetime_ == null) {
          WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
        }
        WithdrawDatetime.MergeFrom(other.WithdrawDatetime);
      }
      if (other.BankAccId.Length != 0) {
        BankAccId = other.BankAccId;
      }
      if (other.ValueEntryType != 0) {
        ValueEntryType = other.ValueEntryType;
      }
      if (other.Repoterm.Length != 0) {
        Repoterm = other.Repoterm;
      }
      if (other.Repovalue.Length != 0) {
        Repovalue = other.Repovalue;
      }
      if (other.Repo2Value.Length != 0) {
        Repo2Value = other.Repo2Value;
      }
      if (other.RepoValueBalance.Length != 0) {
        RepoValueBalance = other.RepoValueBalance;
      }
      if (other.StartDiscount.Length != 0) {
        StartDiscount = other.StartDiscount;
      }
      if (other.RejectReason.Length != 0) {
        RejectReason = other.RejectReason;
      }
      if (other.ExtOrderFlags.Length != 0) {
        ExtOrderFlags = other.ExtOrderFlags;
      }
      if (other.MinQty != 0) {
        MinQty = other.MinQty;
      }
      if (other.ExecType != 0) {
        ExecType = other.ExecType;
      }
      if (other.SideQualifier != 0) {
        SideQualifier = other.SideQualifier;
      }
      if (other.AcntType != 0) {
        AcntType = other.AcntType;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.PassiveOnlyOrder != 0) {
        PassiveOnlyOrder = other.PassiveOnlyOrder;
      }
      if (other.Visible != 0) {
        Visible = other.Visible;
      }
      if (other.AwgPrice.Length != 0) {
        AwgPrice = other.AwgPrice;
      }
      if (other.ExpiryTime.Length != 0) {
        ExpiryTime = other.ExpiryTime;
      }
      if (other.RevisionNumber.Length != 0) {
        RevisionNumber = other.RevisionNumber;
      }
      if (other.PriceCurrency.Length != 0) {
        PriceCurrency = other.PriceCurrency;
      }
      if (other.ExtOrderStatus != 0) {
        ExtOrderStatus = other.ExtOrderStatus;
      }
      if (other.AcceptedUid.Length != 0) {
        AcceptedUid = other.AcceptedUid;
      }
      if (other.FilledValue.Length != 0) {
        FilledValue = other.FilledValue;
      }
      if (other.Extref.Length != 0) {
        Extref = other.Extref;
      }
      if (other.SettleCurrency.Length != 0) {
        SettleCurrency = other.SettleCurrency;
      }
      if (other.OnBehalfOfUid.Length != 0) {
        OnBehalfOfUid = other.OnBehalfOfUid;
      }
      if (other.ClientQualifier != 0) {
        ClientQualifier = other.ClientQualifier;
      }
      if (other.ClientShortCode.Length != 0) {
        ClientShortCode = other.ClientShortCode;
      }
      if (other.InvestmentDecisionMakerQualifier != 0) {
        InvestmentDecisionMakerQualifier = other.InvestmentDecisionMakerQualifier;
      }
      if (other.InvestmentDecisionMakerShortCode.Length != 0) {
        InvestmentDecisionMakerShortCode = other.InvestmentDecisionMakerShortCode;
      }
      if (other.ExecutingTraderQualifier != 0) {
        ExecutingTraderQualifier = other.ExecutingTraderQualifier;
      }
      if (other.ExecutingTraderShortCode.Length != 0) {
        ExecutingTraderShortCode = other.ExecutingTraderShortCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 16: {
            Flags = input.ReadInt32();
            break;
          }
          case 26: {
            Brokerref = input.ReadString();
            break;
          }
          case 34: {
            Userid = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 58: {
            Price = input.ReadString();
            break;
          }
          case 64: {
            Qty = input.ReadInt32();
            break;
          }
          case 74: {
            Balance = input.ReadString();
            break;
          }
          case 82: {
            Value = input.ReadString();
            break;
          }
          case 90: {
            Accruedint = input.ReadString();
            break;
          }
          case 98: {
            Yield = input.ReadString();
            break;
          }
          case 106: {
            TransId = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            Price2 = input.ReadString();
            break;
          }
          case 130: {
            Settlecode = input.ReadString();
            break;
          }
          case 138: {
            Uid = input.ReadString();
            break;
          }
          case 146: {
            CanceledUid = input.ReadString();
            break;
          }
          case 154: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 162: {
            ActivationTime = input.ReadString();
            break;
          }
          case 170: {
            Linkedorder = input.ReadString();
            break;
          }
          case 178: {
            Expiry = input.ReadString();
            break;
          }
          case 186: {
            SecCode = input.ReadString();
            break;
          }
          case 194: {
            ClassCode = input.ReadString();
            break;
          }
          case 202: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 210: {
            if (withdrawDatetime_ == null) {
              WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDatetime);
            break;
          }
          case 218: {
            BankAccId = input.ReadString();
            break;
          }
          case 224: {
            ValueEntryType = input.ReadInt32();
            break;
          }
          case 234: {
            Repoterm = input.ReadString();
            break;
          }
          case 242: {
            Repovalue = input.ReadString();
            break;
          }
          case 250: {
            Repo2Value = input.ReadString();
            break;
          }
          case 258: {
            RepoValueBalance = input.ReadString();
            break;
          }
          case 266: {
            StartDiscount = input.ReadString();
            break;
          }
          case 274: {
            RejectReason = input.ReadString();
            break;
          }
          case 282: {
            ExtOrderFlags = input.ReadString();
            break;
          }
          case 288: {
            MinQty = input.ReadInt32();
            break;
          }
          case 296: {
            ExecType = input.ReadInt32();
            break;
          }
          case 304: {
            SideQualifier = input.ReadInt32();
            break;
          }
          case 312: {
            AcntType = input.ReadInt32();
            break;
          }
          case 320: {
            Capacity = input.ReadInt32();
            break;
          }
          case 328: {
            PassiveOnlyOrder = input.ReadInt32();
            break;
          }
          case 336: {
            Visible = input.ReadInt32();
            break;
          }
          case 346: {
            AwgPrice = input.ReadString();
            break;
          }
          case 354: {
            ExpiryTime = input.ReadString();
            break;
          }
          case 362: {
            RevisionNumber = input.ReadString();
            break;
          }
          case 370: {
            PriceCurrency = input.ReadString();
            break;
          }
          case 376: {
            ExtOrderStatus = input.ReadInt32();
            break;
          }
          case 386: {
            AcceptedUid = input.ReadString();
            break;
          }
          case 394: {
            FilledValue = input.ReadString();
            break;
          }
          case 402: {
            Extref = input.ReadString();
            break;
          }
          case 410: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 418: {
            OnBehalfOfUid = input.ReadString();
            break;
          }
          case 424: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 434: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 440: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 450: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 456: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 466: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 16: {
            Flags = input.ReadInt32();
            break;
          }
          case 26: {
            Brokerref = input.ReadString();
            break;
          }
          case 34: {
            Userid = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 58: {
            Price = input.ReadString();
            break;
          }
          case 64: {
            Qty = input.ReadInt32();
            break;
          }
          case 74: {
            Balance = input.ReadString();
            break;
          }
          case 82: {
            Value = input.ReadString();
            break;
          }
          case 90: {
            Accruedint = input.ReadString();
            break;
          }
          case 98: {
            Yield = input.ReadString();
            break;
          }
          case 106: {
            TransId = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            Price2 = input.ReadString();
            break;
          }
          case 130: {
            Settlecode = input.ReadString();
            break;
          }
          case 138: {
            Uid = input.ReadString();
            break;
          }
          case 146: {
            CanceledUid = input.ReadString();
            break;
          }
          case 154: {
            ExchangeCode = input.ReadString();
            break;
          }
          case 162: {
            ActivationTime = input.ReadString();
            break;
          }
          case 170: {
            Linkedorder = input.ReadString();
            break;
          }
          case 178: {
            Expiry = input.ReadString();
            break;
          }
          case 186: {
            SecCode = input.ReadString();
            break;
          }
          case 194: {
            ClassCode = input.ReadString();
            break;
          }
          case 202: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 210: {
            if (withdrawDatetime_ == null) {
              WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDatetime);
            break;
          }
          case 218: {
            BankAccId = input.ReadString();
            break;
          }
          case 224: {
            ValueEntryType = input.ReadInt32();
            break;
          }
          case 234: {
            Repoterm = input.ReadString();
            break;
          }
          case 242: {
            Repovalue = input.ReadString();
            break;
          }
          case 250: {
            Repo2Value = input.ReadString();
            break;
          }
          case 258: {
            RepoValueBalance = input.ReadString();
            break;
          }
          case 266: {
            StartDiscount = input.ReadString();
            break;
          }
          case 274: {
            RejectReason = input.ReadString();
            break;
          }
          case 282: {
            ExtOrderFlags = input.ReadString();
            break;
          }
          case 288: {
            MinQty = input.ReadInt32();
            break;
          }
          case 296: {
            ExecType = input.ReadInt32();
            break;
          }
          case 304: {
            SideQualifier = input.ReadInt32();
            break;
          }
          case 312: {
            AcntType = input.ReadInt32();
            break;
          }
          case 320: {
            Capacity = input.ReadInt32();
            break;
          }
          case 328: {
            PassiveOnlyOrder = input.ReadInt32();
            break;
          }
          case 336: {
            Visible = input.ReadInt32();
            break;
          }
          case 346: {
            AwgPrice = input.ReadString();
            break;
          }
          case 354: {
            ExpiryTime = input.ReadString();
            break;
          }
          case 362: {
            RevisionNumber = input.ReadString();
            break;
          }
          case 370: {
            PriceCurrency = input.ReadString();
            break;
          }
          case 376: {
            ExtOrderStatus = input.ReadInt32();
            break;
          }
          case 386: {
            AcceptedUid = input.ReadString();
            break;
          }
          case 394: {
            FilledValue = input.ReadString();
            break;
          }
          case 402: {
            Extref = input.ReadString();
            break;
          }
          case 410: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 418: {
            OnBehalfOfUid = input.ReadString();
            break;
          }
          case 424: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 434: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 440: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 450: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 456: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 466: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Текущие позиции по клиентским счетам
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AccountBalance : pb::IMessage<AccountBalance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountBalance> _parser = new pb::MessageParser<AccountBalance>(() => new AccountBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccountBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountBalance(AccountBalance other) : this() {
      firmid_ = other.firmid_;
      secCode_ = other.secCode_;
      trdaccid_ = other.trdaccid_;
      depaccid_ = other.depaccid_;
      openbal_ = other.openbal_;
      currentpos_ = other.currentpos_;
      plannedpossell_ = other.plannedpossell_;
      plannedposbuy_ = other.plannedposbuy_;
      planbal_ = other.planbal_;
      usqtyb_ = other.usqtyb_;
      usqtys_ = other.usqtys_;
      planned_ = other.planned_;
      settlebal_ = other.settlebal_;
      bankAccId_ = other.bankAccId_;
      firmuse_ = other.firmuse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountBalance Clone() {
      return new AccountBalance(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 2;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trdaccid" field.</summary>
    public const int TrdaccidFieldNumber = 3;
    private string trdaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Trdaccid {
      get { return trdaccid_; }
      set {
        trdaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depaccid" field.</summary>
    public const int DepaccidFieldNumber = 4;
    private string depaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Depaccid {
      get { return depaccid_; }
      set {
        depaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openbal" field.</summary>
    public const int OpenbalFieldNumber = 5;
    private string openbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Openbal {
      get { return openbal_; }
      set {
        openbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentpos" field.</summary>
    public const int CurrentposFieldNumber = 6;
    private string currentpos_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currentpos {
      get { return currentpos_; }
      set {
        currentpos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plannedpossell" field.</summary>
    public const int PlannedpossellFieldNumber = 7;
    private string plannedpossell_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Plannedpossell {
      get { return plannedpossell_; }
      set {
        plannedpossell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plannedposbuy" field.</summary>
    public const int PlannedposbuyFieldNumber = 8;
    private string plannedposbuy_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Plannedposbuy {
      get { return plannedposbuy_; }
      set {
        plannedposbuy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "planbal" field.</summary>
    public const int PlanbalFieldNumber = 9;
    private string planbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Planbal {
      get { return planbal_; }
      set {
        planbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usqtyb" field.</summary>
    public const int UsqtybFieldNumber = 10;
    private string usqtyb_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Usqtyb {
      get { return usqtyb_; }
      set {
        usqtyb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usqtys" field.</summary>
    public const int UsqtysFieldNumber = 11;
    private string usqtys_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Usqtys {
      get { return usqtys_; }
      set {
        usqtys_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "planned" field.</summary>
    public const int PlannedFieldNumber = 12;
    private string planned_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Planned {
      get { return planned_; }
      set {
        planned_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlebal" field.</summary>
    public const int SettlebalFieldNumber = 13;
    private string settlebal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlebal {
      get { return settlebal_; }
      set {
        settlebal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_acc_id" field.</summary>
    public const int BankAccIdFieldNumber = 14;
    private string bankAccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BankAccId {
      get { return bankAccId_; }
      set {
        bankAccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmuse" field.</summary>
    public const int FirmuseFieldNumber = 15;
    private int firmuse_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Firmuse {
      get { return firmuse_; }
      set {
        firmuse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccountBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccountBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (SecCode != other.SecCode) return false;
      if (Trdaccid != other.Trdaccid) return false;
      if (Depaccid != other.Depaccid) return false;
      if (Openbal != other.Openbal) return false;
      if (Currentpos != other.Currentpos) return false;
      if (Plannedpossell != other.Plannedpossell) return false;
      if (Plannedposbuy != other.Plannedposbuy) return false;
      if (Planbal != other.Planbal) return false;
      if (Usqtyb != other.Usqtyb) return false;
      if (Usqtys != other.Usqtys) return false;
      if (Planned != other.Planned) return false;
      if (Settlebal != other.Settlebal) return false;
      if (BankAccId != other.BankAccId) return false;
      if (Firmuse != other.Firmuse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (Trdaccid.Length != 0) hash ^= Trdaccid.GetHashCode();
      if (Depaccid.Length != 0) hash ^= Depaccid.GetHashCode();
      if (Openbal.Length != 0) hash ^= Openbal.GetHashCode();
      if (Currentpos.Length != 0) hash ^= Currentpos.GetHashCode();
      if (Plannedpossell.Length != 0) hash ^= Plannedpossell.GetHashCode();
      if (Plannedposbuy.Length != 0) hash ^= Plannedposbuy.GetHashCode();
      if (Planbal.Length != 0) hash ^= Planbal.GetHashCode();
      if (Usqtyb.Length != 0) hash ^= Usqtyb.GetHashCode();
      if (Usqtys.Length != 0) hash ^= Usqtys.GetHashCode();
      if (Planned.Length != 0) hash ^= Planned.GetHashCode();
      if (Settlebal.Length != 0) hash ^= Settlebal.GetHashCode();
      if (BankAccId.Length != 0) hash ^= BankAccId.GetHashCode();
      if (Firmuse != 0) hash ^= Firmuse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Trdaccid);
      }
      if (Depaccid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Depaccid);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Currentpos.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currentpos);
      }
      if (Plannedpossell.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Plannedpossell);
      }
      if (Plannedposbuy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Plannedposbuy);
      }
      if (Planbal.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Planbal);
      }
      if (Usqtyb.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Usqtyb);
      }
      if (Usqtys.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Usqtys);
      }
      if (Planned.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Planned);
      }
      if (Settlebal.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlebal);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(BankAccId);
      }
      if (Firmuse != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Firmuse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Trdaccid);
      }
      if (Depaccid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Depaccid);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Currentpos.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currentpos);
      }
      if (Plannedpossell.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Plannedpossell);
      }
      if (Plannedposbuy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Plannedposbuy);
      }
      if (Planbal.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Planbal);
      }
      if (Usqtyb.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Usqtyb);
      }
      if (Usqtys.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Usqtys);
      }
      if (Planned.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Planned);
      }
      if (Settlebal.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlebal);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(BankAccId);
      }
      if (Firmuse != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Firmuse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (Trdaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trdaccid);
      }
      if (Depaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Depaccid);
      }
      if (Openbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Openbal);
      }
      if (Currentpos.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currentpos);
      }
      if (Plannedpossell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plannedpossell);
      }
      if (Plannedposbuy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plannedposbuy);
      }
      if (Planbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Planbal);
      }
      if (Usqtyb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usqtyb);
      }
      if (Usqtys.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usqtys);
      }
      if (Planned.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Planned);
      }
      if (Settlebal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Settlebal);
      }
      if (BankAccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankAccId);
      }
      if (Firmuse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Firmuse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccountBalance other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.Trdaccid.Length != 0) {
        Trdaccid = other.Trdaccid;
      }
      if (other.Depaccid.Length != 0) {
        Depaccid = other.Depaccid;
      }
      if (other.Openbal.Length != 0) {
        Openbal = other.Openbal;
      }
      if (other.Currentpos.Length != 0) {
        Currentpos = other.Currentpos;
      }
      if (other.Plannedpossell.Length != 0) {
        Plannedpossell = other.Plannedpossell;
      }
      if (other.Plannedposbuy.Length != 0) {
        Plannedposbuy = other.Plannedposbuy;
      }
      if (other.Planbal.Length != 0) {
        Planbal = other.Planbal;
      }
      if (other.Usqtyb.Length != 0) {
        Usqtyb = other.Usqtyb;
      }
      if (other.Usqtys.Length != 0) {
        Usqtys = other.Usqtys;
      }
      if (other.Planned.Length != 0) {
        Planned = other.Planned;
      }
      if (other.Settlebal.Length != 0) {
        Settlebal = other.Settlebal;
      }
      if (other.BankAccId.Length != 0) {
        BankAccId = other.BankAccId;
      }
      if (other.Firmuse != 0) {
        Firmuse = other.Firmuse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
          case 26: {
            Trdaccid = input.ReadString();
            break;
          }
          case 34: {
            Depaccid = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Currentpos = input.ReadString();
            break;
          }
          case 58: {
            Plannedpossell = input.ReadString();
            break;
          }
          case 66: {
            Plannedposbuy = input.ReadString();
            break;
          }
          case 74: {
            Planbal = input.ReadString();
            break;
          }
          case 82: {
            Usqtyb = input.ReadString();
            break;
          }
          case 90: {
            Usqtys = input.ReadString();
            break;
          }
          case 98: {
            Planned = input.ReadString();
            break;
          }
          case 106: {
            Settlebal = input.ReadString();
            break;
          }
          case 114: {
            BankAccId = input.ReadString();
            break;
          }
          case 120: {
            Firmuse = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
          case 26: {
            Trdaccid = input.ReadString();
            break;
          }
          case 34: {
            Depaccid = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Currentpos = input.ReadString();
            break;
          }
          case 58: {
            Plannedpossell = input.ReadString();
            break;
          }
          case 66: {
            Plannedposbuy = input.ReadString();
            break;
          }
          case 74: {
            Planbal = input.ReadString();
            break;
          }
          case 82: {
            Usqtyb = input.ReadString();
            break;
          }
          case 90: {
            Usqtys = input.ReadString();
            break;
          }
          case 98: {
            Planned = input.ReadString();
            break;
          }
          case 106: {
            Settlebal = input.ReadString();
            break;
          }
          case 114: {
            BankAccId = input.ReadString();
            break;
          }
          case 120: {
            Firmuse = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Стоп-заявки
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StopOrder : pb::IMessage<StopOrder>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopOrder> _parser = new pb::MessageParser<StopOrder>(() => new StopOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StopOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopOrder(StopOrder other) : this() {
      orderNum_ = other.orderNum_;
      ordertime_ = other.ordertime_;
      flags_ = other.flags_;
      brokerref_ = other.brokerref_;
      firmid_ = other.firmid_;
      account_ = other.account_;
      condition_ = other.condition_;
      conditionPrice_ = other.conditionPrice_;
      price_ = other.price_;
      qty_ = other.qty_;
      linkedorder_ = other.linkedorder_;
      expiry_ = other.expiry_;
      transId_ = other.transId_;
      clientCode_ = other.clientCode_;
      coOrderNum_ = other.coOrderNum_;
      coOrderPrice_ = other.coOrderPrice_;
      stopOrderType_ = other.stopOrderType_;
      orderdate_ = other.orderdate_;
      alltradeNum_ = other.alltradeNum_;
      stopflags_ = other.stopflags_;
      offset_ = other.offset_;
      spread_ = other.spread_;
      balance_ = other.balance_;
      uid_ = other.uid_;
      filledQty_ = other.filledQty_;
      withdrawTime_ = other.withdrawTime_;
      conditionPrice2_ = other.conditionPrice2_;
      activeFromTime_ = other.activeFromTime_;
      activeToTime_ = other.activeToTime_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      conditionSecCode_ = other.conditionSecCode_;
      conditionClassCode_ = other.conditionClassCode_;
      canceledUid_ = other.canceledUid_;
      orderDateTime_ = other.orderDateTime_ != null ? other.orderDateTime_.Clone() : null;
      withdrawDatetime_ = other.withdrawDatetime_ != null ? other.withdrawDatetime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopOrder Clone() {
      return new StopOrder(this);
    }

    /// <summary>Field number for the "order_num" field.</summary>
    public const int OrderNumFieldNumber = 1;
    private long orderNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = value;
      }
    }

    /// <summary>Field number for the "ordertime" field.</summary>
    public const int OrdertimeFieldNumber = 2;
    private string ordertime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ordertime {
      get { return ordertime_; }
      set {
        ordertime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 4;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 5;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 7;
    private int condition_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "condition_price" field.</summary>
    public const int ConditionPriceFieldNumber = 8;
    private string conditionPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConditionPrice {
      get { return conditionPrice_; }
      set {
        conditionPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 10;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "linkedorder" field.</summary>
    public const int LinkedorderFieldNumber = 11;
    private string linkedorder_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Linkedorder {
      get { return linkedorder_; }
      set {
        linkedorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 12;
    private string expiry_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Expiry {
      get { return expiry_; }
      set {
        expiry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 13;
    private string transId_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransId {
      get { return transId_; }
      set {
        transId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 14;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "co_order_num" field.</summary>
    public const int CoOrderNumFieldNumber = 15;
    private string coOrderNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CoOrderNum {
      get { return coOrderNum_; }
      set {
        coOrderNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "co_order_price" field.</summary>
    public const int CoOrderPriceFieldNumber = 16;
    private string coOrderPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CoOrderPrice {
      get { return coOrderPrice_; }
      set {
        coOrderPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stop_order_type" field.</summary>
    public const int StopOrderTypeFieldNumber = 17;
    private int stopOrderType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StopOrderType {
      get { return stopOrderType_; }
      set {
        stopOrderType_ = value;
      }
    }

    /// <summary>Field number for the "orderdate" field.</summary>
    public const int OrderdateFieldNumber = 18;
    private string orderdate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Orderdate {
      get { return orderdate_; }
      set {
        orderdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alltrade_num" field.</summary>
    public const int AlltradeNumFieldNumber = 19;
    private string alltradeNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AlltradeNum {
      get { return alltradeNum_; }
      set {
        alltradeNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stopflags" field.</summary>
    public const int StopflagsFieldNumber = 20;
    private int stopflags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Stopflags {
      get { return stopflags_; }
      set {
        stopflags_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 21;
    private string offset_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Offset {
      get { return offset_; }
      set {
        offset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spread" field.</summary>
    public const int SpreadFieldNumber = 22;
    private string spread_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Spread {
      get { return spread_; }
      set {
        spread_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 23;
    private string balance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 24;
    private string uid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filled_qty" field.</summary>
    public const int FilledQtyFieldNumber = 25;
    private int filledQty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FilledQty {
      get { return filledQty_; }
      set {
        filledQty_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_time" field.</summary>
    public const int WithdrawTimeFieldNumber = 26;
    private string withdrawTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WithdrawTime {
      get { return withdrawTime_; }
      set {
        withdrawTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition_price2" field.</summary>
    public const int ConditionPrice2FieldNumber = 27;
    private string conditionPrice2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConditionPrice2 {
      get { return conditionPrice2_; }
      set {
        conditionPrice2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_from_time" field.</summary>
    public const int ActiveFromTimeFieldNumber = 28;
    private string activeFromTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveFromTime {
      get { return activeFromTime_; }
      set {
        activeFromTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_to_time" field.</summary>
    public const int ActiveToTimeFieldNumber = 29;
    private string activeToTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveToTime {
      get { return activeToTime_; }
      set {
        activeToTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 30;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 31;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition_sec_code" field.</summary>
    public const int ConditionSecCodeFieldNumber = 32;
    private string conditionSecCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConditionSecCode {
      get { return conditionSecCode_; }
      set {
        conditionSecCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition_class_code" field.</summary>
    public const int ConditionClassCodeFieldNumber = 33;
    private string conditionClassCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ConditionClassCode {
      get { return conditionClassCode_; }
      set {
        conditionClassCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canceled_uid" field.</summary>
    public const int CanceledUidFieldNumber = 34;
    private string canceledUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CanceledUid {
      get { return canceledUid_; }
      set {
        canceledUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_date_time" field.</summary>
    public const int OrderDateTimeFieldNumber = 35;
    private global::Qlua.Structs.DateTimeEntry orderDateTime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry OrderDateTime {
      get { return orderDateTime_; }
      set {
        orderDateTime_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_datetime" field.</summary>
    public const int WithdrawDatetimeFieldNumber = 36;
    private global::Qlua.Structs.DateTimeEntry withdrawDatetime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry WithdrawDatetime {
      get { return withdrawDatetime_; }
      set {
        withdrawDatetime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StopOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StopOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderNum != other.OrderNum) return false;
      if (Ordertime != other.Ordertime) return false;
      if (Flags != other.Flags) return false;
      if (Brokerref != other.Brokerref) return false;
      if (Firmid != other.Firmid) return false;
      if (Account != other.Account) return false;
      if (Condition != other.Condition) return false;
      if (ConditionPrice != other.ConditionPrice) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Linkedorder != other.Linkedorder) return false;
      if (Expiry != other.Expiry) return false;
      if (TransId != other.TransId) return false;
      if (ClientCode != other.ClientCode) return false;
      if (CoOrderNum != other.CoOrderNum) return false;
      if (CoOrderPrice != other.CoOrderPrice) return false;
      if (StopOrderType != other.StopOrderType) return false;
      if (Orderdate != other.Orderdate) return false;
      if (AlltradeNum != other.AlltradeNum) return false;
      if (Stopflags != other.Stopflags) return false;
      if (Offset != other.Offset) return false;
      if (Spread != other.Spread) return false;
      if (Balance != other.Balance) return false;
      if (Uid != other.Uid) return false;
      if (FilledQty != other.FilledQty) return false;
      if (WithdrawTime != other.WithdrawTime) return false;
      if (ConditionPrice2 != other.ConditionPrice2) return false;
      if (ActiveFromTime != other.ActiveFromTime) return false;
      if (ActiveToTime != other.ActiveToTime) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (ConditionSecCode != other.ConditionSecCode) return false;
      if (ConditionClassCode != other.ConditionClassCode) return false;
      if (CanceledUid != other.CanceledUid) return false;
      if (!object.Equals(OrderDateTime, other.OrderDateTime)) return false;
      if (!object.Equals(WithdrawDatetime, other.WithdrawDatetime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderNum != 0L) hash ^= OrderNum.GetHashCode();
      if (Ordertime.Length != 0) hash ^= Ordertime.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Condition != 0) hash ^= Condition.GetHashCode();
      if (ConditionPrice.Length != 0) hash ^= ConditionPrice.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Linkedorder.Length != 0) hash ^= Linkedorder.GetHashCode();
      if (Expiry.Length != 0) hash ^= Expiry.GetHashCode();
      if (TransId.Length != 0) hash ^= TransId.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (CoOrderNum.Length != 0) hash ^= CoOrderNum.GetHashCode();
      if (CoOrderPrice.Length != 0) hash ^= CoOrderPrice.GetHashCode();
      if (StopOrderType != 0) hash ^= StopOrderType.GetHashCode();
      if (Orderdate.Length != 0) hash ^= Orderdate.GetHashCode();
      if (AlltradeNum.Length != 0) hash ^= AlltradeNum.GetHashCode();
      if (Stopflags != 0) hash ^= Stopflags.GetHashCode();
      if (Offset.Length != 0) hash ^= Offset.GetHashCode();
      if (Spread.Length != 0) hash ^= Spread.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (FilledQty != 0) hash ^= FilledQty.GetHashCode();
      if (WithdrawTime.Length != 0) hash ^= WithdrawTime.GetHashCode();
      if (ConditionPrice2.Length != 0) hash ^= ConditionPrice2.GetHashCode();
      if (ActiveFromTime.Length != 0) hash ^= ActiveFromTime.GetHashCode();
      if (ActiveToTime.Length != 0) hash ^= ActiveToTime.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (ConditionSecCode.Length != 0) hash ^= ConditionSecCode.GetHashCode();
      if (ConditionClassCode.Length != 0) hash ^= ConditionClassCode.GetHashCode();
      if (CanceledUid.Length != 0) hash ^= CanceledUid.GetHashCode();
      if (orderDateTime_ != null) hash ^= OrderDateTime.GetHashCode();
      if (withdrawDatetime_ != null) hash ^= WithdrawDatetime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (OrderNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OrderNum);
      }
      if (Ordertime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ordertime);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Brokerref);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Condition != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Condition);
      }
      if (ConditionPrice.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ConditionPrice);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Qty);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Linkedorder);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Expiry);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (CoOrderNum.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CoOrderNum);
      }
      if (CoOrderPrice.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CoOrderPrice);
      }
      if (StopOrderType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StopOrderType);
      }
      if (Orderdate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Orderdate);
      }
      if (AlltradeNum.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(AlltradeNum);
      }
      if (Stopflags != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Stopflags);
      }
      if (Offset.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Offset);
      }
      if (Spread.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Spread);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Balance);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Uid);
      }
      if (FilledQty != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(FilledQty);
      }
      if (WithdrawTime.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WithdrawTime);
      }
      if (ConditionPrice2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ConditionPrice2);
      }
      if (ActiveFromTime.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ActiveFromTime);
      }
      if (ActiveToTime.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ActiveToTime);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(ClassCode);
      }
      if (ConditionSecCode.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(ConditionSecCode);
      }
      if (ConditionClassCode.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ConditionClassCode);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(CanceledUid);
      }
      if (orderDateTime_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(OrderDateTime);
      }
      if (withdrawDatetime_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(WithdrawDatetime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (OrderNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OrderNum);
      }
      if (Ordertime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ordertime);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Brokerref);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
      if (Condition != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Condition);
      }
      if (ConditionPrice.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ConditionPrice);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Qty);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Linkedorder);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Expiry);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (CoOrderNum.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CoOrderNum);
      }
      if (CoOrderPrice.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CoOrderPrice);
      }
      if (StopOrderType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(StopOrderType);
      }
      if (Orderdate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Orderdate);
      }
      if (AlltradeNum.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(AlltradeNum);
      }
      if (Stopflags != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Stopflags);
      }
      if (Offset.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Offset);
      }
      if (Spread.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Spread);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Balance);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Uid);
      }
      if (FilledQty != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(FilledQty);
      }
      if (WithdrawTime.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(WithdrawTime);
      }
      if (ConditionPrice2.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ConditionPrice2);
      }
      if (ActiveFromTime.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(ActiveFromTime);
      }
      if (ActiveToTime.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ActiveToTime);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(ClassCode);
      }
      if (ConditionSecCode.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(ConditionSecCode);
      }
      if (ConditionClassCode.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ConditionClassCode);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(CanceledUid);
      }
      if (orderDateTime_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(OrderDateTime);
      }
      if (withdrawDatetime_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(WithdrawDatetime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (OrderNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderNum);
      }
      if (Ordertime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ordertime);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Condition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Condition);
      }
      if (ConditionPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConditionPrice);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Linkedorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Linkedorder);
      }
      if (Expiry.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expiry);
      }
      if (TransId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransId);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (CoOrderNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoOrderNum);
      }
      if (CoOrderPrice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CoOrderPrice);
      }
      if (StopOrderType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StopOrderType);
      }
      if (Orderdate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Orderdate);
      }
      if (AlltradeNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AlltradeNum);
      }
      if (Stopflags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Stopflags);
      }
      if (Offset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Offset);
      }
      if (Spread.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Spread);
      }
      if (Balance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (FilledQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FilledQty);
      }
      if (WithdrawTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WithdrawTime);
      }
      if (ConditionPrice2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConditionPrice2);
      }
      if (ActiveFromTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveFromTime);
      }
      if (ActiveToTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveToTime);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (ConditionSecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConditionSecCode);
      }
      if (ConditionClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ConditionClassCode);
      }
      if (CanceledUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CanceledUid);
      }
      if (orderDateTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OrderDateTime);
      }
      if (withdrawDatetime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithdrawDatetime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StopOrder other) {
      if (other == null) {
        return;
      }
      if (other.OrderNum != 0L) {
        OrderNum = other.OrderNum;
      }
      if (other.Ordertime.Length != 0) {
        Ordertime = other.Ordertime;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Condition != 0) {
        Condition = other.Condition;
      }
      if (other.ConditionPrice.Length != 0) {
        ConditionPrice = other.ConditionPrice;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Linkedorder.Length != 0) {
        Linkedorder = other.Linkedorder;
      }
      if (other.Expiry.Length != 0) {
        Expiry = other.Expiry;
      }
      if (other.TransId.Length != 0) {
        TransId = other.TransId;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.CoOrderNum.Length != 0) {
        CoOrderNum = other.CoOrderNum;
      }
      if (other.CoOrderPrice.Length != 0) {
        CoOrderPrice = other.CoOrderPrice;
      }
      if (other.StopOrderType != 0) {
        StopOrderType = other.StopOrderType;
      }
      if (other.Orderdate.Length != 0) {
        Orderdate = other.Orderdate;
      }
      if (other.AlltradeNum.Length != 0) {
        AlltradeNum = other.AlltradeNum;
      }
      if (other.Stopflags != 0) {
        Stopflags = other.Stopflags;
      }
      if (other.Offset.Length != 0) {
        Offset = other.Offset;
      }
      if (other.Spread.Length != 0) {
        Spread = other.Spread;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.FilledQty != 0) {
        FilledQty = other.FilledQty;
      }
      if (other.WithdrawTime.Length != 0) {
        WithdrawTime = other.WithdrawTime;
      }
      if (other.ConditionPrice2.Length != 0) {
        ConditionPrice2 = other.ConditionPrice2;
      }
      if (other.ActiveFromTime.Length != 0) {
        ActiveFromTime = other.ActiveFromTime;
      }
      if (other.ActiveToTime.Length != 0) {
        ActiveToTime = other.ActiveToTime;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.ConditionSecCode.Length != 0) {
        ConditionSecCode = other.ConditionSecCode;
      }
      if (other.ConditionClassCode.Length != 0) {
        ConditionClassCode = other.ConditionClassCode;
      }
      if (other.CanceledUid.Length != 0) {
        CanceledUid = other.CanceledUid;
      }
      if (other.orderDateTime_ != null) {
        if (orderDateTime_ == null) {
          OrderDateTime = new global::Qlua.Structs.DateTimeEntry();
        }
        OrderDateTime.MergeFrom(other.OrderDateTime);
      }
      if (other.withdrawDatetime_ != null) {
        if (withdrawDatetime_ == null) {
          WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
        }
        WithdrawDatetime.MergeFrom(other.WithdrawDatetime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 18: {
            Ordertime = input.ReadString();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            Brokerref = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 56: {
            Condition = input.ReadInt32();
            break;
          }
          case 66: {
            ConditionPrice = input.ReadString();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 80: {
            Qty = input.ReadInt32();
            break;
          }
          case 90: {
            Linkedorder = input.ReadString();
            break;
          }
          case 98: {
            Expiry = input.ReadString();
            break;
          }
          case 106: {
            TransId = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            CoOrderNum = input.ReadString();
            break;
          }
          case 130: {
            CoOrderPrice = input.ReadString();
            break;
          }
          case 136: {
            StopOrderType = input.ReadInt32();
            break;
          }
          case 146: {
            Orderdate = input.ReadString();
            break;
          }
          case 154: {
            AlltradeNum = input.ReadString();
            break;
          }
          case 160: {
            Stopflags = input.ReadInt32();
            break;
          }
          case 170: {
            Offset = input.ReadString();
            break;
          }
          case 178: {
            Spread = input.ReadString();
            break;
          }
          case 186: {
            Balance = input.ReadString();
            break;
          }
          case 194: {
            Uid = input.ReadString();
            break;
          }
          case 200: {
            FilledQty = input.ReadInt32();
            break;
          }
          case 210: {
            WithdrawTime = input.ReadString();
            break;
          }
          case 218: {
            ConditionPrice2 = input.ReadString();
            break;
          }
          case 226: {
            ActiveFromTime = input.ReadString();
            break;
          }
          case 234: {
            ActiveToTime = input.ReadString();
            break;
          }
          case 242: {
            SecCode = input.ReadString();
            break;
          }
          case 250: {
            ClassCode = input.ReadString();
            break;
          }
          case 258: {
            ConditionSecCode = input.ReadString();
            break;
          }
          case 266: {
            ConditionClassCode = input.ReadString();
            break;
          }
          case 274: {
            CanceledUid = input.ReadString();
            break;
          }
          case 282: {
            if (orderDateTime_ == null) {
              OrderDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(OrderDateTime);
            break;
          }
          case 290: {
            if (withdrawDatetime_ == null) {
              WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDatetime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OrderNum = input.ReadInt64();
            break;
          }
          case 18: {
            Ordertime = input.ReadString();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            Brokerref = input.ReadString();
            break;
          }
          case 42: {
            Firmid = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
          case 56: {
            Condition = input.ReadInt32();
            break;
          }
          case 66: {
            ConditionPrice = input.ReadString();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 80: {
            Qty = input.ReadInt32();
            break;
          }
          case 90: {
            Linkedorder = input.ReadString();
            break;
          }
          case 98: {
            Expiry = input.ReadString();
            break;
          }
          case 106: {
            TransId = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            CoOrderNum = input.ReadString();
            break;
          }
          case 130: {
            CoOrderPrice = input.ReadString();
            break;
          }
          case 136: {
            StopOrderType = input.ReadInt32();
            break;
          }
          case 146: {
            Orderdate = input.ReadString();
            break;
          }
          case 154: {
            AlltradeNum = input.ReadString();
            break;
          }
          case 160: {
            Stopflags = input.ReadInt32();
            break;
          }
          case 170: {
            Offset = input.ReadString();
            break;
          }
          case 178: {
            Spread = input.ReadString();
            break;
          }
          case 186: {
            Balance = input.ReadString();
            break;
          }
          case 194: {
            Uid = input.ReadString();
            break;
          }
          case 200: {
            FilledQty = input.ReadInt32();
            break;
          }
          case 210: {
            WithdrawTime = input.ReadString();
            break;
          }
          case 218: {
            ConditionPrice2 = input.ReadString();
            break;
          }
          case 226: {
            ActiveFromTime = input.ReadString();
            break;
          }
          case 234: {
            ActiveToTime = input.ReadString();
            break;
          }
          case 242: {
            SecCode = input.ReadString();
            break;
          }
          case 250: {
            ClassCode = input.ReadString();
            break;
          }
          case 258: {
            ConditionSecCode = input.ReadString();
            break;
          }
          case 266: {
            ConditionClassCode = input.ReadString();
            break;
          }
          case 274: {
            CanceledUid = input.ReadString();
            break;
          }
          case 282: {
            if (orderDateTime_ == null) {
              OrderDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(OrderDateTime);
            break;
          }
          case 290: {
            if (withdrawDatetime_ == null) {
              WithdrawDatetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDatetime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Лимиты по фьючерсам
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FuturesLimit : pb::IMessage<FuturesLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesLimit> _parser = new pb::MessageParser<FuturesLimit>(() => new FuturesLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimit(FuturesLimit other) : this() {
      firmid_ = other.firmid_;
      trdaccid_ = other.trdaccid_;
      limitType_ = other.limitType_;
      liquidityCoef_ = other.liquidityCoef_;
      cbpPrevLimit_ = other.cbpPrevLimit_;
      cbplimit_ = other.cbplimit_;
      cbplused_ = other.cbplused_;
      cbplplanned_ = other.cbplplanned_;
      varmargin_ = other.varmargin_;
      accruedint_ = other.accruedint_;
      cbplusedForOrders_ = other.cbplusedForOrders_;
      cbplusedForPositions_ = other.cbplusedForPositions_;
      optionsPremium_ = other.optionsPremium_;
      tsComission_ = other.tsComission_;
      kgo_ = other.kgo_;
      currcode_ = other.currcode_;
      realVarmargin_ = other.realVarmargin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimit Clone() {
      return new FuturesLimit(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trdaccid" field.</summary>
    public const int TrdaccidFieldNumber = 2;
    private string trdaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Trdaccid {
      get { return trdaccid_; }
      set {
        trdaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_type" field.</summary>
    public const int LimitTypeFieldNumber = 3;
    private int limitType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    /// <summary>Field number for the "liquidity_coef" field.</summary>
    public const int LiquidityCoefFieldNumber = 4;
    private string liquidityCoef_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LiquidityCoef {
      get { return liquidityCoef_; }
      set {
        liquidityCoef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbp_prev_limit" field.</summary>
    public const int CbpPrevLimitFieldNumber = 5;
    private string cbpPrevLimit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CbpPrevLimit {
      get { return cbpPrevLimit_; }
      set {
        cbpPrevLimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplimit" field.</summary>
    public const int CbplimitFieldNumber = 6;
    private string cbplimit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cbplimit {
      get { return cbplimit_; }
      set {
        cbplimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplused" field.</summary>
    public const int CbplusedFieldNumber = 7;
    private string cbplused_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cbplused {
      get { return cbplused_; }
      set {
        cbplused_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplplanned" field.</summary>
    public const int CbplplannedFieldNumber = 8;
    private string cbplplanned_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cbplplanned {
      get { return cbplplanned_; }
      set {
        cbplplanned_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "varmargin" field.</summary>
    public const int VarmarginFieldNumber = 9;
    private string varmargin_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Varmargin {
      get { return varmargin_; }
      set {
        varmargin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 10;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplused_for_orders" field.</summary>
    public const int CbplusedForOrdersFieldNumber = 11;
    private string cbplusedForOrders_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CbplusedForOrders {
      get { return cbplusedForOrders_; }
      set {
        cbplusedForOrders_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplused_for_positions" field.</summary>
    public const int CbplusedForPositionsFieldNumber = 12;
    private string cbplusedForPositions_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CbplusedForPositions {
      get { return cbplusedForPositions_; }
      set {
        cbplusedForPositions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options_premium" field.</summary>
    public const int OptionsPremiumFieldNumber = 13;
    private string optionsPremium_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OptionsPremium {
      get { return optionsPremium_; }
      set {
        optionsPremium_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts_comission" field.</summary>
    public const int TsComissionFieldNumber = 14;
    private string tsComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TsComission {
      get { return tsComission_; }
      set {
        tsComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kgo" field.</summary>
    public const int KgoFieldNumber = 15;
    private string kgo_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Kgo {
      get { return kgo_; }
      set {
        kgo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currcode" field.</summary>
    public const int CurrcodeFieldNumber = 16;
    private string currcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currcode {
      get { return currcode_; }
      set {
        currcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_varmargin" field.</summary>
    public const int RealVarmarginFieldNumber = 17;
    private string realVarmargin_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RealVarmargin {
      get { return realVarmargin_; }
      set {
        realVarmargin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (Trdaccid != other.Trdaccid) return false;
      if (LimitType != other.LimitType) return false;
      if (LiquidityCoef != other.LiquidityCoef) return false;
      if (CbpPrevLimit != other.CbpPrevLimit) return false;
      if (Cbplimit != other.Cbplimit) return false;
      if (Cbplused != other.Cbplused) return false;
      if (Cbplplanned != other.Cbplplanned) return false;
      if (Varmargin != other.Varmargin) return false;
      if (Accruedint != other.Accruedint) return false;
      if (CbplusedForOrders != other.CbplusedForOrders) return false;
      if (CbplusedForPositions != other.CbplusedForPositions) return false;
      if (OptionsPremium != other.OptionsPremium) return false;
      if (TsComission != other.TsComission) return false;
      if (Kgo != other.Kgo) return false;
      if (Currcode != other.Currcode) return false;
      if (RealVarmargin != other.RealVarmargin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Trdaccid.Length != 0) hash ^= Trdaccid.GetHashCode();
      if (LimitType != 0) hash ^= LimitType.GetHashCode();
      if (LiquidityCoef.Length != 0) hash ^= LiquidityCoef.GetHashCode();
      if (CbpPrevLimit.Length != 0) hash ^= CbpPrevLimit.GetHashCode();
      if (Cbplimit.Length != 0) hash ^= Cbplimit.GetHashCode();
      if (Cbplused.Length != 0) hash ^= Cbplused.GetHashCode();
      if (Cbplplanned.Length != 0) hash ^= Cbplplanned.GetHashCode();
      if (Varmargin.Length != 0) hash ^= Varmargin.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (CbplusedForOrders.Length != 0) hash ^= CbplusedForOrders.GetHashCode();
      if (CbplusedForPositions.Length != 0) hash ^= CbplusedForPositions.GetHashCode();
      if (OptionsPremium.Length != 0) hash ^= OptionsPremium.GetHashCode();
      if (TsComission.Length != 0) hash ^= TsComission.GetHashCode();
      if (Kgo.Length != 0) hash ^= Kgo.GetHashCode();
      if (Currcode.Length != 0) hash ^= Currcode.GetHashCode();
      if (RealVarmargin.Length != 0) hash ^= RealVarmargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (LimitType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitType);
      }
      if (LiquidityCoef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiquidityCoef);
      }
      if (CbpPrevLimit.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CbpPrevLimit);
      }
      if (Cbplimit.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Cbplimit);
      }
      if (Cbplused.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Varmargin);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Accruedint);
      }
      if (CbplusedForOrders.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CbplusedForOrders);
      }
      if (CbplusedForPositions.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CbplusedForPositions);
      }
      if (OptionsPremium.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OptionsPremium);
      }
      if (TsComission.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TsComission);
      }
      if (Kgo.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Kgo);
      }
      if (Currcode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Currcode);
      }
      if (RealVarmargin.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RealVarmargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (LimitType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LimitType);
      }
      if (LiquidityCoef.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiquidityCoef);
      }
      if (CbpPrevLimit.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CbpPrevLimit);
      }
      if (Cbplimit.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Cbplimit);
      }
      if (Cbplused.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Varmargin);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Accruedint);
      }
      if (CbplusedForOrders.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CbplusedForOrders);
      }
      if (CbplusedForPositions.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CbplusedForPositions);
      }
      if (OptionsPremium.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(OptionsPremium);
      }
      if (TsComission.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TsComission);
      }
      if (Kgo.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Kgo);
      }
      if (Currcode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Currcode);
      }
      if (RealVarmargin.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(RealVarmargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Trdaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trdaccid);
      }
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitType);
      }
      if (LiquidityCoef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiquidityCoef);
      }
      if (CbpPrevLimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CbpPrevLimit);
      }
      if (Cbplimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cbplimit);
      }
      if (Cbplused.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Varmargin);
      }
      if (Accruedint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (CbplusedForOrders.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CbplusedForOrders);
      }
      if (CbplusedForPositions.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CbplusedForPositions);
      }
      if (OptionsPremium.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OptionsPremium);
      }
      if (TsComission.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TsComission);
      }
      if (Kgo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kgo);
      }
      if (Currcode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Currcode);
      }
      if (RealVarmargin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RealVarmargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesLimit other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Trdaccid.Length != 0) {
        Trdaccid = other.Trdaccid;
      }
      if (other.LimitType != 0) {
        LimitType = other.LimitType;
      }
      if (other.LiquidityCoef.Length != 0) {
        LiquidityCoef = other.LiquidityCoef;
      }
      if (other.CbpPrevLimit.Length != 0) {
        CbpPrevLimit = other.CbpPrevLimit;
      }
      if (other.Cbplimit.Length != 0) {
        Cbplimit = other.Cbplimit;
      }
      if (other.Cbplused.Length != 0) {
        Cbplused = other.Cbplused;
      }
      if (other.Cbplplanned.Length != 0) {
        Cbplplanned = other.Cbplplanned;
      }
      if (other.Varmargin.Length != 0) {
        Varmargin = other.Varmargin;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.CbplusedForOrders.Length != 0) {
        CbplusedForOrders = other.CbplusedForOrders;
      }
      if (other.CbplusedForPositions.Length != 0) {
        CbplusedForPositions = other.CbplusedForPositions;
      }
      if (other.OptionsPremium.Length != 0) {
        OptionsPremium = other.OptionsPremium;
      }
      if (other.TsComission.Length != 0) {
        TsComission = other.TsComission;
      }
      if (other.Kgo.Length != 0) {
        Kgo = other.Kgo;
      }
      if (other.Currcode.Length != 0) {
        Currcode = other.Currcode;
      }
      if (other.RealVarmargin.Length != 0) {
        RealVarmargin = other.RealVarmargin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 24: {
            LimitType = input.ReadInt32();
            break;
          }
          case 34: {
            LiquidityCoef = input.ReadString();
            break;
          }
          case 42: {
            CbpPrevLimit = input.ReadString();
            break;
          }
          case 50: {
            Cbplimit = input.ReadString();
            break;
          }
          case 58: {
            Cbplused = input.ReadString();
            break;
          }
          case 66: {
            Cbplplanned = input.ReadString();
            break;
          }
          case 74: {
            Varmargin = input.ReadString();
            break;
          }
          case 82: {
            Accruedint = input.ReadString();
            break;
          }
          case 90: {
            CbplusedForOrders = input.ReadString();
            break;
          }
          case 98: {
            CbplusedForPositions = input.ReadString();
            break;
          }
          case 106: {
            OptionsPremium = input.ReadString();
            break;
          }
          case 114: {
            TsComission = input.ReadString();
            break;
          }
          case 122: {
            Kgo = input.ReadString();
            break;
          }
          case 130: {
            Currcode = input.ReadString();
            break;
          }
          case 138: {
            RealVarmargin = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 24: {
            LimitType = input.ReadInt32();
            break;
          }
          case 34: {
            LiquidityCoef = input.ReadString();
            break;
          }
          case 42: {
            CbpPrevLimit = input.ReadString();
            break;
          }
          case 50: {
            Cbplimit = input.ReadString();
            break;
          }
          case 58: {
            Cbplused = input.ReadString();
            break;
          }
          case 66: {
            Cbplplanned = input.ReadString();
            break;
          }
          case 74: {
            Varmargin = input.ReadString();
            break;
          }
          case 82: {
            Accruedint = input.ReadString();
            break;
          }
          case 90: {
            CbplusedForOrders = input.ReadString();
            break;
          }
          case 98: {
            CbplusedForPositions = input.ReadString();
            break;
          }
          case 106: {
            OptionsPremium = input.ReadString();
            break;
          }
          case 114: {
            TsComission = input.ReadString();
            break;
          }
          case 122: {
            Kgo = input.ReadString();
            break;
          }
          case 130: {
            Currcode = input.ReadString();
            break;
          }
          case 138: {
            RealVarmargin = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Позиции по клиентским счетам (фьючерсы)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FuturesClientHolding : pb::IMessage<FuturesClientHolding>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesClientHolding> _parser = new pb::MessageParser<FuturesClientHolding>(() => new FuturesClientHolding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesClientHolding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesClientHolding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesClientHolding(FuturesClientHolding other) : this() {
      firmid_ = other.firmid_;
      trdaccid_ = other.trdaccid_;
      secCode_ = other.secCode_;
      type_ = other.type_;
      startbuy_ = other.startbuy_;
      startsell_ = other.startsell_;
      startnet_ = other.startnet_;
      todaybuy_ = other.todaybuy_;
      todaysell_ = other.todaysell_;
      totalnet_ = other.totalnet_;
      openbuys_ = other.openbuys_;
      opensells_ = other.opensells_;
      cbplused_ = other.cbplused_;
      cbplplanned_ = other.cbplplanned_;
      varmargin_ = other.varmargin_;
      avrposnprice_ = other.avrposnprice_;
      positionvalue_ = other.positionvalue_;
      realVarmargin_ = other.realVarmargin_;
      totalVarmargin_ = other.totalVarmargin_;
      sessionStatus_ = other.sessionStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesClientHolding Clone() {
      return new FuturesClientHolding(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trdaccid" field.</summary>
    public const int TrdaccidFieldNumber = 2;
    private string trdaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Trdaccid {
      get { return trdaccid_; }
      set {
        trdaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 3;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "startbuy" field.</summary>
    public const int StartbuyFieldNumber = 5;
    private string startbuy_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Startbuy {
      get { return startbuy_; }
      set {
        startbuy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startsell" field.</summary>
    public const int StartsellFieldNumber = 6;
    private string startsell_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Startsell {
      get { return startsell_; }
      set {
        startsell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startnet" field.</summary>
    public const int StartnetFieldNumber = 7;
    private string startnet_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Startnet {
      get { return startnet_; }
      set {
        startnet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "todaybuy" field.</summary>
    public const int TodaybuyFieldNumber = 8;
    private string todaybuy_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Todaybuy {
      get { return todaybuy_; }
      set {
        todaybuy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "todaysell" field.</summary>
    public const int TodaysellFieldNumber = 9;
    private string todaysell_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Todaysell {
      get { return todaysell_; }
      set {
        todaysell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalnet" field.</summary>
    public const int TotalnetFieldNumber = 10;
    private string totalnet_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Totalnet {
      get { return totalnet_; }
      set {
        totalnet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openbuys" field.</summary>
    public const int OpenbuysFieldNumber = 11;
    private int openbuys_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Openbuys {
      get { return openbuys_; }
      set {
        openbuys_ = value;
      }
    }

    /// <summary>Field number for the "opensells" field.</summary>
    public const int OpensellsFieldNumber = 12;
    private int opensells_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Opensells {
      get { return opensells_; }
      set {
        opensells_ = value;
      }
    }

    /// <summary>Field number for the "cbplused" field.</summary>
    public const int CbplusedFieldNumber = 13;
    private string cbplused_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cbplused {
      get { return cbplused_; }
      set {
        cbplused_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cbplplanned" field.</summary>
    public const int CbplplannedFieldNumber = 14;
    private string cbplplanned_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cbplplanned {
      get { return cbplplanned_; }
      set {
        cbplplanned_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "varmargin" field.</summary>
    public const int VarmarginFieldNumber = 15;
    private string varmargin_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Varmargin {
      get { return varmargin_; }
      set {
        varmargin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avrposnprice" field.</summary>
    public const int AvrposnpriceFieldNumber = 16;
    private string avrposnprice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Avrposnprice {
      get { return avrposnprice_; }
      set {
        avrposnprice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positionvalue" field.</summary>
    public const int PositionvalueFieldNumber = 17;
    private string positionvalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Positionvalue {
      get { return positionvalue_; }
      set {
        positionvalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_varmargin" field.</summary>
    public const int RealVarmarginFieldNumber = 18;
    private string realVarmargin_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RealVarmargin {
      get { return realVarmargin_; }
      set {
        realVarmargin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_varmargin" field.</summary>
    public const int TotalVarmarginFieldNumber = 19;
    private string totalVarmargin_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TotalVarmargin {
      get { return totalVarmargin_; }
      set {
        totalVarmargin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_status" field.</summary>
    public const int SessionStatusFieldNumber = 20;
    private int sessionStatus_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionStatus {
      get { return sessionStatus_; }
      set {
        sessionStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesClientHolding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesClientHolding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (Trdaccid != other.Trdaccid) return false;
      if (SecCode != other.SecCode) return false;
      if (Type != other.Type) return false;
      if (Startbuy != other.Startbuy) return false;
      if (Startsell != other.Startsell) return false;
      if (Startnet != other.Startnet) return false;
      if (Todaybuy != other.Todaybuy) return false;
      if (Todaysell != other.Todaysell) return false;
      if (Totalnet != other.Totalnet) return false;
      if (Openbuys != other.Openbuys) return false;
      if (Opensells != other.Opensells) return false;
      if (Cbplused != other.Cbplused) return false;
      if (Cbplplanned != other.Cbplplanned) return false;
      if (Varmargin != other.Varmargin) return false;
      if (Avrposnprice != other.Avrposnprice) return false;
      if (Positionvalue != other.Positionvalue) return false;
      if (RealVarmargin != other.RealVarmargin) return false;
      if (TotalVarmargin != other.TotalVarmargin) return false;
      if (SessionStatus != other.SessionStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Trdaccid.Length != 0) hash ^= Trdaccid.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Startbuy.Length != 0) hash ^= Startbuy.GetHashCode();
      if (Startsell.Length != 0) hash ^= Startsell.GetHashCode();
      if (Startnet.Length != 0) hash ^= Startnet.GetHashCode();
      if (Todaybuy.Length != 0) hash ^= Todaybuy.GetHashCode();
      if (Todaysell.Length != 0) hash ^= Todaysell.GetHashCode();
      if (Totalnet.Length != 0) hash ^= Totalnet.GetHashCode();
      if (Openbuys != 0) hash ^= Openbuys.GetHashCode();
      if (Opensells != 0) hash ^= Opensells.GetHashCode();
      if (Cbplused.Length != 0) hash ^= Cbplused.GetHashCode();
      if (Cbplplanned.Length != 0) hash ^= Cbplplanned.GetHashCode();
      if (Varmargin.Length != 0) hash ^= Varmargin.GetHashCode();
      if (Avrposnprice.Length != 0) hash ^= Avrposnprice.GetHashCode();
      if (Positionvalue.Length != 0) hash ^= Positionvalue.GetHashCode();
      if (RealVarmargin.Length != 0) hash ^= RealVarmargin.GetHashCode();
      if (TotalVarmargin.Length != 0) hash ^= TotalVarmargin.GetHashCode();
      if (SessionStatus != 0) hash ^= SessionStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecCode);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Startbuy.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Startbuy);
      }
      if (Startsell.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Startsell);
      }
      if (Startnet.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Startnet);
      }
      if (Todaybuy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Todaybuy);
      }
      if (Todaysell.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Todaysell);
      }
      if (Totalnet.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Totalnet);
      }
      if (Openbuys != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Openbuys);
      }
      if (Opensells != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Opensells);
      }
      if (Cbplused.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Varmargin);
      }
      if (Avrposnprice.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Avrposnprice);
      }
      if (Positionvalue.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Positionvalue);
      }
      if (RealVarmargin.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(RealVarmargin);
      }
      if (TotalVarmargin.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(TotalVarmargin);
      }
      if (SessionStatus != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SessionStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecCode);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (Startbuy.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Startbuy);
      }
      if (Startsell.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Startsell);
      }
      if (Startnet.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Startnet);
      }
      if (Todaybuy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Todaybuy);
      }
      if (Todaysell.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Todaysell);
      }
      if (Totalnet.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Totalnet);
      }
      if (Openbuys != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Openbuys);
      }
      if (Opensells != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Opensells);
      }
      if (Cbplused.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Varmargin);
      }
      if (Avrposnprice.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Avrposnprice);
      }
      if (Positionvalue.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Positionvalue);
      }
      if (RealVarmargin.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(RealVarmargin);
      }
      if (TotalVarmargin.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(TotalVarmargin);
      }
      if (SessionStatus != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SessionStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Trdaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trdaccid);
      }
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Startbuy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Startbuy);
      }
      if (Startsell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Startsell);
      }
      if (Startnet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Startnet);
      }
      if (Todaybuy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Todaybuy);
      }
      if (Todaysell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Todaysell);
      }
      if (Totalnet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Totalnet);
      }
      if (Openbuys != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Openbuys);
      }
      if (Opensells != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opensells);
      }
      if (Cbplused.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cbplused);
      }
      if (Cbplplanned.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cbplplanned);
      }
      if (Varmargin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Varmargin);
      }
      if (Avrposnprice.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Avrposnprice);
      }
      if (Positionvalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Positionvalue);
      }
      if (RealVarmargin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RealVarmargin);
      }
      if (TotalVarmargin.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TotalVarmargin);
      }
      if (SessionStatus != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesClientHolding other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Trdaccid.Length != 0) {
        Trdaccid = other.Trdaccid;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Startbuy.Length != 0) {
        Startbuy = other.Startbuy;
      }
      if (other.Startsell.Length != 0) {
        Startsell = other.Startsell;
      }
      if (other.Startnet.Length != 0) {
        Startnet = other.Startnet;
      }
      if (other.Todaybuy.Length != 0) {
        Todaybuy = other.Todaybuy;
      }
      if (other.Todaysell.Length != 0) {
        Todaysell = other.Todaysell;
      }
      if (other.Totalnet.Length != 0) {
        Totalnet = other.Totalnet;
      }
      if (other.Openbuys != 0) {
        Openbuys = other.Openbuys;
      }
      if (other.Opensells != 0) {
        Opensells = other.Opensells;
      }
      if (other.Cbplused.Length != 0) {
        Cbplused = other.Cbplused;
      }
      if (other.Cbplplanned.Length != 0) {
        Cbplplanned = other.Cbplplanned;
      }
      if (other.Varmargin.Length != 0) {
        Varmargin = other.Varmargin;
      }
      if (other.Avrposnprice.Length != 0) {
        Avrposnprice = other.Avrposnprice;
      }
      if (other.Positionvalue.Length != 0) {
        Positionvalue = other.Positionvalue;
      }
      if (other.RealVarmargin.Length != 0) {
        RealVarmargin = other.RealVarmargin;
      }
      if (other.TotalVarmargin.Length != 0) {
        TotalVarmargin = other.TotalVarmargin;
      }
      if (other.SessionStatus != 0) {
        SessionStatus = other.SessionStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            SecCode = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Startbuy = input.ReadString();
            break;
          }
          case 50: {
            Startsell = input.ReadString();
            break;
          }
          case 58: {
            Startnet = input.ReadString();
            break;
          }
          case 66: {
            Todaybuy = input.ReadString();
            break;
          }
          case 74: {
            Todaysell = input.ReadString();
            break;
          }
          case 82: {
            Totalnet = input.ReadString();
            break;
          }
          case 88: {
            Openbuys = input.ReadInt32();
            break;
          }
          case 96: {
            Opensells = input.ReadInt32();
            break;
          }
          case 106: {
            Cbplused = input.ReadString();
            break;
          }
          case 114: {
            Cbplplanned = input.ReadString();
            break;
          }
          case 122: {
            Varmargin = input.ReadString();
            break;
          }
          case 130: {
            Avrposnprice = input.ReadString();
            break;
          }
          case 138: {
            Positionvalue = input.ReadString();
            break;
          }
          case 146: {
            RealVarmargin = input.ReadString();
            break;
          }
          case 154: {
            TotalVarmargin = input.ReadString();
            break;
          }
          case 160: {
            SessionStatus = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            SecCode = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 42: {
            Startbuy = input.ReadString();
            break;
          }
          case 50: {
            Startsell = input.ReadString();
            break;
          }
          case 58: {
            Startnet = input.ReadString();
            break;
          }
          case 66: {
            Todaybuy = input.ReadString();
            break;
          }
          case 74: {
            Todaysell = input.ReadString();
            break;
          }
          case 82: {
            Totalnet = input.ReadString();
            break;
          }
          case 88: {
            Openbuys = input.ReadInt32();
            break;
          }
          case 96: {
            Opensells = input.ReadInt32();
            break;
          }
          case 106: {
            Cbplused = input.ReadString();
            break;
          }
          case 114: {
            Cbplplanned = input.ReadString();
            break;
          }
          case 122: {
            Varmargin = input.ReadString();
            break;
          }
          case 130: {
            Avrposnprice = input.ReadString();
            break;
          }
          case 138: {
            Positionvalue = input.ReadString();
            break;
          }
          case 146: {
            RealVarmargin = input.ReadString();
            break;
          }
          case 154: {
            TotalVarmargin = input.ReadString();
            break;
          }
          case 160: {
            SessionStatus = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Лимиты по денежным средствам
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MoneyLimit : pb::IMessage<MoneyLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoneyLimit> _parser = new pb::MessageParser<MoneyLimit>(() => new MoneyLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MoneyLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimit(MoneyLimit other) : this() {
      currcode_ = other.currcode_;
      tag_ = other.tag_;
      firmid_ = other.firmid_;
      clientCode_ = other.clientCode_;
      openbal_ = other.openbal_;
      openlimit_ = other.openlimit_;
      currentbal_ = other.currentbal_;
      currentlimit_ = other.currentlimit_;
      locked_ = other.locked_;
      lockedValueCoef_ = other.lockedValueCoef_;
      lockedMarginValue_ = other.lockedMarginValue_;
      leverage_ = other.leverage_;
      limitKind_ = other.limitKind_;
      waPositionPrice_ = other.waPositionPrice_;
      ordersCollateral_ = other.ordersCollateral_;
      positionsCollateral_ = other.positionsCollateral_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimit Clone() {
      return new MoneyLimit(this);
    }

    /// <summary>Field number for the "currcode" field.</summary>
    public const int CurrcodeFieldNumber = 1;
    private string currcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currcode {
      get { return currcode_; }
      set {
        currcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 2;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 3;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 4;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openbal" field.</summary>
    public const int OpenbalFieldNumber = 5;
    private string openbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Openbal {
      get { return openbal_; }
      set {
        openbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openlimit" field.</summary>
    public const int OpenlimitFieldNumber = 6;
    private string openlimit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Openlimit {
      get { return openlimit_; }
      set {
        openlimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentbal" field.</summary>
    public const int CurrentbalFieldNumber = 7;
    private string currentbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currentbal {
      get { return currentbal_; }
      set {
        currentbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentlimit" field.</summary>
    public const int CurrentlimitFieldNumber = 8;
    private string currentlimit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currentlimit {
      get { return currentlimit_; }
      set {
        currentlimit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 9;
    private string locked_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Locked {
      get { return locked_; }
      set {
        locked_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locked_value_coef" field.</summary>
    public const int LockedValueCoefFieldNumber = 10;
    private string lockedValueCoef_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LockedValueCoef {
      get { return lockedValueCoef_; }
      set {
        lockedValueCoef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locked_margin_value" field.</summary>
    public const int LockedMarginValueFieldNumber = 11;
    private string lockedMarginValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LockedMarginValue {
      get { return lockedMarginValue_; }
      set {
        lockedMarginValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 12;
    private string leverage_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Leverage {
      get { return leverage_; }
      set {
        leverage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_kind" field.</summary>
    public const int LimitKindFieldNumber = 13;
    private int limitKind_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitKind {
      get { return limitKind_; }
      set {
        limitKind_ = value;
      }
    }

    /// <summary>Field number for the "wa_position_price" field.</summary>
    public const int WaPositionPriceFieldNumber = 14;
    private string waPositionPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WaPositionPrice {
      get { return waPositionPrice_; }
      set {
        waPositionPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orders_collateral" field.</summary>
    public const int OrdersCollateralFieldNumber = 15;
    private string ordersCollateral_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrdersCollateral {
      get { return ordersCollateral_; }
      set {
        ordersCollateral_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positions_collateral" field.</summary>
    public const int PositionsCollateralFieldNumber = 16;
    private string positionsCollateral_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PositionsCollateral {
      get { return positionsCollateral_; }
      set {
        positionsCollateral_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MoneyLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MoneyLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currcode != other.Currcode) return false;
      if (Tag != other.Tag) return false;
      if (Firmid != other.Firmid) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Openbal != other.Openbal) return false;
      if (Openlimit != other.Openlimit) return false;
      if (Currentbal != other.Currentbal) return false;
      if (Currentlimit != other.Currentlimit) return false;
      if (Locked != other.Locked) return false;
      if (LockedValueCoef != other.LockedValueCoef) return false;
      if (LockedMarginValue != other.LockedMarginValue) return false;
      if (Leverage != other.Leverage) return false;
      if (LimitKind != other.LimitKind) return false;
      if (WaPositionPrice != other.WaPositionPrice) return false;
      if (OrdersCollateral != other.OrdersCollateral) return false;
      if (PositionsCollateral != other.PositionsCollateral) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Currcode.Length != 0) hash ^= Currcode.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Openbal.Length != 0) hash ^= Openbal.GetHashCode();
      if (Openlimit.Length != 0) hash ^= Openlimit.GetHashCode();
      if (Currentbal.Length != 0) hash ^= Currentbal.GetHashCode();
      if (Currentlimit.Length != 0) hash ^= Currentlimit.GetHashCode();
      if (Locked.Length != 0) hash ^= Locked.GetHashCode();
      if (LockedValueCoef.Length != 0) hash ^= LockedValueCoef.GetHashCode();
      if (LockedMarginValue.Length != 0) hash ^= LockedMarginValue.GetHashCode();
      if (Leverage.Length != 0) hash ^= Leverage.GetHashCode();
      if (LimitKind != 0) hash ^= LimitKind.GetHashCode();
      if (WaPositionPrice.Length != 0) hash ^= WaPositionPrice.GetHashCode();
      if (OrdersCollateral.Length != 0) hash ^= OrdersCollateral.GetHashCode();
      if (PositionsCollateral.Length != 0) hash ^= PositionsCollateral.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Currcode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tag);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Openlimit.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Openlimit);
      }
      if (Currentbal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Currentbal);
      }
      if (Currentlimit.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Currentlimit);
      }
      if (Locked.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Locked);
      }
      if (LockedValueCoef.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LockedValueCoef);
      }
      if (LockedMarginValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LockedMarginValue);
      }
      if (Leverage.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Leverage);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LimitKind);
      }
      if (WaPositionPrice.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WaPositionPrice);
      }
      if (OrdersCollateral.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OrdersCollateral);
      }
      if (PositionsCollateral.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PositionsCollateral);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Currcode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tag);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Openlimit.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Openlimit);
      }
      if (Currentbal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Currentbal);
      }
      if (Currentlimit.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Currentlimit);
      }
      if (Locked.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Locked);
      }
      if (LockedValueCoef.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LockedValueCoef);
      }
      if (LockedMarginValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LockedMarginValue);
      }
      if (Leverage.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Leverage);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LimitKind);
      }
      if (WaPositionPrice.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(WaPositionPrice);
      }
      if (OrdersCollateral.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(OrdersCollateral);
      }
      if (PositionsCollateral.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(PositionsCollateral);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Currcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currcode);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Openbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Openbal);
      }
      if (Openlimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Openlimit);
      }
      if (Currentbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currentbal);
      }
      if (Currentlimit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currentlimit);
      }
      if (Locked.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locked);
      }
      if (LockedValueCoef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockedValueCoef);
      }
      if (LockedMarginValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockedMarginValue);
      }
      if (Leverage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Leverage);
      }
      if (LimitKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitKind);
      }
      if (WaPositionPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WaPositionPrice);
      }
      if (OrdersCollateral.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrdersCollateral);
      }
      if (PositionsCollateral.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionsCollateral);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MoneyLimit other) {
      if (other == null) {
        return;
      }
      if (other.Currcode.Length != 0) {
        Currcode = other.Currcode;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Openbal.Length != 0) {
        Openbal = other.Openbal;
      }
      if (other.Openlimit.Length != 0) {
        Openlimit = other.Openlimit;
      }
      if (other.Currentbal.Length != 0) {
        Currentbal = other.Currentbal;
      }
      if (other.Currentlimit.Length != 0) {
        Currentlimit = other.Currentlimit;
      }
      if (other.Locked.Length != 0) {
        Locked = other.Locked;
      }
      if (other.LockedValueCoef.Length != 0) {
        LockedValueCoef = other.LockedValueCoef;
      }
      if (other.LockedMarginValue.Length != 0) {
        LockedMarginValue = other.LockedMarginValue;
      }
      if (other.Leverage.Length != 0) {
        Leverage = other.Leverage;
      }
      if (other.LimitKind != 0) {
        LimitKind = other.LimitKind;
      }
      if (other.WaPositionPrice.Length != 0) {
        WaPositionPrice = other.WaPositionPrice;
      }
      if (other.OrdersCollateral.Length != 0) {
        OrdersCollateral = other.OrdersCollateral;
      }
      if (other.PositionsCollateral.Length != 0) {
        PositionsCollateral = other.PositionsCollateral;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Currcode = input.ReadString();
            break;
          }
          case 18: {
            Tag = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Openlimit = input.ReadString();
            break;
          }
          case 58: {
            Currentbal = input.ReadString();
            break;
          }
          case 66: {
            Currentlimit = input.ReadString();
            break;
          }
          case 74: {
            Locked = input.ReadString();
            break;
          }
          case 82: {
            LockedValueCoef = input.ReadString();
            break;
          }
          case 90: {
            LockedMarginValue = input.ReadString();
            break;
          }
          case 98: {
            Leverage = input.ReadString();
            break;
          }
          case 104: {
            LimitKind = input.ReadInt32();
            break;
          }
          case 114: {
            WaPositionPrice = input.ReadString();
            break;
          }
          case 122: {
            OrdersCollateral = input.ReadString();
            break;
          }
          case 130: {
            PositionsCollateral = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Currcode = input.ReadString();
            break;
          }
          case 18: {
            Tag = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Openlimit = input.ReadString();
            break;
          }
          case 58: {
            Currentbal = input.ReadString();
            break;
          }
          case 66: {
            Currentlimit = input.ReadString();
            break;
          }
          case 74: {
            Locked = input.ReadString();
            break;
          }
          case 82: {
            LockedValueCoef = input.ReadString();
            break;
          }
          case 90: {
            LockedMarginValue = input.ReadString();
            break;
          }
          case 98: {
            Leverage = input.ReadString();
            break;
          }
          case 104: {
            LimitKind = input.ReadInt32();
            break;
          }
          case 114: {
            WaPositionPrice = input.ReadString();
            break;
          }
          case 122: {
            OrdersCollateral = input.ReadString();
            break;
          }
          case 130: {
            PositionsCollateral = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Удаление денежного лимита
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MoneyLimitDelete : pb::IMessage<MoneyLimitDelete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MoneyLimitDelete> _parser = new pb::MessageParser<MoneyLimitDelete>(() => new MoneyLimitDelete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MoneyLimitDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimitDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimitDelete(MoneyLimitDelete other) : this() {
      currcode_ = other.currcode_;
      tag_ = other.tag_;
      clientCode_ = other.clientCode_;
      firmid_ = other.firmid_;
      limitKind_ = other.limitKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MoneyLimitDelete Clone() {
      return new MoneyLimitDelete(this);
    }

    /// <summary>Field number for the "currcode" field.</summary>
    public const int CurrcodeFieldNumber = 1;
    private string currcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currcode {
      get { return currcode_; }
      set {
        currcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 2;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 3;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 4;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_kind" field.</summary>
    public const int LimitKindFieldNumber = 5;
    private int limitKind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitKind {
      get { return limitKind_; }
      set {
        limitKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MoneyLimitDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MoneyLimitDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currcode != other.Currcode) return false;
      if (Tag != other.Tag) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Firmid != other.Firmid) return false;
      if (LimitKind != other.LimitKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Currcode.Length != 0) hash ^= Currcode.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (LimitKind != 0) hash ^= LimitKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Currcode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tag);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientCode);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Firmid);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Currcode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tag);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientCode);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Firmid);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Currcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currcode);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (LimitKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MoneyLimitDelete other) {
      if (other == null) {
        return;
      }
      if (other.Currcode.Length != 0) {
        Currcode = other.Currcode;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.LimitKind != 0) {
        LimitKind = other.LimitKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Currcode = input.ReadString();
            break;
          }
          case 18: {
            Tag = input.ReadString();
            break;
          }
          case 26: {
            ClientCode = input.ReadString();
            break;
          }
          case 34: {
            Firmid = input.ReadString();
            break;
          }
          case 40: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Currcode = input.ReadString();
            break;
          }
          case 18: {
            Tag = input.ReadString();
            break;
          }
          case 26: {
            ClientCode = input.ReadString();
            break;
          }
          case 34: {
            Firmid = input.ReadString();
            break;
          }
          case 40: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Удаление бумажного лимита
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DepoLimitDelete : pb::IMessage<DepoLimitDelete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DepoLimitDelete> _parser = new pb::MessageParser<DepoLimitDelete>(() => new DepoLimitDelete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DepoLimitDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimitDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimitDelete(DepoLimitDelete other) : this() {
      secCode_ = other.secCode_;
      trdaccid_ = other.trdaccid_;
      firmid_ = other.firmid_;
      clientCode_ = other.clientCode_;
      limitKind_ = other.limitKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimitDelete Clone() {
      return new DepoLimitDelete(this);
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 1;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trdaccid" field.</summary>
    public const int TrdaccidFieldNumber = 2;
    private string trdaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Trdaccid {
      get { return trdaccid_; }
      set {
        trdaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 3;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 4;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_kind" field.</summary>
    public const int LimitKindFieldNumber = 5;
    private int limitKind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitKind {
      get { return limitKind_; }
      set {
        limitKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DepoLimitDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DepoLimitDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecCode != other.SecCode) return false;
      if (Trdaccid != other.Trdaccid) return false;
      if (Firmid != other.Firmid) return false;
      if (ClientCode != other.ClientCode) return false;
      if (LimitKind != other.LimitKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (Trdaccid.Length != 0) hash ^= Trdaccid.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (LimitKind != 0) hash ^= LimitKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SecCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SecCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (Trdaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trdaccid);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (LimitKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DepoLimitDelete other) {
      if (other == null) {
        return;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.Trdaccid.Length != 0) {
        Trdaccid = other.Trdaccid;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.LimitKind != 0) {
        LimitKind = other.LimitKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SecCode = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 40: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SecCode = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 40: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Удаление фьючерсного лимита
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FuturesLimitDelete : pb::IMessage<FuturesLimitDelete>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturesLimitDelete> _parser = new pb::MessageParser<FuturesLimitDelete>(() => new FuturesLimitDelete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturesLimitDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimitDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimitDelete(FuturesLimitDelete other) : this() {
      firmid_ = other.firmid_;
      limitType_ = other.limitType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturesLimitDelete Clone() {
      return new FuturesLimitDelete(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_type" field.</summary>
    public const int LimitTypeFieldNumber = 2;
    private int limitType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitType {
      get { return limitType_; }
      set {
        limitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturesLimitDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturesLimitDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (LimitType != other.LimitType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (LimitType != 0) hash ^= LimitType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (LimitType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (LimitType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LimitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (LimitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturesLimitDelete other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.LimitType != 0) {
        LimitType = other.LimitType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 16: {
            LimitType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 16: {
            LimitType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Лимиты по бумагам
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DepoLimit : pb::IMessage<DepoLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DepoLimit> _parser = new pb::MessageParser<DepoLimit>(() => new DepoLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DepoLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimit(DepoLimit other) : this() {
      secCode_ = other.secCode_;
      trdaccid_ = other.trdaccid_;
      firmid_ = other.firmid_;
      clientCode_ = other.clientCode_;
      openbal_ = other.openbal_;
      openlimit_ = other.openlimit_;
      currentbal_ = other.currentbal_;
      currentlimit_ = other.currentlimit_;
      lockedSell_ = other.lockedSell_;
      lockedBuy_ = other.lockedBuy_;
      lockedBuyValue_ = other.lockedBuyValue_;
      lockedSellValue_ = other.lockedSellValue_;
      waPositionPrice_ = other.waPositionPrice_;
      limitKind_ = other.limitKind_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DepoLimit Clone() {
      return new DepoLimit(this);
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 1;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trdaccid" field.</summary>
    public const int TrdaccidFieldNumber = 2;
    private string trdaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Trdaccid {
      get { return trdaccid_; }
      set {
        trdaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 3;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 4;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openbal" field.</summary>
    public const int OpenbalFieldNumber = 5;
    private int openbal_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Openbal {
      get { return openbal_; }
      set {
        openbal_ = value;
      }
    }

    /// <summary>Field number for the "openlimit" field.</summary>
    public const int OpenlimitFieldNumber = 6;
    private int openlimit_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Openlimit {
      get { return openlimit_; }
      set {
        openlimit_ = value;
      }
    }

    /// <summary>Field number for the "currentbal" field.</summary>
    public const int CurrentbalFieldNumber = 7;
    private int currentbal_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Currentbal {
      get { return currentbal_; }
      set {
        currentbal_ = value;
      }
    }

    /// <summary>Field number for the "currentlimit" field.</summary>
    public const int CurrentlimitFieldNumber = 8;
    private int currentlimit_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Currentlimit {
      get { return currentlimit_; }
      set {
        currentlimit_ = value;
      }
    }

    /// <summary>Field number for the "locked_sell" field.</summary>
    public const int LockedSellFieldNumber = 9;
    private int lockedSell_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LockedSell {
      get { return lockedSell_; }
      set {
        lockedSell_ = value;
      }
    }

    /// <summary>Field number for the "locked_buy" field.</summary>
    public const int LockedBuyFieldNumber = 10;
    private int lockedBuy_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LockedBuy {
      get { return lockedBuy_; }
      set {
        lockedBuy_ = value;
      }
    }

    /// <summary>Field number for the "locked_buy_value" field.</summary>
    public const int LockedBuyValueFieldNumber = 11;
    private string lockedBuyValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LockedBuyValue {
      get { return lockedBuyValue_; }
      set {
        lockedBuyValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locked_sell_value" field.</summary>
    public const int LockedSellValueFieldNumber = 12;
    private string lockedSellValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LockedSellValue {
      get { return lockedSellValue_; }
      set {
        lockedSellValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wa_position_price" field.</summary>
    public const int WaPositionPriceFieldNumber = 13;
    private string waPositionPrice_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WaPositionPrice {
      get { return waPositionPrice_; }
      set {
        waPositionPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_kind" field.</summary>
    public const int LimitKindFieldNumber = 14;
    private int limitKind_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LimitKind {
      get { return limitKind_; }
      set {
        limitKind_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DepoLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DepoLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecCode != other.SecCode) return false;
      if (Trdaccid != other.Trdaccid) return false;
      if (Firmid != other.Firmid) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Openbal != other.Openbal) return false;
      if (Openlimit != other.Openlimit) return false;
      if (Currentbal != other.Currentbal) return false;
      if (Currentlimit != other.Currentlimit) return false;
      if (LockedSell != other.LockedSell) return false;
      if (LockedBuy != other.LockedBuy) return false;
      if (LockedBuyValue != other.LockedBuyValue) return false;
      if (LockedSellValue != other.LockedSellValue) return false;
      if (WaPositionPrice != other.WaPositionPrice) return false;
      if (LimitKind != other.LimitKind) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (Trdaccid.Length != 0) hash ^= Trdaccid.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Openbal != 0) hash ^= Openbal.GetHashCode();
      if (Openlimit != 0) hash ^= Openlimit.GetHashCode();
      if (Currentbal != 0) hash ^= Currentbal.GetHashCode();
      if (Currentlimit != 0) hash ^= Currentlimit.GetHashCode();
      if (LockedSell != 0) hash ^= LockedSell.GetHashCode();
      if (LockedBuy != 0) hash ^= LockedBuy.GetHashCode();
      if (LockedBuyValue.Length != 0) hash ^= LockedBuyValue.GetHashCode();
      if (LockedSellValue.Length != 0) hash ^= LockedSellValue.GetHashCode();
      if (WaPositionPrice.Length != 0) hash ^= WaPositionPrice.GetHashCode();
      if (LimitKind != 0) hash ^= LimitKind.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SecCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (Openbal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Openbal);
      }
      if (Openlimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Openlimit);
      }
      if (Currentbal != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Currentbal);
      }
      if (Currentlimit != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Currentlimit);
      }
      if (LockedSell != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LockedSell);
      }
      if (LockedBuy != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LockedBuy);
      }
      if (LockedBuyValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LockedBuyValue);
      }
      if (LockedSellValue.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LockedSellValue);
      }
      if (WaPositionPrice.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WaPositionPrice);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SecCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SecCode);
      }
      if (Trdaccid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Trdaccid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Firmid);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientCode);
      }
      if (Openbal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Openbal);
      }
      if (Openlimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Openlimit);
      }
      if (Currentbal != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Currentbal);
      }
      if (Currentlimit != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Currentlimit);
      }
      if (LockedSell != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LockedSell);
      }
      if (LockedBuy != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LockedBuy);
      }
      if (LockedBuyValue.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LockedBuyValue);
      }
      if (LockedSellValue.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LockedSellValue);
      }
      if (WaPositionPrice.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WaPositionPrice);
      }
      if (LimitKind != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LimitKind);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (Trdaccid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trdaccid);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Openbal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Openbal);
      }
      if (Openlimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Openlimit);
      }
      if (Currentbal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currentbal);
      }
      if (Currentlimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currentlimit);
      }
      if (LockedSell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockedSell);
      }
      if (LockedBuy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LockedBuy);
      }
      if (LockedBuyValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockedBuyValue);
      }
      if (LockedSellValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockedSellValue);
      }
      if (WaPositionPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WaPositionPrice);
      }
      if (LimitKind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitKind);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DepoLimit other) {
      if (other == null) {
        return;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.Trdaccid.Length != 0) {
        Trdaccid = other.Trdaccid;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Openbal != 0) {
        Openbal = other.Openbal;
      }
      if (other.Openlimit != 0) {
        Openlimit = other.Openlimit;
      }
      if (other.Currentbal != 0) {
        Currentbal = other.Currentbal;
      }
      if (other.Currentlimit != 0) {
        Currentlimit = other.Currentlimit;
      }
      if (other.LockedSell != 0) {
        LockedSell = other.LockedSell;
      }
      if (other.LockedBuy != 0) {
        LockedBuy = other.LockedBuy;
      }
      if (other.LockedBuyValue.Length != 0) {
        LockedBuyValue = other.LockedBuyValue;
      }
      if (other.LockedSellValue.Length != 0) {
        LockedSellValue = other.LockedSellValue;
      }
      if (other.WaPositionPrice.Length != 0) {
        WaPositionPrice = other.WaPositionPrice;
      }
      if (other.LimitKind != 0) {
        LimitKind = other.LimitKind;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SecCode = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 40: {
            Openbal = input.ReadInt32();
            break;
          }
          case 48: {
            Openlimit = input.ReadInt32();
            break;
          }
          case 56: {
            Currentbal = input.ReadInt32();
            break;
          }
          case 64: {
            Currentlimit = input.ReadInt32();
            break;
          }
          case 72: {
            LockedSell = input.ReadInt32();
            break;
          }
          case 80: {
            LockedBuy = input.ReadInt32();
            break;
          }
          case 90: {
            LockedBuyValue = input.ReadString();
            break;
          }
          case 98: {
            LockedSellValue = input.ReadString();
            break;
          }
          case 106: {
            WaPositionPrice = input.ReadString();
            break;
          }
          case 112: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SecCode = input.ReadString();
            break;
          }
          case 18: {
            Trdaccid = input.ReadString();
            break;
          }
          case 26: {
            Firmid = input.ReadString();
            break;
          }
          case 34: {
            ClientCode = input.ReadString();
            break;
          }
          case 40: {
            Openbal = input.ReadInt32();
            break;
          }
          case 48: {
            Openlimit = input.ReadInt32();
            break;
          }
          case 56: {
            Currentbal = input.ReadInt32();
            break;
          }
          case 64: {
            Currentlimit = input.ReadInt32();
            break;
          }
          case 72: {
            LockedSell = input.ReadInt32();
            break;
          }
          case 80: {
            LockedBuy = input.ReadInt32();
            break;
          }
          case 90: {
            LockedBuyValue = input.ReadString();
            break;
          }
          case 98: {
            LockedSellValue = input.ReadString();
            break;
          }
          case 106: {
            WaPositionPrice = input.ReadString();
            break;
          }
          case 112: {
            LimitKind = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Денежные позиции
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AccountPosition : pb::IMessage<AccountPosition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountPosition> _parser = new pb::MessageParser<AccountPosition>(() => new AccountPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AccountPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPosition(AccountPosition other) : this() {
      firmid_ = other.firmid_;
      currcode_ = other.currcode_;
      tag_ = other.tag_;
      description_ = other.description_;
      openbal_ = other.openbal_;
      currentpos_ = other.currentpos_;
      plannedpos_ = other.plannedpos_;
      limit1_ = other.limit1_;
      limit2_ = other.limit2_;
      orderbuy_ = other.orderbuy_;
      ordersell_ = other.ordersell_;
      netto_ = other.netto_;
      plannedbal_ = other.plannedbal_;
      debit_ = other.debit_;
      credit_ = other.credit_;
      bankAccId_ = other.bankAccId_;
      margincall_ = other.margincall_;
      settlebal_ = other.settlebal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AccountPosition Clone() {
      return new AccountPosition(this);
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 1;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currcode" field.</summary>
    public const int CurrcodeFieldNumber = 2;
    private string currcode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currcode {
      get { return currcode_; }
      set {
        currcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openbal" field.</summary>
    public const int OpenbalFieldNumber = 5;
    private string openbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Openbal {
      get { return openbal_; }
      set {
        openbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentpos" field.</summary>
    public const int CurrentposFieldNumber = 6;
    private string currentpos_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currentpos {
      get { return currentpos_; }
      set {
        currentpos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plannedpos" field.</summary>
    public const int PlannedposFieldNumber = 7;
    private string plannedpos_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Plannedpos {
      get { return plannedpos_; }
      set {
        plannedpos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit1" field.</summary>
    public const int Limit1FieldNumber = 8;
    private string limit1_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Limit1 {
      get { return limit1_; }
      set {
        limit1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit2" field.</summary>
    public const int Limit2FieldNumber = 9;
    private string limit2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Limit2 {
      get { return limit2_; }
      set {
        limit2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderbuy" field.</summary>
    public const int OrderbuyFieldNumber = 10;
    private string orderbuy_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Orderbuy {
      get { return orderbuy_; }
      set {
        orderbuy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ordersell" field.</summary>
    public const int OrdersellFieldNumber = 11;
    private string ordersell_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ordersell {
      get { return ordersell_; }
      set {
        ordersell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "netto" field.</summary>
    public const int NettoFieldNumber = 12;
    private string netto_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Netto {
      get { return netto_; }
      set {
        netto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plannedbal" field.</summary>
    public const int PlannedbalFieldNumber = 13;
    private string plannedbal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Plannedbal {
      get { return plannedbal_; }
      set {
        plannedbal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debit" field.</summary>
    public const int DebitFieldNumber = 14;
    private string debit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Debit {
      get { return debit_; }
      set {
        debit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "credit" field.</summary>
    public const int CreditFieldNumber = 15;
    private string credit_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Credit {
      get { return credit_; }
      set {
        credit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_acc_id" field.</summary>
    public const int BankAccIdFieldNumber = 16;
    private string bankAccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BankAccId {
      get { return bankAccId_; }
      set {
        bankAccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "margincall" field.</summary>
    public const int MargincallFieldNumber = 17;
    private string margincall_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Margincall {
      get { return margincall_; }
      set {
        margincall_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlebal" field.</summary>
    public const int SettlebalFieldNumber = 18;
    private string settlebal_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlebal {
      get { return settlebal_; }
      set {
        settlebal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AccountPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AccountPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Firmid != other.Firmid) return false;
      if (Currcode != other.Currcode) return false;
      if (Tag != other.Tag) return false;
      if (Description != other.Description) return false;
      if (Openbal != other.Openbal) return false;
      if (Currentpos != other.Currentpos) return false;
      if (Plannedpos != other.Plannedpos) return false;
      if (Limit1 != other.Limit1) return false;
      if (Limit2 != other.Limit2) return false;
      if (Orderbuy != other.Orderbuy) return false;
      if (Ordersell != other.Ordersell) return false;
      if (Netto != other.Netto) return false;
      if (Plannedbal != other.Plannedbal) return false;
      if (Debit != other.Debit) return false;
      if (Credit != other.Credit) return false;
      if (BankAccId != other.BankAccId) return false;
      if (Margincall != other.Margincall) return false;
      if (Settlebal != other.Settlebal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Currcode.Length != 0) hash ^= Currcode.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Openbal.Length != 0) hash ^= Openbal.GetHashCode();
      if (Currentpos.Length != 0) hash ^= Currentpos.GetHashCode();
      if (Plannedpos.Length != 0) hash ^= Plannedpos.GetHashCode();
      if (Limit1.Length != 0) hash ^= Limit1.GetHashCode();
      if (Limit2.Length != 0) hash ^= Limit2.GetHashCode();
      if (Orderbuy.Length != 0) hash ^= Orderbuy.GetHashCode();
      if (Ordersell.Length != 0) hash ^= Ordersell.GetHashCode();
      if (Netto.Length != 0) hash ^= Netto.GetHashCode();
      if (Plannedbal.Length != 0) hash ^= Plannedbal.GetHashCode();
      if (Debit.Length != 0) hash ^= Debit.GetHashCode();
      if (Credit.Length != 0) hash ^= Credit.GetHashCode();
      if (BankAccId.Length != 0) hash ^= BankAccId.GetHashCode();
      if (Margincall.Length != 0) hash ^= Margincall.GetHashCode();
      if (Settlebal.Length != 0) hash ^= Settlebal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Currcode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tag);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Currentpos.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currentpos);
      }
      if (Plannedpos.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Plannedpos);
      }
      if (Limit1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Limit1);
      }
      if (Limit2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Limit2);
      }
      if (Orderbuy.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Orderbuy);
      }
      if (Ordersell.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Ordersell);
      }
      if (Netto.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Netto);
      }
      if (Plannedbal.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Plannedbal);
      }
      if (Debit.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Debit);
      }
      if (Credit.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Credit);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BankAccId);
      }
      if (Margincall.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Margincall);
      }
      if (Settlebal.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Settlebal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Firmid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Firmid);
      }
      if (Currcode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Currcode);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tag);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Openbal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Openbal);
      }
      if (Currentpos.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Currentpos);
      }
      if (Plannedpos.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Plannedpos);
      }
      if (Limit1.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Limit1);
      }
      if (Limit2.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Limit2);
      }
      if (Orderbuy.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Orderbuy);
      }
      if (Ordersell.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Ordersell);
      }
      if (Netto.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Netto);
      }
      if (Plannedbal.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Plannedbal);
      }
      if (Debit.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Debit);
      }
      if (Credit.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Credit);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(BankAccId);
      }
      if (Margincall.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Margincall);
      }
      if (Settlebal.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Settlebal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Currcode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currcode);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Openbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Openbal);
      }
      if (Currentpos.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currentpos);
      }
      if (Plannedpos.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plannedpos);
      }
      if (Limit1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Limit1);
      }
      if (Limit2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Limit2);
      }
      if (Orderbuy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Orderbuy);
      }
      if (Ordersell.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ordersell);
      }
      if (Netto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Netto);
      }
      if (Plannedbal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plannedbal);
      }
      if (Debit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Debit);
      }
      if (Credit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Credit);
      }
      if (BankAccId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BankAccId);
      }
      if (Margincall.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Margincall);
      }
      if (Settlebal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Settlebal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AccountPosition other) {
      if (other == null) {
        return;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Currcode.Length != 0) {
        Currcode = other.Currcode;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Openbal.Length != 0) {
        Openbal = other.Openbal;
      }
      if (other.Currentpos.Length != 0) {
        Currentpos = other.Currentpos;
      }
      if (other.Plannedpos.Length != 0) {
        Plannedpos = other.Plannedpos;
      }
      if (other.Limit1.Length != 0) {
        Limit1 = other.Limit1;
      }
      if (other.Limit2.Length != 0) {
        Limit2 = other.Limit2;
      }
      if (other.Orderbuy.Length != 0) {
        Orderbuy = other.Orderbuy;
      }
      if (other.Ordersell.Length != 0) {
        Ordersell = other.Ordersell;
      }
      if (other.Netto.Length != 0) {
        Netto = other.Netto;
      }
      if (other.Plannedbal.Length != 0) {
        Plannedbal = other.Plannedbal;
      }
      if (other.Debit.Length != 0) {
        Debit = other.Debit;
      }
      if (other.Credit.Length != 0) {
        Credit = other.Credit;
      }
      if (other.BankAccId.Length != 0) {
        BankAccId = other.BankAccId;
      }
      if (other.Margincall.Length != 0) {
        Margincall = other.Margincall;
      }
      if (other.Settlebal.Length != 0) {
        Settlebal = other.Settlebal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Currcode = input.ReadString();
            break;
          }
          case 26: {
            Tag = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Currentpos = input.ReadString();
            break;
          }
          case 58: {
            Plannedpos = input.ReadString();
            break;
          }
          case 66: {
            Limit1 = input.ReadString();
            break;
          }
          case 74: {
            Limit2 = input.ReadString();
            break;
          }
          case 82: {
            Orderbuy = input.ReadString();
            break;
          }
          case 90: {
            Ordersell = input.ReadString();
            break;
          }
          case 98: {
            Netto = input.ReadString();
            break;
          }
          case 106: {
            Plannedbal = input.ReadString();
            break;
          }
          case 114: {
            Debit = input.ReadString();
            break;
          }
          case 122: {
            Credit = input.ReadString();
            break;
          }
          case 130: {
            BankAccId = input.ReadString();
            break;
          }
          case 138: {
            Margincall = input.ReadString();
            break;
          }
          case 146: {
            Settlebal = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Firmid = input.ReadString();
            break;
          }
          case 18: {
            Currcode = input.ReadString();
            break;
          }
          case 26: {
            Tag = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Openbal = input.ReadString();
            break;
          }
          case 50: {
            Currentpos = input.ReadString();
            break;
          }
          case 58: {
            Plannedpos = input.ReadString();
            break;
          }
          case 66: {
            Limit1 = input.ReadString();
            break;
          }
          case 74: {
            Limit2 = input.ReadString();
            break;
          }
          case 82: {
            Orderbuy = input.ReadString();
            break;
          }
          case 90: {
            Ordersell = input.ReadString();
            break;
          }
          case 98: {
            Netto = input.ReadString();
            break;
          }
          case 106: {
            Plannedbal = input.ReadString();
            break;
          }
          case 114: {
            Debit = input.ReadString();
            break;
          }
          case 122: {
            Credit = input.ReadString();
            break;
          }
          case 130: {
            BankAccId = input.ReadString();
            break;
          }
          case 138: {
            Margincall = input.ReadString();
            break;
          }
          case 146: {
            Settlebal = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Заявки на внебиржевые сделки
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NegDeal : pb::IMessage<NegDeal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NegDeal> _parser = new pb::MessageParser<NegDeal>(() => new NegDeal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NegDeal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegDeal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegDeal(NegDeal other) : this() {
      negDealNum_ = other.negDealNum_;
      negDealTime_ = other.negDealTime_;
      flags_ = other.flags_;
      brokerref_ = other.brokerref_;
      userid_ = other.userid_;
      firmid_ = other.firmid_;
      cpuserid_ = other.cpuserid_;
      cpfirmid_ = other.cpfirmid_;
      account_ = other.account_;
      price_ = other.price_;
      qty_ = other.qty_;
      matchref_ = other.matchref_;
      settlecode_ = other.settlecode_;
      yield_ = other.yield_;
      accruedint_ = other.accruedint_;
      value_ = other.value_;
      price2_ = other.price2_;
      reporate_ = other.reporate_;
      refundrate_ = other.refundrate_;
      transId_ = other.transId_;
      clientCode_ = other.clientCode_;
      repoentry_ = other.repoentry_;
      repovalue_ = other.repovalue_;
      repo2Value_ = other.repo2Value_;
      repoterm_ = other.repoterm_;
      startDiscount_ = other.startDiscount_;
      lowerDiscount_ = other.lowerDiscount_;
      upperDiscount_ = other.upperDiscount_;
      blockSecurities_ = other.blockSecurities_;
      uid_ = other.uid_;
      withdrawTime_ = other.withdrawTime_;
      negDealDate_ = other.negDealDate_;
      balance_ = other.balance_;
      originRepovalue_ = other.originRepovalue_;
      originQty_ = other.originQty_;
      originDiscount_ = other.originDiscount_;
      negDealActivationDate_ = other.negDealActivationDate_;
      negDealActivationTime_ = other.negDealActivationTime_;
      quoteno_ = other.quoteno_;
      settleCurrency_ = other.settleCurrency_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      bankAccId_ = other.bankAccId_;
      withdrawDate_ = other.withdrawDate_;
      linkedorder_ = other.linkedorder_;
      activationDateTime_ = other.activationDateTime_ != null ? other.activationDateTime_.Clone() : null;
      withdrawDateTime_ = other.withdrawDateTime_ != null ? other.withdrawDateTime_.Clone() : null;
      dateTime_ = other.dateTime_ != null ? other.dateTime_.Clone() : null;
      lseccode_ = other.lseccode_;
      canceledUid_ = other.canceledUid_;
      systemRef_ = other.systemRef_;
      priceCurrency_ = other.priceCurrency_;
      orderExchangeCode_ = other.orderExchangeCode_;
      extref_ = other.extref_;
      period_ = other.period_;
      clientQualifier_ = other.clientQualifier_;
      clientShortCode_ = other.clientShortCode_;
      investmentDecisionMakerQualifier_ = other.investmentDecisionMakerQualifier_;
      investmentDecisionMakerShortCode_ = other.investmentDecisionMakerShortCode_;
      executingTraderQualifier_ = other.executingTraderQualifier_;
      executingTraderShortCode_ = other.executingTraderShortCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegDeal Clone() {
      return new NegDeal(this);
    }

    /// <summary>Field number for the "neg_deal_num" field.</summary>
    public const int NegDealNumFieldNumber = 1;
    private long negDealNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NegDealNum {
      get { return negDealNum_; }
      set {
        negDealNum_ = value;
      }
    }

    /// <summary>Field number for the "neg_deal_time" field.</summary>
    public const int NegDealTimeFieldNumber = 2;
    private string negDealTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NegDealTime {
      get { return negDealTime_; }
      set {
        negDealTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 4;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 5;
    private string userid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 6;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpuserid" field.</summary>
    public const int CpuseridFieldNumber = 7;
    private string cpuserid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cpuserid {
      get { return cpuserid_; }
      set {
        cpuserid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpfirmid" field.</summary>
    public const int CpfirmidFieldNumber = 8;
    private string cpfirmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cpfirmid {
      get { return cpfirmid_; }
      set {
        cpfirmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 9;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 11;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "matchref" field.</summary>
    public const int MatchrefFieldNumber = 12;
    private string matchref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Matchref {
      get { return matchref_; }
      set {
        matchref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlecode" field.</summary>
    public const int SettlecodeFieldNumber = 13;
    private string settlecode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlecode {
      get { return settlecode_; }
      set {
        settlecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "yield" field.</summary>
    public const int YieldFieldNumber = 14;
    private string yield_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Yield {
      get { return yield_; }
      set {
        yield_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 15;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 16;
    private string value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price2" field.</summary>
    public const int Price2FieldNumber = 17;
    private string price2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price2 {
      get { return price2_; }
      set {
        price2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporate" field.</summary>
    public const int ReporateFieldNumber = 18;
    private string reporate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reporate {
      get { return reporate_; }
      set {
        reporate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refundrate" field.</summary>
    public const int RefundrateFieldNumber = 19;
    private string refundrate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Refundrate {
      get { return refundrate_; }
      set {
        refundrate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 20;
    private string transId_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransId {
      get { return transId_; }
      set {
        transId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 21;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repoentry" field.</summary>
    public const int RepoentryFieldNumber = 22;
    private int repoentry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Repoentry {
      get { return repoentry_; }
      set {
        repoentry_ = value;
      }
    }

    /// <summary>Field number for the "repovalue" field.</summary>
    public const int RepovalueFieldNumber = 23;
    private string repovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repovalue {
      get { return repovalue_; }
      set {
        repovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo2value" field.</summary>
    public const int Repo2ValueFieldNumber = 24;
    private string repo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repo2Value {
      get { return repo2Value_; }
      set {
        repo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repoterm" field.</summary>
    public const int RepotermFieldNumber = 25;
    private string repoterm_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repoterm {
      get { return repoterm_; }
      set {
        repoterm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_discount" field.</summary>
    public const int StartDiscountFieldNumber = 26;
    private string startDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartDiscount {
      get { return startDiscount_; }
      set {
        startDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lower_discount" field.</summary>
    public const int LowerDiscountFieldNumber = 27;
    private string lowerDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LowerDiscount {
      get { return lowerDiscount_; }
      set {
        lowerDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upper_discount" field.</summary>
    public const int UpperDiscountFieldNumber = 28;
    private string upperDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpperDiscount {
      get { return upperDiscount_; }
      set {
        upperDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_securities" field.</summary>
    public const int BlockSecuritiesFieldNumber = 29;
    private string blockSecurities_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BlockSecurities {
      get { return blockSecurities_; }
      set {
        blockSecurities_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 30;
    private string uid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "withdraw_time" field.</summary>
    public const int WithdrawTimeFieldNumber = 31;
    private string withdrawTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WithdrawTime {
      get { return withdrawTime_; }
      set {
        withdrawTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "neg_deal_date" field.</summary>
    public const int NegDealDateFieldNumber = 32;
    private string negDealDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NegDealDate {
      get { return negDealDate_; }
      set {
        negDealDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 33;
    private string balance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin_repovalue" field.</summary>
    public const int OriginRepovalueFieldNumber = 34;
    private string originRepovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OriginRepovalue {
      get { return originRepovalue_; }
      set {
        originRepovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin_qty" field.</summary>
    public const int OriginQtyFieldNumber = 35;
    private string originQty_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OriginQty {
      get { return originQty_; }
      set {
        originQty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "origin_discount" field.</summary>
    public const int OriginDiscountFieldNumber = 36;
    private string originDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OriginDiscount {
      get { return originDiscount_; }
      set {
        originDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "neg_deal_activation_date" field.</summary>
    public const int NegDealActivationDateFieldNumber = 37;
    private string negDealActivationDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NegDealActivationDate {
      get { return negDealActivationDate_; }
      set {
        negDealActivationDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "neg_deal_activation_time" field.</summary>
    public const int NegDealActivationTimeFieldNumber = 38;
    private string negDealActivationTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NegDealActivationTime {
      get { return negDealActivationTime_; }
      set {
        negDealActivationTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quoteno" field.</summary>
    public const int QuotenoFieldNumber = 39;
    private string quoteno_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Quoteno {
      get { return quoteno_; }
      set {
        quoteno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_currency" field.</summary>
    public const int SettleCurrencyFieldNumber = 40;
    private string settleCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleCurrency {
      get { return settleCurrency_; }
      set {
        settleCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 41;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 42;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_acc_id" field.</summary>
    public const int BankAccIdFieldNumber = 43;
    private string bankAccId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BankAccId {
      get { return bankAccId_; }
      set {
        bankAccId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "withdraw_date" field.</summary>
    public const int WithdrawDateFieldNumber = 44;
    private string withdrawDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WithdrawDate {
      get { return withdrawDate_; }
      set {
        withdrawDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "linkedorder" field.</summary>
    public const int LinkedorderFieldNumber = 45;
    private string linkedorder_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Linkedorder {
      get { return linkedorder_; }
      set {
        linkedorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activation_date_time" field.</summary>
    public const int ActivationDateTimeFieldNumber = 46;
    private global::Qlua.Structs.DateTimeEntry activationDateTime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry ActivationDateTime {
      get { return activationDateTime_; }
      set {
        activationDateTime_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_date_time" field.</summary>
    public const int WithdrawDateTimeFieldNumber = 47;
    private global::Qlua.Structs.DateTimeEntry withdrawDateTime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry WithdrawDateTime {
      get { return withdrawDateTime_; }
      set {
        withdrawDateTime_ = value;
      }
    }

    /// <summary>Field number for the "date_time" field.</summary>
    public const int DateTimeFieldNumber = 48;
    private global::Qlua.Structs.DateTimeEntry dateTime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "lseccode" field.</summary>
    public const int LseccodeFieldNumber = 49;
    private string lseccode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Lseccode {
      get { return lseccode_; }
      set {
        lseccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "canceled_uid" field.</summary>
    public const int CanceledUidFieldNumber = 50;
    private string canceledUid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CanceledUid {
      get { return canceledUid_; }
      set {
        canceledUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "system_ref" field.</summary>
    public const int SystemRefFieldNumber = 51;
    private string systemRef_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SystemRef {
      get { return systemRef_; }
      set {
        systemRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price_currency" field.</summary>
    public const int PriceCurrencyFieldNumber = 52;
    private string priceCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriceCurrency {
      get { return priceCurrency_; }
      set {
        priceCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_exchange_code" field.</summary>
    public const int OrderExchangeCodeFieldNumber = 53;
    private string orderExchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderExchangeCode {
      get { return orderExchangeCode_; }
      set {
        orderExchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extref" field.</summary>
    public const int ExtrefFieldNumber = 54;
    private string extref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Extref {
      get { return extref_; }
      set {
        extref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 55;
    private string period_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Period {
      get { return period_; }
      set {
        period_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_qualifier" field.</summary>
    public const int ClientQualifierFieldNumber = 56;
    private int clientQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientQualifier {
      get { return clientQualifier_; }
      set {
        clientQualifier_ = value;
      }
    }

    /// <summary>Field number for the "client_short_code" field.</summary>
    public const int ClientShortCodeFieldNumber = 57;
    private string clientShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientShortCode {
      get { return clientShortCode_; }
      set {
        clientShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "investment_decision_maker_qualifier" field.</summary>
    public const int InvestmentDecisionMakerQualifierFieldNumber = 58;
    private int investmentDecisionMakerQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InvestmentDecisionMakerQualifier {
      get { return investmentDecisionMakerQualifier_; }
      set {
        investmentDecisionMakerQualifier_ = value;
      }
    }

    /// <summary>Field number for the "investment_decision_maker_short_code" field.</summary>
    public const int InvestmentDecisionMakerShortCodeFieldNumber = 59;
    private string investmentDecisionMakerShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InvestmentDecisionMakerShortCode {
      get { return investmentDecisionMakerShortCode_; }
      set {
        investmentDecisionMakerShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executing_trader_qualifier" field.</summary>
    public const int ExecutingTraderQualifierFieldNumber = 60;
    private int executingTraderQualifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExecutingTraderQualifier {
      get { return executingTraderQualifier_; }
      set {
        executingTraderQualifier_ = value;
      }
    }

    /// <summary>Field number for the "executing_trader_short_code" field.</summary>
    public const int ExecutingTraderShortCodeFieldNumber = 61;
    private string executingTraderShortCode_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExecutingTraderShortCode {
      get { return executingTraderShortCode_; }
      set {
        executingTraderShortCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NegDeal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NegDeal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NegDealNum != other.NegDealNum) return false;
      if (NegDealTime != other.NegDealTime) return false;
      if (Flags != other.Flags) return false;
      if (Brokerref != other.Brokerref) return false;
      if (Userid != other.Userid) return false;
      if (Firmid != other.Firmid) return false;
      if (Cpuserid != other.Cpuserid) return false;
      if (Cpfirmid != other.Cpfirmid) return false;
      if (Account != other.Account) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Matchref != other.Matchref) return false;
      if (Settlecode != other.Settlecode) return false;
      if (Yield != other.Yield) return false;
      if (Accruedint != other.Accruedint) return false;
      if (Value != other.Value) return false;
      if (Price2 != other.Price2) return false;
      if (Reporate != other.Reporate) return false;
      if (Refundrate != other.Refundrate) return false;
      if (TransId != other.TransId) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Repoentry != other.Repoentry) return false;
      if (Repovalue != other.Repovalue) return false;
      if (Repo2Value != other.Repo2Value) return false;
      if (Repoterm != other.Repoterm) return false;
      if (StartDiscount != other.StartDiscount) return false;
      if (LowerDiscount != other.LowerDiscount) return false;
      if (UpperDiscount != other.UpperDiscount) return false;
      if (BlockSecurities != other.BlockSecurities) return false;
      if (Uid != other.Uid) return false;
      if (WithdrawTime != other.WithdrawTime) return false;
      if (NegDealDate != other.NegDealDate) return false;
      if (Balance != other.Balance) return false;
      if (OriginRepovalue != other.OriginRepovalue) return false;
      if (OriginQty != other.OriginQty) return false;
      if (OriginDiscount != other.OriginDiscount) return false;
      if (NegDealActivationDate != other.NegDealActivationDate) return false;
      if (NegDealActivationTime != other.NegDealActivationTime) return false;
      if (Quoteno != other.Quoteno) return false;
      if (SettleCurrency != other.SettleCurrency) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (BankAccId != other.BankAccId) return false;
      if (WithdrawDate != other.WithdrawDate) return false;
      if (Linkedorder != other.Linkedorder) return false;
      if (!object.Equals(ActivationDateTime, other.ActivationDateTime)) return false;
      if (!object.Equals(WithdrawDateTime, other.WithdrawDateTime)) return false;
      if (!object.Equals(DateTime, other.DateTime)) return false;
      if (Lseccode != other.Lseccode) return false;
      if (CanceledUid != other.CanceledUid) return false;
      if (SystemRef != other.SystemRef) return false;
      if (PriceCurrency != other.PriceCurrency) return false;
      if (OrderExchangeCode != other.OrderExchangeCode) return false;
      if (Extref != other.Extref) return false;
      if (Period != other.Period) return false;
      if (ClientQualifier != other.ClientQualifier) return false;
      if (ClientShortCode != other.ClientShortCode) return false;
      if (InvestmentDecisionMakerQualifier != other.InvestmentDecisionMakerQualifier) return false;
      if (InvestmentDecisionMakerShortCode != other.InvestmentDecisionMakerShortCode) return false;
      if (ExecutingTraderQualifier != other.ExecutingTraderQualifier) return false;
      if (ExecutingTraderShortCode != other.ExecutingTraderShortCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (NegDealNum != 0L) hash ^= NegDealNum.GetHashCode();
      if (NegDealTime.Length != 0) hash ^= NegDealTime.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Cpuserid.Length != 0) hash ^= Cpuserid.GetHashCode();
      if (Cpfirmid.Length != 0) hash ^= Cpfirmid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Matchref.Length != 0) hash ^= Matchref.GetHashCode();
      if (Settlecode.Length != 0) hash ^= Settlecode.GetHashCode();
      if (Yield.Length != 0) hash ^= Yield.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Price2.Length != 0) hash ^= Price2.GetHashCode();
      if (Reporate.Length != 0) hash ^= Reporate.GetHashCode();
      if (Refundrate.Length != 0) hash ^= Refundrate.GetHashCode();
      if (TransId.Length != 0) hash ^= TransId.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Repoentry != 0) hash ^= Repoentry.GetHashCode();
      if (Repovalue.Length != 0) hash ^= Repovalue.GetHashCode();
      if (Repo2Value.Length != 0) hash ^= Repo2Value.GetHashCode();
      if (Repoterm.Length != 0) hash ^= Repoterm.GetHashCode();
      if (StartDiscount.Length != 0) hash ^= StartDiscount.GetHashCode();
      if (LowerDiscount.Length != 0) hash ^= LowerDiscount.GetHashCode();
      if (UpperDiscount.Length != 0) hash ^= UpperDiscount.GetHashCode();
      if (BlockSecurities.Length != 0) hash ^= BlockSecurities.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (WithdrawTime.Length != 0) hash ^= WithdrawTime.GetHashCode();
      if (NegDealDate.Length != 0) hash ^= NegDealDate.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (OriginRepovalue.Length != 0) hash ^= OriginRepovalue.GetHashCode();
      if (OriginQty.Length != 0) hash ^= OriginQty.GetHashCode();
      if (OriginDiscount.Length != 0) hash ^= OriginDiscount.GetHashCode();
      if (NegDealActivationDate.Length != 0) hash ^= NegDealActivationDate.GetHashCode();
      if (NegDealActivationTime.Length != 0) hash ^= NegDealActivationTime.GetHashCode();
      if (Quoteno.Length != 0) hash ^= Quoteno.GetHashCode();
      if (SettleCurrency.Length != 0) hash ^= SettleCurrency.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (BankAccId.Length != 0) hash ^= BankAccId.GetHashCode();
      if (WithdrawDate.Length != 0) hash ^= WithdrawDate.GetHashCode();
      if (Linkedorder.Length != 0) hash ^= Linkedorder.GetHashCode();
      if (activationDateTime_ != null) hash ^= ActivationDateTime.GetHashCode();
      if (withdrawDateTime_ != null) hash ^= WithdrawDateTime.GetHashCode();
      if (dateTime_ != null) hash ^= DateTime.GetHashCode();
      if (Lseccode.Length != 0) hash ^= Lseccode.GetHashCode();
      if (CanceledUid.Length != 0) hash ^= CanceledUid.GetHashCode();
      if (SystemRef.Length != 0) hash ^= SystemRef.GetHashCode();
      if (PriceCurrency.Length != 0) hash ^= PriceCurrency.GetHashCode();
      if (OrderExchangeCode.Length != 0) hash ^= OrderExchangeCode.GetHashCode();
      if (Extref.Length != 0) hash ^= Extref.GetHashCode();
      if (Period.Length != 0) hash ^= Period.GetHashCode();
      if (ClientQualifier != 0) hash ^= ClientQualifier.GetHashCode();
      if (ClientShortCode.Length != 0) hash ^= ClientShortCode.GetHashCode();
      if (InvestmentDecisionMakerQualifier != 0) hash ^= InvestmentDecisionMakerQualifier.GetHashCode();
      if (InvestmentDecisionMakerShortCode.Length != 0) hash ^= InvestmentDecisionMakerShortCode.GetHashCode();
      if (ExecutingTraderQualifier != 0) hash ^= ExecutingTraderQualifier.GetHashCode();
      if (ExecutingTraderShortCode.Length != 0) hash ^= ExecutingTraderShortCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NegDealNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NegDealNum);
      }
      if (NegDealTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NegDealTime);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Firmid);
      }
      if (Cpuserid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cpuserid);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cpfirmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Qty);
      }
      if (Matchref.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Matchref);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Yield);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Accruedint);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Value);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Price2);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Reporate);
      }
      if (Refundrate.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Refundrate);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClientCode);
      }
      if (Repoentry != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Repoentry);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Repoterm);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(BlockSecurities);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Uid);
      }
      if (WithdrawTime.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WithdrawTime);
      }
      if (NegDealDate.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(NegDealDate);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Balance);
      }
      if (OriginRepovalue.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(OriginRepovalue);
      }
      if (OriginQty.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(OriginQty);
      }
      if (OriginDiscount.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(OriginDiscount);
      }
      if (NegDealActivationDate.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(NegDealActivationDate);
      }
      if (NegDealActivationTime.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(NegDealActivationTime);
      }
      if (Quoteno.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(Quoteno);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ClassCode);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(BankAccId);
      }
      if (WithdrawDate.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WithdrawDate);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Linkedorder);
      }
      if (activationDateTime_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ActivationDateTime);
      }
      if (withdrawDateTime_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(WithdrawDateTime);
      }
      if (dateTime_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(DateTime);
      }
      if (Lseccode.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Lseccode);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(CanceledUid);
      }
      if (SystemRef.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SystemRef);
      }
      if (PriceCurrency.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(PriceCurrency);
      }
      if (OrderExchangeCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(OrderExchangeCode);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Extref);
      }
      if (Period.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Period);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NegDealNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NegDealNum);
      }
      if (NegDealTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NegDealTime);
      }
      if (Flags != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Brokerref);
      }
      if (Userid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Userid);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Firmid);
      }
      if (Cpuserid.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Cpuserid);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cpfirmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Account);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Qty);
      }
      if (Matchref.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Matchref);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (Yield.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Yield);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Accruedint);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Value);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Price2);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Reporate);
      }
      if (Refundrate.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Refundrate);
      }
      if (TransId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(TransId);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClientCode);
      }
      if (Repoentry != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Repoentry);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Repoterm);
      }
      if (StartDiscount.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(BlockSecurities);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Uid);
      }
      if (WithdrawTime.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(WithdrawTime);
      }
      if (NegDealDate.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(NegDealDate);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Balance);
      }
      if (OriginRepovalue.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(OriginRepovalue);
      }
      if (OriginQty.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(OriginQty);
      }
      if (OriginDiscount.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(OriginDiscount);
      }
      if (NegDealActivationDate.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(NegDealActivationDate);
      }
      if (NegDealActivationTime.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(NegDealActivationTime);
      }
      if (Quoteno.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(Quoteno);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(ClassCode);
      }
      if (BankAccId.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(BankAccId);
      }
      if (WithdrawDate.Length != 0) {
        output.WriteRawTag(226, 2);
        output.WriteString(WithdrawDate);
      }
      if (Linkedorder.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Linkedorder);
      }
      if (activationDateTime_ != null) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(ActivationDateTime);
      }
      if (withdrawDateTime_ != null) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(WithdrawDateTime);
      }
      if (dateTime_ != null) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(DateTime);
      }
      if (Lseccode.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Lseccode);
      }
      if (CanceledUid.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(CanceledUid);
      }
      if (SystemRef.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SystemRef);
      }
      if (PriceCurrency.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(PriceCurrency);
      }
      if (OrderExchangeCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(OrderExchangeCode);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Extref);
      }
      if (Period.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Period);
      }
      if (ClientQualifier != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (NegDealNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NegDealNum);
      }
      if (NegDealTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NegDealTime);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Cpuserid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpuserid);
      }
      if (Cpfirmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpfirmid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Matchref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Matchref);
      }
      if (Settlecode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Settlecode);
      }
      if (Yield.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yield);
      }
      if (Accruedint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Price2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price2);
      }
      if (Reporate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Reporate);
      }
      if (Refundrate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Refundrate);
      }
      if (TransId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TransId);
      }
      if (ClientCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Repoentry != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Repoentry);
      }
      if (Repovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repovalue);
      }
      if (Repo2Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repo2Value);
      }
      if (Repoterm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repoterm);
      }
      if (StartDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StartDiscount);
      }
      if (LowerDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BlockSecurities);
      }
      if (Uid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (WithdrawTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WithdrawTime);
      }
      if (NegDealDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NegDealDate);
      }
      if (Balance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (OriginRepovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OriginRepovalue);
      }
      if (OriginQty.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OriginQty);
      }
      if (OriginDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OriginDiscount);
      }
      if (NegDealActivationDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NegDealActivationDate);
      }
      if (NegDealActivationTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NegDealActivationTime);
      }
      if (Quoteno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Quoteno);
      }
      if (SettleCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (BankAccId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BankAccId);
      }
      if (WithdrawDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(WithdrawDate);
      }
      if (Linkedorder.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Linkedorder);
      }
      if (activationDateTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActivationDateTime);
      }
      if (withdrawDateTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithdrawDateTime);
      }
      if (dateTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DateTime);
      }
      if (Lseccode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Lseccode);
      }
      if (CanceledUid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CanceledUid);
      }
      if (SystemRef.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SystemRef);
      }
      if (PriceCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriceCurrency);
      }
      if (OrderExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderExchangeCode);
      }
      if (Extref.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Extref);
      }
      if (Period.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Period);
      }
      if (ClientQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClientQualifier);
      }
      if (ClientShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientShortCode);
      }
      if (InvestmentDecisionMakerQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(InvestmentDecisionMakerQualifier);
      }
      if (InvestmentDecisionMakerShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvestmentDecisionMakerShortCode);
      }
      if (ExecutingTraderQualifier != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExecutingTraderQualifier);
      }
      if (ExecutingTraderShortCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExecutingTraderShortCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NegDeal other) {
      if (other == null) {
        return;
      }
      if (other.NegDealNum != 0L) {
        NegDealNum = other.NegDealNum;
      }
      if (other.NegDealTime.Length != 0) {
        NegDealTime = other.NegDealTime;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Cpuserid.Length != 0) {
        Cpuserid = other.Cpuserid;
      }
      if (other.Cpfirmid.Length != 0) {
        Cpfirmid = other.Cpfirmid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Matchref.Length != 0) {
        Matchref = other.Matchref;
      }
      if (other.Settlecode.Length != 0) {
        Settlecode = other.Settlecode;
      }
      if (other.Yield.Length != 0) {
        Yield = other.Yield;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Price2.Length != 0) {
        Price2 = other.Price2;
      }
      if (other.Reporate.Length != 0) {
        Reporate = other.Reporate;
      }
      if (other.Refundrate.Length != 0) {
        Refundrate = other.Refundrate;
      }
      if (other.TransId.Length != 0) {
        TransId = other.TransId;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Repoentry != 0) {
        Repoentry = other.Repoentry;
      }
      if (other.Repovalue.Length != 0) {
        Repovalue = other.Repovalue;
      }
      if (other.Repo2Value.Length != 0) {
        Repo2Value = other.Repo2Value;
      }
      if (other.Repoterm.Length != 0) {
        Repoterm = other.Repoterm;
      }
      if (other.StartDiscount.Length != 0) {
        StartDiscount = other.StartDiscount;
      }
      if (other.LowerDiscount.Length != 0) {
        LowerDiscount = other.LowerDiscount;
      }
      if (other.UpperDiscount.Length != 0) {
        UpperDiscount = other.UpperDiscount;
      }
      if (other.BlockSecurities.Length != 0) {
        BlockSecurities = other.BlockSecurities;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.WithdrawTime.Length != 0) {
        WithdrawTime = other.WithdrawTime;
      }
      if (other.NegDealDate.Length != 0) {
        NegDealDate = other.NegDealDate;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.OriginRepovalue.Length != 0) {
        OriginRepovalue = other.OriginRepovalue;
      }
      if (other.OriginQty.Length != 0) {
        OriginQty = other.OriginQty;
      }
      if (other.OriginDiscount.Length != 0) {
        OriginDiscount = other.OriginDiscount;
      }
      if (other.NegDealActivationDate.Length != 0) {
        NegDealActivationDate = other.NegDealActivationDate;
      }
      if (other.NegDealActivationTime.Length != 0) {
        NegDealActivationTime = other.NegDealActivationTime;
      }
      if (other.Quoteno.Length != 0) {
        Quoteno = other.Quoteno;
      }
      if (other.SettleCurrency.Length != 0) {
        SettleCurrency = other.SettleCurrency;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.BankAccId.Length != 0) {
        BankAccId = other.BankAccId;
      }
      if (other.WithdrawDate.Length != 0) {
        WithdrawDate = other.WithdrawDate;
      }
      if (other.Linkedorder.Length != 0) {
        Linkedorder = other.Linkedorder;
      }
      if (other.activationDateTime_ != null) {
        if (activationDateTime_ == null) {
          ActivationDateTime = new global::Qlua.Structs.DateTimeEntry();
        }
        ActivationDateTime.MergeFrom(other.ActivationDateTime);
      }
      if (other.withdrawDateTime_ != null) {
        if (withdrawDateTime_ == null) {
          WithdrawDateTime = new global::Qlua.Structs.DateTimeEntry();
        }
        WithdrawDateTime.MergeFrom(other.WithdrawDateTime);
      }
      if (other.dateTime_ != null) {
        if (dateTime_ == null) {
          DateTime = new global::Qlua.Structs.DateTimeEntry();
        }
        DateTime.MergeFrom(other.DateTime);
      }
      if (other.Lseccode.Length != 0) {
        Lseccode = other.Lseccode;
      }
      if (other.CanceledUid.Length != 0) {
        CanceledUid = other.CanceledUid;
      }
      if (other.SystemRef.Length != 0) {
        SystemRef = other.SystemRef;
      }
      if (other.PriceCurrency.Length != 0) {
        PriceCurrency = other.PriceCurrency;
      }
      if (other.OrderExchangeCode.Length != 0) {
        OrderExchangeCode = other.OrderExchangeCode;
      }
      if (other.Extref.Length != 0) {
        Extref = other.Extref;
      }
      if (other.Period.Length != 0) {
        Period = other.Period;
      }
      if (other.ClientQualifier != 0) {
        ClientQualifier = other.ClientQualifier;
      }
      if (other.ClientShortCode.Length != 0) {
        ClientShortCode = other.ClientShortCode;
      }
      if (other.InvestmentDecisionMakerQualifier != 0) {
        InvestmentDecisionMakerQualifier = other.InvestmentDecisionMakerQualifier;
      }
      if (other.InvestmentDecisionMakerShortCode.Length != 0) {
        InvestmentDecisionMakerShortCode = other.InvestmentDecisionMakerShortCode;
      }
      if (other.ExecutingTraderQualifier != 0) {
        ExecutingTraderQualifier = other.ExecutingTraderQualifier;
      }
      if (other.ExecutingTraderShortCode.Length != 0) {
        ExecutingTraderShortCode = other.ExecutingTraderShortCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NegDealNum = input.ReadInt64();
            break;
          }
          case 18: {
            NegDealTime = input.ReadString();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            Brokerref = input.ReadString();
            break;
          }
          case 42: {
            Userid = input.ReadString();
            break;
          }
          case 50: {
            Firmid = input.ReadString();
            break;
          }
          case 58: {
            Cpuserid = input.ReadString();
            break;
          }
          case 66: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 74: {
            Account = input.ReadString();
            break;
          }
          case 82: {
            Price = input.ReadString();
            break;
          }
          case 88: {
            Qty = input.ReadInt32();
            break;
          }
          case 98: {
            Matchref = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            Yield = input.ReadString();
            break;
          }
          case 122: {
            Accruedint = input.ReadString();
            break;
          }
          case 130: {
            Value = input.ReadString();
            break;
          }
          case 138: {
            Price2 = input.ReadString();
            break;
          }
          case 146: {
            Reporate = input.ReadString();
            break;
          }
          case 154: {
            Refundrate = input.ReadString();
            break;
          }
          case 162: {
            TransId = input.ReadString();
            break;
          }
          case 170: {
            ClientCode = input.ReadString();
            break;
          }
          case 176: {
            Repoentry = input.ReadInt32();
            break;
          }
          case 186: {
            Repovalue = input.ReadString();
            break;
          }
          case 194: {
            Repo2Value = input.ReadString();
            break;
          }
          case 202: {
            Repoterm = input.ReadString();
            break;
          }
          case 210: {
            StartDiscount = input.ReadString();
            break;
          }
          case 218: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 226: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 234: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 242: {
            Uid = input.ReadString();
            break;
          }
          case 250: {
            WithdrawTime = input.ReadString();
            break;
          }
          case 258: {
            NegDealDate = input.ReadString();
            break;
          }
          case 266: {
            Balance = input.ReadString();
            break;
          }
          case 274: {
            OriginRepovalue = input.ReadString();
            break;
          }
          case 282: {
            OriginQty = input.ReadString();
            break;
          }
          case 290: {
            OriginDiscount = input.ReadString();
            break;
          }
          case 298: {
            NegDealActivationDate = input.ReadString();
            break;
          }
          case 306: {
            NegDealActivationTime = input.ReadString();
            break;
          }
          case 314: {
            Quoteno = input.ReadString();
            break;
          }
          case 322: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 330: {
            SecCode = input.ReadString();
            break;
          }
          case 338: {
            ClassCode = input.ReadString();
            break;
          }
          case 346: {
            BankAccId = input.ReadString();
            break;
          }
          case 354: {
            WithdrawDate = input.ReadString();
            break;
          }
          case 362: {
            Linkedorder = input.ReadString();
            break;
          }
          case 370: {
            if (activationDateTime_ == null) {
              ActivationDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(ActivationDateTime);
            break;
          }
          case 378: {
            if (withdrawDateTime_ == null) {
              WithdrawDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDateTime);
            break;
          }
          case 386: {
            if (dateTime_ == null) {
              DateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(DateTime);
            break;
          }
          case 394: {
            Lseccode = input.ReadString();
            break;
          }
          case 402: {
            CanceledUid = input.ReadString();
            break;
          }
          case 410: {
            SystemRef = input.ReadString();
            break;
          }
          case 418: {
            PriceCurrency = input.ReadString();
            break;
          }
          case 426: {
            OrderExchangeCode = input.ReadString();
            break;
          }
          case 434: {
            Extref = input.ReadString();
            break;
          }
          case 442: {
            Period = input.ReadString();
            break;
          }
          case 448: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 458: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 464: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 474: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 480: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 490: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NegDealNum = input.ReadInt64();
            break;
          }
          case 18: {
            NegDealTime = input.ReadString();
            break;
          }
          case 24: {
            Flags = input.ReadInt32();
            break;
          }
          case 34: {
            Brokerref = input.ReadString();
            break;
          }
          case 42: {
            Userid = input.ReadString();
            break;
          }
          case 50: {
            Firmid = input.ReadString();
            break;
          }
          case 58: {
            Cpuserid = input.ReadString();
            break;
          }
          case 66: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 74: {
            Account = input.ReadString();
            break;
          }
          case 82: {
            Price = input.ReadString();
            break;
          }
          case 88: {
            Qty = input.ReadInt32();
            break;
          }
          case 98: {
            Matchref = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            Yield = input.ReadString();
            break;
          }
          case 122: {
            Accruedint = input.ReadString();
            break;
          }
          case 130: {
            Value = input.ReadString();
            break;
          }
          case 138: {
            Price2 = input.ReadString();
            break;
          }
          case 146: {
            Reporate = input.ReadString();
            break;
          }
          case 154: {
            Refundrate = input.ReadString();
            break;
          }
          case 162: {
            TransId = input.ReadString();
            break;
          }
          case 170: {
            ClientCode = input.ReadString();
            break;
          }
          case 176: {
            Repoentry = input.ReadInt32();
            break;
          }
          case 186: {
            Repovalue = input.ReadString();
            break;
          }
          case 194: {
            Repo2Value = input.ReadString();
            break;
          }
          case 202: {
            Repoterm = input.ReadString();
            break;
          }
          case 210: {
            StartDiscount = input.ReadString();
            break;
          }
          case 218: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 226: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 234: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 242: {
            Uid = input.ReadString();
            break;
          }
          case 250: {
            WithdrawTime = input.ReadString();
            break;
          }
          case 258: {
            NegDealDate = input.ReadString();
            break;
          }
          case 266: {
            Balance = input.ReadString();
            break;
          }
          case 274: {
            OriginRepovalue = input.ReadString();
            break;
          }
          case 282: {
            OriginQty = input.ReadString();
            break;
          }
          case 290: {
            OriginDiscount = input.ReadString();
            break;
          }
          case 298: {
            NegDealActivationDate = input.ReadString();
            break;
          }
          case 306: {
            NegDealActivationTime = input.ReadString();
            break;
          }
          case 314: {
            Quoteno = input.ReadString();
            break;
          }
          case 322: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 330: {
            SecCode = input.ReadString();
            break;
          }
          case 338: {
            ClassCode = input.ReadString();
            break;
          }
          case 346: {
            BankAccId = input.ReadString();
            break;
          }
          case 354: {
            WithdrawDate = input.ReadString();
            break;
          }
          case 362: {
            Linkedorder = input.ReadString();
            break;
          }
          case 370: {
            if (activationDateTime_ == null) {
              ActivationDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(ActivationDateTime);
            break;
          }
          case 378: {
            if (withdrawDateTime_ == null) {
              WithdrawDateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(WithdrawDateTime);
            break;
          }
          case 386: {
            if (dateTime_ == null) {
              DateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(DateTime);
            break;
          }
          case 394: {
            Lseccode = input.ReadString();
            break;
          }
          case 402: {
            CanceledUid = input.ReadString();
            break;
          }
          case 410: {
            SystemRef = input.ReadString();
            break;
          }
          case 418: {
            PriceCurrency = input.ReadString();
            break;
          }
          case 426: {
            OrderExchangeCode = input.ReadString();
            break;
          }
          case 434: {
            Extref = input.ReadString();
            break;
          }
          case 442: {
            Period = input.ReadString();
            break;
          }
          case 448: {
            ClientQualifier = input.ReadInt32();
            break;
          }
          case 458: {
            ClientShortCode = input.ReadString();
            break;
          }
          case 464: {
            InvestmentDecisionMakerQualifier = input.ReadInt32();
            break;
          }
          case 474: {
            InvestmentDecisionMakerShortCode = input.ReadString();
            break;
          }
          case 480: {
            ExecutingTraderQualifier = input.ReadInt32();
            break;
          }
          case 490: {
            ExecutingTraderShortCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Сделки для исполнения
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class NegTrade : pb::IMessage<NegTrade>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NegTrade> _parser = new pb::MessageParser<NegTrade>(() => new NegTrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NegTrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegTrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegTrade(NegTrade other) : this() {
      tradeNum_ = other.tradeNum_;
      tradeDate_ = other.tradeDate_;
      settleDate_ = other.settleDate_;
      flags_ = other.flags_;
      brokerref_ = other.brokerref_;
      firmid_ = other.firmid_;
      account_ = other.account_;
      cpfirmid_ = other.cpfirmid_;
      cpaccount_ = other.cpaccount_;
      price_ = other.price_;
      qty_ = other.qty_;
      value_ = other.value_;
      settlecode_ = other.settlecode_;
      reportNum_ = other.reportNum_;
      cpreportNum_ = other.cpreportNum_;
      accruedint_ = other.accruedint_;
      repotradeno_ = other.repotradeno_;
      price1_ = other.price1_;
      reporate_ = other.reporate_;
      price2_ = other.price2_;
      clientCode_ = other.clientCode_;
      tsComission_ = other.tsComission_;
      balance_ = other.balance_;
      settleTime_ = other.settleTime_;
      amount_ = other.amount_;
      repovalue_ = other.repovalue_;
      repoterm_ = other.repoterm_;
      repo2Value_ = other.repo2Value_;
      returnValue_ = other.returnValue_;
      discount_ = other.discount_;
      lowerDiscount_ = other.lowerDiscount_;
      upperDiscount_ = other.upperDiscount_;
      blockSecurities_ = other.blockSecurities_;
      urgencyFlag_ = other.urgencyFlag_;
      type_ = other.type_;
      operationType_ = other.operationType_;
      expectedDiscount_ = other.expectedDiscount_;
      expectedQuantity_ = other.expectedQuantity_;
      expectedRepovalue_ = other.expectedRepovalue_;
      expectedRepo2Value_ = other.expectedRepo2Value_;
      expectedReturnValue_ = other.expectedReturnValue_;
      orderNum_ = other.orderNum_;
      reportTradeDate_ = other.reportTradeDate_;
      settled_ = other.settled_;
      clearingType_ = other.clearingType_;
      reportComission_ = other.reportComission_;
      couponPayment_ = other.couponPayment_;
      principalPayment_ = other.principalPayment_;
      principalPaymentDate_ = other.principalPaymentDate_;
      nextdaysettle_ = other.nextdaysettle_;
      settleCurrency_ = other.settleCurrency_;
      secCode_ = other.secCode_;
      classCode_ = other.classCode_;
      compval_ = other.compval_;
      parenttradeno_ = other.parenttradeno_;
      bankid_ = other.bankid_;
      bankaccid_ = other.bankaccid_;
      precisebalance_ = other.precisebalance_;
      confirmtime_ = other.confirmtime_;
      exFlags_ = other.exFlags_;
      confirmreport_ = other.confirmreport_;
      extref_ = other.extref_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NegTrade Clone() {
      return new NegTrade(this);
    }

    /// <summary>Field number for the "trade_num" field.</summary>
    public const int TradeNumFieldNumber = 1;
    private long tradeNum_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TradeNum {
      get { return tradeNum_; }
      set {
        tradeNum_ = value;
      }
    }

    /// <summary>Field number for the "trade_date" field.</summary>
    public const int TradeDateFieldNumber = 2;
    private string tradeDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TradeDate {
      get { return tradeDate_; }
      set {
        tradeDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_date" field.</summary>
    public const int SettleDateFieldNumber = 3;
    private string settleDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleDate {
      get { return settleDate_; }
      set {
        settleDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 5;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmid" field.</summary>
    public const int FirmidFieldNumber = 6;
    private string firmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firmid {
      get { return firmid_; }
      set {
        firmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 7;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpfirmid" field.</summary>
    public const int CpfirmidFieldNumber = 8;
    private string cpfirmid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cpfirmid {
      get { return cpfirmid_; }
      set {
        cpfirmid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpaccount" field.</summary>
    public const int CpaccountFieldNumber = 9;
    private string cpaccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cpaccount {
      get { return cpaccount_; }
      set {
        cpaccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 10;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qty" field.</summary>
    public const int QtyFieldNumber = 11;
    private int qty_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Qty {
      get { return qty_; }
      set {
        qty_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 12;
    private string value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settlecode" field.</summary>
    public const int SettlecodeFieldNumber = 13;
    private string settlecode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Settlecode {
      get { return settlecode_; }
      set {
        settlecode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_num" field.</summary>
    public const int ReportNumFieldNumber = 14;
    private string reportNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportNum {
      get { return reportNum_; }
      set {
        reportNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpreport_num" field.</summary>
    public const int CpreportNumFieldNumber = 15;
    private string cpreportNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CpreportNum {
      get { return cpreportNum_; }
      set {
        cpreportNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accruedint" field.</summary>
    public const int AccruedintFieldNumber = 16;
    private string accruedint_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Accruedint {
      get { return accruedint_; }
      set {
        accruedint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repotradeno" field.</summary>
    public const int RepotradenoFieldNumber = 17;
    private string repotradeno_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repotradeno {
      get { return repotradeno_; }
      set {
        repotradeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price1" field.</summary>
    public const int Price1FieldNumber = 18;
    private string price1_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price1 {
      get { return price1_; }
      set {
        price1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporate" field.</summary>
    public const int ReporateFieldNumber = 19;
    private string reporate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Reporate {
      get { return reporate_; }
      set {
        reporate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price2" field.</summary>
    public const int Price2FieldNumber = 20;
    private string price2_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price2 {
      get { return price2_; }
      set {
        price2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 21;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts_comission" field.</summary>
    public const int TsComissionFieldNumber = 22;
    private string tsComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TsComission {
      get { return tsComission_; }
      set {
        tsComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 23;
    private string balance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_time" field.</summary>
    public const int SettleTimeFieldNumber = 24;
    private string settleTime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleTime {
      get { return settleTime_; }
      set {
        settleTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 25;
    private string amount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Amount {
      get { return amount_; }
      set {
        amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repovalue" field.</summary>
    public const int RepovalueFieldNumber = 26;
    private string repovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repovalue {
      get { return repovalue_; }
      set {
        repovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repoterm" field.</summary>
    public const int RepotermFieldNumber = 27;
    private string repoterm_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repoterm {
      get { return repoterm_; }
      set {
        repoterm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repo2value" field.</summary>
    public const int Repo2ValueFieldNumber = 28;
    private string repo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Repo2Value {
      get { return repo2Value_; }
      set {
        repo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "return_value" field.</summary>
    public const int ReturnValueFieldNumber = 29;
    private string returnValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 30;
    private string discount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Discount {
      get { return discount_; }
      set {
        discount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lower_discount" field.</summary>
    public const int LowerDiscountFieldNumber = 31;
    private string lowerDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LowerDiscount {
      get { return lowerDiscount_; }
      set {
        lowerDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upper_discount" field.</summary>
    public const int UpperDiscountFieldNumber = 32;
    private string upperDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UpperDiscount {
      get { return upperDiscount_; }
      set {
        upperDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_securities" field.</summary>
    public const int BlockSecuritiesFieldNumber = 33;
    private string blockSecurities_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BlockSecurities {
      get { return blockSecurities_; }
      set {
        blockSecurities_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urgency_flag" field.</summary>
    public const int UrgencyFlagFieldNumber = 34;
    private string urgencyFlag_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UrgencyFlag {
      get { return urgencyFlag_; }
      set {
        urgencyFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 35;
    private int type_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "operation_type" field.</summary>
    public const int OperationTypeFieldNumber = 36;
    private int operationType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OperationType {
      get { return operationType_; }
      set {
        operationType_ = value;
      }
    }

    /// <summary>Field number for the "expected_discount" field.</summary>
    public const int ExpectedDiscountFieldNumber = 37;
    private string expectedDiscount_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpectedDiscount {
      get { return expectedDiscount_; }
      set {
        expectedDiscount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_quantity" field.</summary>
    public const int ExpectedQuantityFieldNumber = 38;
    private string expectedQuantity_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpectedQuantity {
      get { return expectedQuantity_; }
      set {
        expectedQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_repovalue" field.</summary>
    public const int ExpectedRepovalueFieldNumber = 39;
    private string expectedRepovalue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpectedRepovalue {
      get { return expectedRepovalue_; }
      set {
        expectedRepovalue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_repo2value" field.</summary>
    public const int ExpectedRepo2ValueFieldNumber = 40;
    private string expectedRepo2Value_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpectedRepo2Value {
      get { return expectedRepo2Value_; }
      set {
        expectedRepo2Value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_return_value" field.</summary>
    public const int ExpectedReturnValueFieldNumber = 41;
    private string expectedReturnValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpectedReturnValue {
      get { return expectedReturnValue_; }
      set {
        expectedReturnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_num" field.</summary>
    public const int OrderNumFieldNumber = 42;
    private string orderNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report_trade_date" field.</summary>
    public const int ReportTradeDateFieldNumber = 43;
    private string reportTradeDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportTradeDate {
      get { return reportTradeDate_; }
      set {
        reportTradeDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settled" field.</summary>
    public const int SettledFieldNumber = 44;
    private int settled_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Settled {
      get { return settled_; }
      set {
        settled_ = value;
      }
    }

    /// <summary>Field number for the "clearing_type" field.</summary>
    public const int ClearingTypeFieldNumber = 45;
    private int clearingType_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClearingType {
      get { return clearingType_; }
      set {
        clearingType_ = value;
      }
    }

    /// <summary>Field number for the "report_comission" field.</summary>
    public const int ReportComissionFieldNumber = 46;
    private string reportComission_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReportComission {
      get { return reportComission_; }
      set {
        reportComission_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coupon_payment" field.</summary>
    public const int CouponPaymentFieldNumber = 47;
    private string couponPayment_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CouponPayment {
      get { return couponPayment_; }
      set {
        couponPayment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "principal_payment" field.</summary>
    public const int PrincipalPaymentFieldNumber = 48;
    private string principalPayment_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrincipalPayment {
      get { return principalPayment_; }
      set {
        principalPayment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "principal_payment_date" field.</summary>
    public const int PrincipalPaymentDateFieldNumber = 49;
    private string principalPaymentDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PrincipalPaymentDate {
      get { return principalPaymentDate_; }
      set {
        principalPaymentDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nextdaysettle" field.</summary>
    public const int NextdaysettleFieldNumber = 50;
    private string nextdaysettle_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Nextdaysettle {
      get { return nextdaysettle_; }
      set {
        nextdaysettle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "settle_currency" field.</summary>
    public const int SettleCurrencyFieldNumber = 51;
    private string settleCurrency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SettleCurrency {
      get { return settleCurrency_; }
      set {
        settleCurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 52;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 53;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compval" field.</summary>
    public const int CompvalFieldNumber = 54;
    private string compval_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Compval {
      get { return compval_; }
      set {
        compval_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parenttradeno" field.</summary>
    public const int ParenttradenoFieldNumber = 55;
    private string parenttradeno_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Parenttradeno {
      get { return parenttradeno_; }
      set {
        parenttradeno_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bankid" field.</summary>
    public const int BankidFieldNumber = 56;
    private string bankid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Bankid {
      get { return bankid_; }
      set {
        bankid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bankaccid" field.</summary>
    public const int BankaccidFieldNumber = 57;
    private string bankaccid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Bankaccid {
      get { return bankaccid_; }
      set {
        bankaccid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "precisebalance" field.</summary>
    public const int PrecisebalanceFieldNumber = 58;
    private string precisebalance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Precisebalance {
      get { return precisebalance_; }
      set {
        precisebalance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "confirmtime" field.</summary>
    public const int ConfirmtimeFieldNumber = 59;
    private string confirmtime_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Confirmtime {
      get { return confirmtime_; }
      set {
        confirmtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ex_flags" field.</summary>
    public const int ExFlagsFieldNumber = 60;
    private int exFlags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExFlags {
      get { return exFlags_; }
      set {
        exFlags_ = value;
      }
    }

    /// <summary>Field number for the "confirmreport" field.</summary>
    public const int ConfirmreportFieldNumber = 61;
    private string confirmreport_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Confirmreport {
      get { return confirmreport_; }
      set {
        confirmreport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extref" field.</summary>
    public const int ExtrefFieldNumber = 62;
    private string extref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Extref {
      get { return extref_; }
      set {
        extref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NegTrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NegTrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeNum != other.TradeNum) return false;
      if (TradeDate != other.TradeDate) return false;
      if (SettleDate != other.SettleDate) return false;
      if (Flags != other.Flags) return false;
      if (Brokerref != other.Brokerref) return false;
      if (Firmid != other.Firmid) return false;
      if (Account != other.Account) return false;
      if (Cpfirmid != other.Cpfirmid) return false;
      if (Cpaccount != other.Cpaccount) return false;
      if (Price != other.Price) return false;
      if (Qty != other.Qty) return false;
      if (Value != other.Value) return false;
      if (Settlecode != other.Settlecode) return false;
      if (ReportNum != other.ReportNum) return false;
      if (CpreportNum != other.CpreportNum) return false;
      if (Accruedint != other.Accruedint) return false;
      if (Repotradeno != other.Repotradeno) return false;
      if (Price1 != other.Price1) return false;
      if (Reporate != other.Reporate) return false;
      if (Price2 != other.Price2) return false;
      if (ClientCode != other.ClientCode) return false;
      if (TsComission != other.TsComission) return false;
      if (Balance != other.Balance) return false;
      if (SettleTime != other.SettleTime) return false;
      if (Amount != other.Amount) return false;
      if (Repovalue != other.Repovalue) return false;
      if (Repoterm != other.Repoterm) return false;
      if (Repo2Value != other.Repo2Value) return false;
      if (ReturnValue != other.ReturnValue) return false;
      if (Discount != other.Discount) return false;
      if (LowerDiscount != other.LowerDiscount) return false;
      if (UpperDiscount != other.UpperDiscount) return false;
      if (BlockSecurities != other.BlockSecurities) return false;
      if (UrgencyFlag != other.UrgencyFlag) return false;
      if (Type != other.Type) return false;
      if (OperationType != other.OperationType) return false;
      if (ExpectedDiscount != other.ExpectedDiscount) return false;
      if (ExpectedQuantity != other.ExpectedQuantity) return false;
      if (ExpectedRepovalue != other.ExpectedRepovalue) return false;
      if (ExpectedRepo2Value != other.ExpectedRepo2Value) return false;
      if (ExpectedReturnValue != other.ExpectedReturnValue) return false;
      if (OrderNum != other.OrderNum) return false;
      if (ReportTradeDate != other.ReportTradeDate) return false;
      if (Settled != other.Settled) return false;
      if (ClearingType != other.ClearingType) return false;
      if (ReportComission != other.ReportComission) return false;
      if (CouponPayment != other.CouponPayment) return false;
      if (PrincipalPayment != other.PrincipalPayment) return false;
      if (PrincipalPaymentDate != other.PrincipalPaymentDate) return false;
      if (Nextdaysettle != other.Nextdaysettle) return false;
      if (SettleCurrency != other.SettleCurrency) return false;
      if (SecCode != other.SecCode) return false;
      if (ClassCode != other.ClassCode) return false;
      if (Compval != other.Compval) return false;
      if (Parenttradeno != other.Parenttradeno) return false;
      if (Bankid != other.Bankid) return false;
      if (Bankaccid != other.Bankaccid) return false;
      if (Precisebalance != other.Precisebalance) return false;
      if (Confirmtime != other.Confirmtime) return false;
      if (ExFlags != other.ExFlags) return false;
      if (Confirmreport != other.Confirmreport) return false;
      if (Extref != other.Extref) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeNum != 0L) hash ^= TradeNum.GetHashCode();
      if (TradeDate.Length != 0) hash ^= TradeDate.GetHashCode();
      if (SettleDate.Length != 0) hash ^= SettleDate.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (Firmid.Length != 0) hash ^= Firmid.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Cpfirmid.Length != 0) hash ^= Cpfirmid.GetHashCode();
      if (Cpaccount.Length != 0) hash ^= Cpaccount.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Qty != 0) hash ^= Qty.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Settlecode.Length != 0) hash ^= Settlecode.GetHashCode();
      if (ReportNum.Length != 0) hash ^= ReportNum.GetHashCode();
      if (CpreportNum.Length != 0) hash ^= CpreportNum.GetHashCode();
      if (Accruedint.Length != 0) hash ^= Accruedint.GetHashCode();
      if (Repotradeno.Length != 0) hash ^= Repotradeno.GetHashCode();
      if (Price1.Length != 0) hash ^= Price1.GetHashCode();
      if (Reporate.Length != 0) hash ^= Reporate.GetHashCode();
      if (Price2.Length != 0) hash ^= Price2.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (TsComission.Length != 0) hash ^= TsComission.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (SettleTime.Length != 0) hash ^= SettleTime.GetHashCode();
      if (Amount.Length != 0) hash ^= Amount.GetHashCode();
      if (Repovalue.Length != 0) hash ^= Repovalue.GetHashCode();
      if (Repoterm.Length != 0) hash ^= Repoterm.GetHashCode();
      if (Repo2Value.Length != 0) hash ^= Repo2Value.GetHashCode();
      if (ReturnValue.Length != 0) hash ^= ReturnValue.GetHashCode();
      if (Discount.Length != 0) hash ^= Discount.GetHashCode();
      if (LowerDiscount.Length != 0) hash ^= LowerDiscount.GetHashCode();
      if (UpperDiscount.Length != 0) hash ^= UpperDiscount.GetHashCode();
      if (BlockSecurities.Length != 0) hash ^= BlockSecurities.GetHashCode();
      if (UrgencyFlag.Length != 0) hash ^= UrgencyFlag.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (OperationType != 0) hash ^= OperationType.GetHashCode();
      if (ExpectedDiscount.Length != 0) hash ^= ExpectedDiscount.GetHashCode();
      if (ExpectedQuantity.Length != 0) hash ^= ExpectedQuantity.GetHashCode();
      if (ExpectedRepovalue.Length != 0) hash ^= ExpectedRepovalue.GetHashCode();
      if (ExpectedRepo2Value.Length != 0) hash ^= ExpectedRepo2Value.GetHashCode();
      if (ExpectedReturnValue.Length != 0) hash ^= ExpectedReturnValue.GetHashCode();
      if (OrderNum.Length != 0) hash ^= OrderNum.GetHashCode();
      if (ReportTradeDate.Length != 0) hash ^= ReportTradeDate.GetHashCode();
      if (Settled != 0) hash ^= Settled.GetHashCode();
      if (ClearingType != 0) hash ^= ClearingType.GetHashCode();
      if (ReportComission.Length != 0) hash ^= ReportComission.GetHashCode();
      if (CouponPayment.Length != 0) hash ^= CouponPayment.GetHashCode();
      if (PrincipalPayment.Length != 0) hash ^= PrincipalPayment.GetHashCode();
      if (PrincipalPaymentDate.Length != 0) hash ^= PrincipalPaymentDate.GetHashCode();
      if (Nextdaysettle.Length != 0) hash ^= Nextdaysettle.GetHashCode();
      if (SettleCurrency.Length != 0) hash ^= SettleCurrency.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (Compval.Length != 0) hash ^= Compval.GetHashCode();
      if (Parenttradeno.Length != 0) hash ^= Parenttradeno.GetHashCode();
      if (Bankid.Length != 0) hash ^= Bankid.GetHashCode();
      if (Bankaccid.Length != 0) hash ^= Bankaccid.GetHashCode();
      if (Precisebalance.Length != 0) hash ^= Precisebalance.GetHashCode();
      if (Confirmtime.Length != 0) hash ^= Confirmtime.GetHashCode();
      if (ExFlags != 0) hash ^= ExFlags.GetHashCode();
      if (Confirmreport.Length != 0) hash ^= Confirmreport.GetHashCode();
      if (Extref.Length != 0) hash ^= Extref.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (TradeDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TradeDate);
      }
      if (SettleDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SettleDate);
      }
      if (Flags != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Brokerref);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Account);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cpfirmid);
      }
      if (Cpaccount.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Cpaccount);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Value);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (ReportNum.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ReportNum);
      }
      if (CpreportNum.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CpreportNum);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Accruedint);
      }
      if (Repotradeno.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Repotradeno);
      }
      if (Price1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Price1);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Reporate);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Price2);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClientCode);
      }
      if (TsComission.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(TsComission);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Balance);
      }
      if (SettleTime.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(SettleTime);
      }
      if (Amount.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Amount);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Repovalue);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Repoterm);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Repo2Value);
      }
      if (ReturnValue.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ReturnValue);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Discount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(BlockSecurities);
      }
      if (UrgencyFlag.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(UrgencyFlag);
      }
      if (Type != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Type);
      }
      if (OperationType != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(OperationType);
      }
      if (ExpectedDiscount.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ExpectedDiscount);
      }
      if (ExpectedQuantity.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ExpectedQuantity);
      }
      if (ExpectedRepovalue.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ExpectedRepovalue);
      }
      if (ExpectedRepo2Value.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ExpectedRepo2Value);
      }
      if (ExpectedReturnValue.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(ExpectedReturnValue);
      }
      if (OrderNum.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(OrderNum);
      }
      if (ReportTradeDate.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(ReportTradeDate);
      }
      if (Settled != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(Settled);
      }
      if (ClearingType != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(ClearingType);
      }
      if (ReportComission.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(ReportComission);
      }
      if (CouponPayment.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(CouponPayment);
      }
      if (PrincipalPayment.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(PrincipalPayment);
      }
      if (PrincipalPaymentDate.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(PrincipalPaymentDate);
      }
      if (Nextdaysettle.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Nextdaysettle);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(ClassCode);
      }
      if (Compval.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Compval);
      }
      if (Parenttradeno.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Parenttradeno);
      }
      if (Bankid.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Bankid);
      }
      if (Bankaccid.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Bankaccid);
      }
      if (Precisebalance.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Precisebalance);
      }
      if (Confirmtime.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Confirmtime);
      }
      if (ExFlags != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ExFlags);
      }
      if (Confirmreport.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Confirmreport);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(Extref);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TradeNum != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TradeNum);
      }
      if (TradeDate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TradeDate);
      }
      if (SettleDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SettleDate);
      }
      if (Flags != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Flags);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Brokerref);
      }
      if (Firmid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Firmid);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Account);
      }
      if (Cpfirmid.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cpfirmid);
      }
      if (Cpaccount.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Cpaccount);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Price);
      }
      if (Qty != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Qty);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Value);
      }
      if (Settlecode.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Settlecode);
      }
      if (ReportNum.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ReportNum);
      }
      if (CpreportNum.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CpreportNum);
      }
      if (Accruedint.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Accruedint);
      }
      if (Repotradeno.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Repotradeno);
      }
      if (Price1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Price1);
      }
      if (Reporate.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Reporate);
      }
      if (Price2.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(Price2);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(ClientCode);
      }
      if (TsComission.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(TsComission);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Balance);
      }
      if (SettleTime.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(SettleTime);
      }
      if (Amount.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Amount);
      }
      if (Repovalue.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Repovalue);
      }
      if (Repoterm.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Repoterm);
      }
      if (Repo2Value.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Repo2Value);
      }
      if (ReturnValue.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ReturnValue);
      }
      if (Discount.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Discount);
      }
      if (LowerDiscount.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(BlockSecurities);
      }
      if (UrgencyFlag.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(UrgencyFlag);
      }
      if (Type != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Type);
      }
      if (OperationType != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(OperationType);
      }
      if (ExpectedDiscount.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ExpectedDiscount);
      }
      if (ExpectedQuantity.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(ExpectedQuantity);
      }
      if (ExpectedRepovalue.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(ExpectedRepovalue);
      }
      if (ExpectedRepo2Value.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(ExpectedRepo2Value);
      }
      if (ExpectedReturnValue.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(ExpectedReturnValue);
      }
      if (OrderNum.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(OrderNum);
      }
      if (ReportTradeDate.Length != 0) {
        output.WriteRawTag(218, 2);
        output.WriteString(ReportTradeDate);
      }
      if (Settled != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(Settled);
      }
      if (ClearingType != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(ClearingType);
      }
      if (ReportComission.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(ReportComission);
      }
      if (CouponPayment.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(CouponPayment);
      }
      if (PrincipalPayment.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(PrincipalPayment);
      }
      if (PrincipalPaymentDate.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(PrincipalPaymentDate);
      }
      if (Nextdaysettle.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Nextdaysettle);
      }
      if (SettleCurrency.Length != 0) {
        output.WriteRawTag(154, 3);
        output.WriteString(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(162, 3);
        output.WriteString(SecCode);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(170, 3);
        output.WriteString(ClassCode);
      }
      if (Compval.Length != 0) {
        output.WriteRawTag(178, 3);
        output.WriteString(Compval);
      }
      if (Parenttradeno.Length != 0) {
        output.WriteRawTag(186, 3);
        output.WriteString(Parenttradeno);
      }
      if (Bankid.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Bankid);
      }
      if (Bankaccid.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Bankaccid);
      }
      if (Precisebalance.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Precisebalance);
      }
      if (Confirmtime.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Confirmtime);
      }
      if (ExFlags != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(ExFlags);
      }
      if (Confirmreport.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Confirmreport);
      }
      if (Extref.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(Extref);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TradeNum != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TradeNum);
      }
      if (TradeDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeDate);
      }
      if (SettleDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleDate);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (Firmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firmid);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Cpfirmid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpfirmid);
      }
      if (Cpaccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cpaccount);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Qty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Qty);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Settlecode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Settlecode);
      }
      if (ReportNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReportNum);
      }
      if (CpreportNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpreportNum);
      }
      if (Accruedint.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Accruedint);
      }
      if (Repotradeno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repotradeno);
      }
      if (Price1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price1);
      }
      if (Reporate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Reporate);
      }
      if (Price2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Price2);
      }
      if (ClientCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (TsComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TsComission);
      }
      if (Balance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (SettleTime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleTime);
      }
      if (Amount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amount);
      }
      if (Repovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repovalue);
      }
      if (Repoterm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repoterm);
      }
      if (Repo2Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Repo2Value);
      }
      if (ReturnValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReturnValue);
      }
      if (Discount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Discount);
      }
      if (LowerDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LowerDiscount);
      }
      if (UpperDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UpperDiscount);
      }
      if (BlockSecurities.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(BlockSecurities);
      }
      if (UrgencyFlag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UrgencyFlag);
      }
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (OperationType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OperationType);
      }
      if (ExpectedDiscount.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpectedDiscount);
      }
      if (ExpectedQuantity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpectedQuantity);
      }
      if (ExpectedRepovalue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpectedRepovalue);
      }
      if (ExpectedRepo2Value.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpectedRepo2Value);
      }
      if (ExpectedReturnValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpectedReturnValue);
      }
      if (OrderNum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OrderNum);
      }
      if (ReportTradeDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReportTradeDate);
      }
      if (Settled != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Settled);
      }
      if (ClearingType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ClearingType);
      }
      if (ReportComission.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ReportComission);
      }
      if (CouponPayment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CouponPayment);
      }
      if (PrincipalPayment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrincipalPayment);
      }
      if (PrincipalPaymentDate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PrincipalPaymentDate);
      }
      if (Nextdaysettle.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nextdaysettle);
      }
      if (SettleCurrency.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SettleCurrency);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (Compval.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Compval);
      }
      if (Parenttradeno.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Parenttradeno);
      }
      if (Bankid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Bankid);
      }
      if (Bankaccid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Bankaccid);
      }
      if (Precisebalance.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Precisebalance);
      }
      if (Confirmtime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Confirmtime);
      }
      if (ExFlags != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExFlags);
      }
      if (Confirmreport.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Confirmreport);
      }
      if (Extref.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Extref);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NegTrade other) {
      if (other == null) {
        return;
      }
      if (other.TradeNum != 0L) {
        TradeNum = other.TradeNum;
      }
      if (other.TradeDate.Length != 0) {
        TradeDate = other.TradeDate;
      }
      if (other.SettleDate.Length != 0) {
        SettleDate = other.SettleDate;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.Firmid.Length != 0) {
        Firmid = other.Firmid;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Cpfirmid.Length != 0) {
        Cpfirmid = other.Cpfirmid;
      }
      if (other.Cpaccount.Length != 0) {
        Cpaccount = other.Cpaccount;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Qty != 0) {
        Qty = other.Qty;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Settlecode.Length != 0) {
        Settlecode = other.Settlecode;
      }
      if (other.ReportNum.Length != 0) {
        ReportNum = other.ReportNum;
      }
      if (other.CpreportNum.Length != 0) {
        CpreportNum = other.CpreportNum;
      }
      if (other.Accruedint.Length != 0) {
        Accruedint = other.Accruedint;
      }
      if (other.Repotradeno.Length != 0) {
        Repotradeno = other.Repotradeno;
      }
      if (other.Price1.Length != 0) {
        Price1 = other.Price1;
      }
      if (other.Reporate.Length != 0) {
        Reporate = other.Reporate;
      }
      if (other.Price2.Length != 0) {
        Price2 = other.Price2;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.TsComission.Length != 0) {
        TsComission = other.TsComission;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.SettleTime.Length != 0) {
        SettleTime = other.SettleTime;
      }
      if (other.Amount.Length != 0) {
        Amount = other.Amount;
      }
      if (other.Repovalue.Length != 0) {
        Repovalue = other.Repovalue;
      }
      if (other.Repoterm.Length != 0) {
        Repoterm = other.Repoterm;
      }
      if (other.Repo2Value.Length != 0) {
        Repo2Value = other.Repo2Value;
      }
      if (other.ReturnValue.Length != 0) {
        ReturnValue = other.ReturnValue;
      }
      if (other.Discount.Length != 0) {
        Discount = other.Discount;
      }
      if (other.LowerDiscount.Length != 0) {
        LowerDiscount = other.LowerDiscount;
      }
      if (other.UpperDiscount.Length != 0) {
        UpperDiscount = other.UpperDiscount;
      }
      if (other.BlockSecurities.Length != 0) {
        BlockSecurities = other.BlockSecurities;
      }
      if (other.UrgencyFlag.Length != 0) {
        UrgencyFlag = other.UrgencyFlag;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.OperationType != 0) {
        OperationType = other.OperationType;
      }
      if (other.ExpectedDiscount.Length != 0) {
        ExpectedDiscount = other.ExpectedDiscount;
      }
      if (other.ExpectedQuantity.Length != 0) {
        ExpectedQuantity = other.ExpectedQuantity;
      }
      if (other.ExpectedRepovalue.Length != 0) {
        ExpectedRepovalue = other.ExpectedRepovalue;
      }
      if (other.ExpectedRepo2Value.Length != 0) {
        ExpectedRepo2Value = other.ExpectedRepo2Value;
      }
      if (other.ExpectedReturnValue.Length != 0) {
        ExpectedReturnValue = other.ExpectedReturnValue;
      }
      if (other.OrderNum.Length != 0) {
        OrderNum = other.OrderNum;
      }
      if (other.ReportTradeDate.Length != 0) {
        ReportTradeDate = other.ReportTradeDate;
      }
      if (other.Settled != 0) {
        Settled = other.Settled;
      }
      if (other.ClearingType != 0) {
        ClearingType = other.ClearingType;
      }
      if (other.ReportComission.Length != 0) {
        ReportComission = other.ReportComission;
      }
      if (other.CouponPayment.Length != 0) {
        CouponPayment = other.CouponPayment;
      }
      if (other.PrincipalPayment.Length != 0) {
        PrincipalPayment = other.PrincipalPayment;
      }
      if (other.PrincipalPaymentDate.Length != 0) {
        PrincipalPaymentDate = other.PrincipalPaymentDate;
      }
      if (other.Nextdaysettle.Length != 0) {
        Nextdaysettle = other.Nextdaysettle;
      }
      if (other.SettleCurrency.Length != 0) {
        SettleCurrency = other.SettleCurrency;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.Compval.Length != 0) {
        Compval = other.Compval;
      }
      if (other.Parenttradeno.Length != 0) {
        Parenttradeno = other.Parenttradeno;
      }
      if (other.Bankid.Length != 0) {
        Bankid = other.Bankid;
      }
      if (other.Bankaccid.Length != 0) {
        Bankaccid = other.Bankaccid;
      }
      if (other.Precisebalance.Length != 0) {
        Precisebalance = other.Precisebalance;
      }
      if (other.Confirmtime.Length != 0) {
        Confirmtime = other.Confirmtime;
      }
      if (other.ExFlags != 0) {
        ExFlags = other.ExFlags;
      }
      if (other.Confirmreport.Length != 0) {
        Confirmreport = other.Confirmreport;
      }
      if (other.Extref.Length != 0) {
        Extref = other.Extref;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 18: {
            TradeDate = input.ReadString();
            break;
          }
          case 26: {
            SettleDate = input.ReadString();
            break;
          }
          case 32: {
            Flags = input.ReadInt32();
            break;
          }
          case 42: {
            Brokerref = input.ReadString();
            break;
          }
          case 50: {
            Firmid = input.ReadString();
            break;
          }
          case 58: {
            Account = input.ReadString();
            break;
          }
          case 66: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 74: {
            Cpaccount = input.ReadString();
            break;
          }
          case 82: {
            Price = input.ReadString();
            break;
          }
          case 88: {
            Qty = input.ReadInt32();
            break;
          }
          case 98: {
            Value = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            ReportNum = input.ReadString();
            break;
          }
          case 122: {
            CpreportNum = input.ReadString();
            break;
          }
          case 130: {
            Accruedint = input.ReadString();
            break;
          }
          case 138: {
            Repotradeno = input.ReadString();
            break;
          }
          case 146: {
            Price1 = input.ReadString();
            break;
          }
          case 154: {
            Reporate = input.ReadString();
            break;
          }
          case 162: {
            Price2 = input.ReadString();
            break;
          }
          case 170: {
            ClientCode = input.ReadString();
            break;
          }
          case 178: {
            TsComission = input.ReadString();
            break;
          }
          case 186: {
            Balance = input.ReadString();
            break;
          }
          case 194: {
            SettleTime = input.ReadString();
            break;
          }
          case 202: {
            Amount = input.ReadString();
            break;
          }
          case 210: {
            Repovalue = input.ReadString();
            break;
          }
          case 218: {
            Repoterm = input.ReadString();
            break;
          }
          case 226: {
            Repo2Value = input.ReadString();
            break;
          }
          case 234: {
            ReturnValue = input.ReadString();
            break;
          }
          case 242: {
            Discount = input.ReadString();
            break;
          }
          case 250: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 258: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 266: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 274: {
            UrgencyFlag = input.ReadString();
            break;
          }
          case 280: {
            Type = input.ReadInt32();
            break;
          }
          case 288: {
            OperationType = input.ReadInt32();
            break;
          }
          case 298: {
            ExpectedDiscount = input.ReadString();
            break;
          }
          case 306: {
            ExpectedQuantity = input.ReadString();
            break;
          }
          case 314: {
            ExpectedRepovalue = input.ReadString();
            break;
          }
          case 322: {
            ExpectedRepo2Value = input.ReadString();
            break;
          }
          case 330: {
            ExpectedReturnValue = input.ReadString();
            break;
          }
          case 338: {
            OrderNum = input.ReadString();
            break;
          }
          case 346: {
            ReportTradeDate = input.ReadString();
            break;
          }
          case 352: {
            Settled = input.ReadInt32();
            break;
          }
          case 360: {
            ClearingType = input.ReadInt32();
            break;
          }
          case 370: {
            ReportComission = input.ReadString();
            break;
          }
          case 378: {
            CouponPayment = input.ReadString();
            break;
          }
          case 386: {
            PrincipalPayment = input.ReadString();
            break;
          }
          case 394: {
            PrincipalPaymentDate = input.ReadString();
            break;
          }
          case 402: {
            Nextdaysettle = input.ReadString();
            break;
          }
          case 410: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 418: {
            SecCode = input.ReadString();
            break;
          }
          case 426: {
            ClassCode = input.ReadString();
            break;
          }
          case 434: {
            Compval = input.ReadString();
            break;
          }
          case 442: {
            Parenttradeno = input.ReadString();
            break;
          }
          case 450: {
            Bankid = input.ReadString();
            break;
          }
          case 458: {
            Bankaccid = input.ReadString();
            break;
          }
          case 466: {
            Precisebalance = input.ReadString();
            break;
          }
          case 474: {
            Confirmtime = input.ReadString();
            break;
          }
          case 480: {
            ExFlags = input.ReadInt32();
            break;
          }
          case 490: {
            Confirmreport = input.ReadString();
            break;
          }
          case 498: {
            Extref = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TradeNum = input.ReadInt64();
            break;
          }
          case 18: {
            TradeDate = input.ReadString();
            break;
          }
          case 26: {
            SettleDate = input.ReadString();
            break;
          }
          case 32: {
            Flags = input.ReadInt32();
            break;
          }
          case 42: {
            Brokerref = input.ReadString();
            break;
          }
          case 50: {
            Firmid = input.ReadString();
            break;
          }
          case 58: {
            Account = input.ReadString();
            break;
          }
          case 66: {
            Cpfirmid = input.ReadString();
            break;
          }
          case 74: {
            Cpaccount = input.ReadString();
            break;
          }
          case 82: {
            Price = input.ReadString();
            break;
          }
          case 88: {
            Qty = input.ReadInt32();
            break;
          }
          case 98: {
            Value = input.ReadString();
            break;
          }
          case 106: {
            Settlecode = input.ReadString();
            break;
          }
          case 114: {
            ReportNum = input.ReadString();
            break;
          }
          case 122: {
            CpreportNum = input.ReadString();
            break;
          }
          case 130: {
            Accruedint = input.ReadString();
            break;
          }
          case 138: {
            Repotradeno = input.ReadString();
            break;
          }
          case 146: {
            Price1 = input.ReadString();
            break;
          }
          case 154: {
            Reporate = input.ReadString();
            break;
          }
          case 162: {
            Price2 = input.ReadString();
            break;
          }
          case 170: {
            ClientCode = input.ReadString();
            break;
          }
          case 178: {
            TsComission = input.ReadString();
            break;
          }
          case 186: {
            Balance = input.ReadString();
            break;
          }
          case 194: {
            SettleTime = input.ReadString();
            break;
          }
          case 202: {
            Amount = input.ReadString();
            break;
          }
          case 210: {
            Repovalue = input.ReadString();
            break;
          }
          case 218: {
            Repoterm = input.ReadString();
            break;
          }
          case 226: {
            Repo2Value = input.ReadString();
            break;
          }
          case 234: {
            ReturnValue = input.ReadString();
            break;
          }
          case 242: {
            Discount = input.ReadString();
            break;
          }
          case 250: {
            LowerDiscount = input.ReadString();
            break;
          }
          case 258: {
            UpperDiscount = input.ReadString();
            break;
          }
          case 266: {
            BlockSecurities = input.ReadString();
            break;
          }
          case 274: {
            UrgencyFlag = input.ReadString();
            break;
          }
          case 280: {
            Type = input.ReadInt32();
            break;
          }
          case 288: {
            OperationType = input.ReadInt32();
            break;
          }
          case 298: {
            ExpectedDiscount = input.ReadString();
            break;
          }
          case 306: {
            ExpectedQuantity = input.ReadString();
            break;
          }
          case 314: {
            ExpectedRepovalue = input.ReadString();
            break;
          }
          case 322: {
            ExpectedRepo2Value = input.ReadString();
            break;
          }
          case 330: {
            ExpectedReturnValue = input.ReadString();
            break;
          }
          case 338: {
            OrderNum = input.ReadString();
            break;
          }
          case 346: {
            ReportTradeDate = input.ReadString();
            break;
          }
          case 352: {
            Settled = input.ReadInt32();
            break;
          }
          case 360: {
            ClearingType = input.ReadInt32();
            break;
          }
          case 370: {
            ReportComission = input.ReadString();
            break;
          }
          case 378: {
            CouponPayment = input.ReadString();
            break;
          }
          case 386: {
            PrincipalPayment = input.ReadString();
            break;
          }
          case 394: {
            PrincipalPaymentDate = input.ReadString();
            break;
          }
          case 402: {
            Nextdaysettle = input.ReadString();
            break;
          }
          case 410: {
            SettleCurrency = input.ReadString();
            break;
          }
          case 418: {
            SecCode = input.ReadString();
            break;
          }
          case 426: {
            ClassCode = input.ReadString();
            break;
          }
          case 434: {
            Compval = input.ReadString();
            break;
          }
          case 442: {
            Parenttradeno = input.ReadString();
            break;
          }
          case 450: {
            Bankid = input.ReadString();
            break;
          }
          case 458: {
            Bankaccid = input.ReadString();
            break;
          }
          case 466: {
            Precisebalance = input.ReadString();
            break;
          }
          case 474: {
            Confirmtime = input.ReadString();
            break;
          }
          case 480: {
            ExFlags = input.ReadInt32();
            break;
          }
          case 490: {
            Confirmreport = input.ReadString();
            break;
          }
          case 498: {
            Extref = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Инструменты
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Security : pb::IMessage<Security>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Security> _parser = new pb::MessageParser<Security>(() => new Security());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Security> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Security() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Security(Security other) : this() {
      code_ = other.code_;
      name_ = other.name_;
      shortName_ = other.shortName_;
      classCode_ = other.classCode_;
      className_ = other.className_;
      faceValue_ = other.faceValue_;
      faceUnit_ = other.faceUnit_;
      scale_ = other.scale_;
      matDate_ = other.matDate_;
      lotSize_ = other.lotSize_;
      isinCode_ = other.isinCode_;
      minPriceStep_ = other.minPriceStep_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Security Clone() {
      return new Security(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_name" field.</summary>
    public const int ShortNameFieldNumber = 3;
    private string shortName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShortName {
      get { return shortName_; }
      set {
        shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 4;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 5;
    private string className_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "face_value" field.</summary>
    public const int FaceValueFieldNumber = 6;
    private string faceValue_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FaceValue {
      get { return faceValue_; }
      set {
        faceValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "face_unit" field.</summary>
    public const int FaceUnitFieldNumber = 7;
    private string faceUnit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FaceUnit {
      get { return faceUnit_; }
      set {
        faceUnit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 8;
    private string scale_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Scale {
      get { return scale_; }
      set {
        scale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mat_date" field.</summary>
    public const int MatDateFieldNumber = 9;
    private string matDate_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MatDate {
      get { return matDate_; }
      set {
        matDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lot_size" field.</summary>
    public const int LotSizeFieldNumber = 10;
    private string lotSize_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LotSize {
      get { return lotSize_; }
      set {
        lotSize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isin_code" field.</summary>
    public const int IsinCodeFieldNumber = 11;
    private string isinCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IsinCode {
      get { return isinCode_; }
      set {
        isinCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_price_step" field.</summary>
    public const int MinPriceStepFieldNumber = 12;
    private string minPriceStep_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MinPriceStep {
      get { return minPriceStep_; }
      set {
        minPriceStep_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Security);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Security other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (ShortName != other.ShortName) return false;
      if (ClassCode != other.ClassCode) return false;
      if (ClassName != other.ClassName) return false;
      if (FaceValue != other.FaceValue) return false;
      if (FaceUnit != other.FaceUnit) return false;
      if (Scale != other.Scale) return false;
      if (MatDate != other.MatDate) return false;
      if (LotSize != other.LotSize) return false;
      if (IsinCode != other.IsinCode) return false;
      if (MinPriceStep != other.MinPriceStep) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortName.Length != 0) hash ^= ShortName.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (FaceValue.Length != 0) hash ^= FaceValue.GetHashCode();
      if (FaceUnit.Length != 0) hash ^= FaceUnit.GetHashCode();
      if (Scale.Length != 0) hash ^= Scale.GetHashCode();
      if (MatDate.Length != 0) hash ^= MatDate.GetHashCode();
      if (LotSize.Length != 0) hash ^= LotSize.GetHashCode();
      if (IsinCode.Length != 0) hash ^= IsinCode.GetHashCode();
      if (MinPriceStep.Length != 0) hash ^= MinPriceStep.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShortName);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassName);
      }
      if (FaceValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FaceValue);
      }
      if (FaceUnit.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FaceUnit);
      }
      if (Scale.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Scale);
      }
      if (MatDate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MatDate);
      }
      if (LotSize.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LotSize);
      }
      if (IsinCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IsinCode);
      }
      if (MinPriceStep.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MinPriceStep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ShortName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ShortName);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClassCode);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ClassName);
      }
      if (FaceValue.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FaceValue);
      }
      if (FaceUnit.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FaceUnit);
      }
      if (Scale.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Scale);
      }
      if (MatDate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MatDate);
      }
      if (LotSize.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LotSize);
      }
      if (IsinCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IsinCode);
      }
      if (MinPriceStep.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MinPriceStep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
      }
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (FaceValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaceValue);
      }
      if (FaceUnit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FaceUnit);
      }
      if (Scale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scale);
      }
      if (MatDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatDate);
      }
      if (LotSize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LotSize);
      }
      if (IsinCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IsinCode);
      }
      if (MinPriceStep.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MinPriceStep);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Security other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortName.Length != 0) {
        ShortName = other.ShortName;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.FaceValue.Length != 0) {
        FaceValue = other.FaceValue;
      }
      if (other.FaceUnit.Length != 0) {
        FaceUnit = other.FaceUnit;
      }
      if (other.Scale.Length != 0) {
        Scale = other.Scale;
      }
      if (other.MatDate.Length != 0) {
        MatDate = other.MatDate;
      }
      if (other.LotSize.Length != 0) {
        LotSize = other.LotSize;
      }
      if (other.IsinCode.Length != 0) {
        IsinCode = other.IsinCode;
      }
      if (other.MinPriceStep.Length != 0) {
        MinPriceStep = other.MinPriceStep;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ShortName = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            ClassName = input.ReadString();
            break;
          }
          case 50: {
            FaceValue = input.ReadString();
            break;
          }
          case 58: {
            FaceUnit = input.ReadString();
            break;
          }
          case 66: {
            Scale = input.ReadString();
            break;
          }
          case 74: {
            MatDate = input.ReadString();
            break;
          }
          case 82: {
            LotSize = input.ReadString();
            break;
          }
          case 90: {
            IsinCode = input.ReadString();
            break;
          }
          case 98: {
            MinPriceStep = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ShortName = input.ReadString();
            break;
          }
          case 34: {
            ClassCode = input.ReadString();
            break;
          }
          case 42: {
            ClassName = input.ReadString();
            break;
          }
          case 50: {
            FaceValue = input.ReadString();
            break;
          }
          case 58: {
            FaceUnit = input.ReadString();
            break;
          }
          case 66: {
            Scale = input.ReadString();
            break;
          }
          case 74: {
            MatDate = input.ReadString();
            break;
          }
          case 82: {
            LotSize = input.ReadString();
            break;
          }
          case 90: {
            IsinCode = input.ReadString();
            break;
          }
          case 98: {
            MinPriceStep = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Свечки графика
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CandleEntry : pb::IMessage<CandleEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CandleEntry> _parser = new pb::MessageParser<CandleEntry>(() => new CandleEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CandleEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CandleEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CandleEntry(CandleEntry other) : this() {
      open_ = other.open_;
      close_ = other.close_;
      high_ = other.high_;
      low_ = other.low_;
      volume_ = other.volume_;
      datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
      doesExist_ = other.doesExist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CandleEntry Clone() {
      return new CandleEntry(this);
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 1;
    private string open_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Open {
      get { return open_; }
      set {
        open_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 2;
    private string close_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Close {
      get { return close_; }
      set {
        close_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 3;
    private string high_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string High {
      get { return high_; }
      set {
        high_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private string low_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Low {
      get { return low_; }
      set {
        low_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 5;
    private string volume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Volume {
      get { return volume_; }
      set {
        volume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime" field.</summary>
    public const int DatetimeFieldNumber = 6;
    private global::Qlua.Structs.DateTimeEntry datetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry Datetime {
      get { return datetime_; }
      set {
        datetime_ = value;
      }
    }

    /// <summary>Field number for the "does_exist" field.</summary>
    public const int DoesExistFieldNumber = 7;
    private int doesExist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DoesExist {
      get { return doesExist_; }
      set {
        doesExist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CandleEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CandleEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Open != other.Open) return false;
      if (Close != other.Close) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Volume != other.Volume) return false;
      if (!object.Equals(Datetime, other.Datetime)) return false;
      if (DoesExist != other.DoesExist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Open.Length != 0) hash ^= Open.GetHashCode();
      if (Close.Length != 0) hash ^= Close.GetHashCode();
      if (High.Length != 0) hash ^= High.GetHashCode();
      if (Low.Length != 0) hash ^= Low.GetHashCode();
      if (Volume.Length != 0) hash ^= Volume.GetHashCode();
      if (datetime_ != null) hash ^= Datetime.GetHashCode();
      if (DoesExist != 0) hash ^= DoesExist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Open.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Open);
      }
      if (Close.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Close);
      }
      if (High.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(High);
      }
      if (Low.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Low);
      }
      if (Volume.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Volume);
      }
      if (datetime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Datetime);
      }
      if (DoesExist != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DoesExist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Open.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Open);
      }
      if (Close.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Close);
      }
      if (High.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(High);
      }
      if (Low.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Low);
      }
      if (Volume.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Volume);
      }
      if (datetime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Datetime);
      }
      if (DoesExist != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DoesExist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Open.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Open);
      }
      if (Close.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Close);
      }
      if (High.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(High);
      }
      if (Low.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Low);
      }
      if (Volume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Volume);
      }
      if (datetime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
      }
      if (DoesExist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DoesExist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CandleEntry other) {
      if (other == null) {
        return;
      }
      if (other.Open.Length != 0) {
        Open = other.Open;
      }
      if (other.Close.Length != 0) {
        Close = other.Close;
      }
      if (other.High.Length != 0) {
        High = other.High;
      }
      if (other.Low.Length != 0) {
        Low = other.Low;
      }
      if (other.Volume.Length != 0) {
        Volume = other.Volume;
      }
      if (other.datetime_ != null) {
        if (datetime_ == null) {
          Datetime = new global::Qlua.Structs.DateTimeEntry();
        }
        Datetime.MergeFrom(other.Datetime);
      }
      if (other.DoesExist != 0) {
        DoesExist = other.DoesExist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Open = input.ReadString();
            break;
          }
          case 18: {
            Close = input.ReadString();
            break;
          }
          case 26: {
            High = input.ReadString();
            break;
          }
          case 34: {
            Low = input.ReadString();
            break;
          }
          case 42: {
            Volume = input.ReadString();
            break;
          }
          case 50: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 56: {
            DoesExist = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Open = input.ReadString();
            break;
          }
          case 18: {
            Close = input.ReadString();
            break;
          }
          case 26: {
            High = input.ReadString();
            break;
          }
          case 34: {
            Low = input.ReadString();
            break;
          }
          case 42: {
            Volume = input.ReadString();
            break;
          }
          case 50: {
            if (datetime_ == null) {
              Datetime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(Datetime);
            break;
          }
          case 56: {
            DoesExist = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Формат даты и времени, используемый в таблицах
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DateTimeEntry : pb::IMessage<DateTimeEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DateTimeEntry> _parser = new pb::MessageParser<DateTimeEntry>(() => new DateTimeEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DateTimeEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DateTimeEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DateTimeEntry(DateTimeEntry other) : this() {
      mcs_ = other.mcs_;
      ms_ = other.ms_;
      sec_ = other.sec_;
      min_ = other.min_;
      hour_ = other.hour_;
      day_ = other.day_;
      weekDay_ = other.weekDay_;
      month_ = other.month_;
      year_ = other.year_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DateTimeEntry Clone() {
      return new DateTimeEntry(this);
    }

    /// <summary>Field number for the "mcs" field.</summary>
    public const int McsFieldNumber = 1;
    private int mcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Mcs {
      get { return mcs_; }
      set {
        mcs_ = value;
      }
    }

    /// <summary>Field number for the "ms" field.</summary>
    public const int MsFieldNumber = 2;
    private int ms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ms {
      get { return ms_; }
      set {
        ms_ = value;
      }
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 3;
    private int sec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Sec {
      get { return sec_; }
      set {
        sec_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 4;
    private int min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 5;
    private int hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 6;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "week_day" field.</summary>
    public const int WeekDayFieldNumber = 7;
    private int weekDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeekDay {
      get { return weekDay_; }
      set {
        weekDay_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 8;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 9;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DateTimeEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DateTimeEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mcs != other.Mcs) return false;
      if (Ms != other.Ms) return false;
      if (Sec != other.Sec) return false;
      if (Min != other.Min) return false;
      if (Hour != other.Hour) return false;
      if (Day != other.Day) return false;
      if (WeekDay != other.WeekDay) return false;
      if (Month != other.Month) return false;
      if (Year != other.Year) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Mcs != 0) hash ^= Mcs.GetHashCode();
      if (Ms != 0) hash ^= Ms.GetHashCode();
      if (Sec != 0) hash ^= Sec.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (WeekDay != 0) hash ^= WeekDay.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mcs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mcs);
      }
      if (Ms != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ms);
      }
      if (Sec != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sec);
      }
      if (Min != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Min);
      }
      if (Hour != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hour);
      }
      if (Day != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Day);
      }
      if (WeekDay != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WeekDay);
      }
      if (Month != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Month);
      }
      if (Year != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Year);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mcs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mcs);
      }
      if (Ms != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ms);
      }
      if (Sec != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sec);
      }
      if (Min != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Min);
      }
      if (Hour != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hour);
      }
      if (Day != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Day);
      }
      if (WeekDay != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WeekDay);
      }
      if (Month != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Month);
      }
      if (Year != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Year);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Mcs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mcs);
      }
      if (Ms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ms);
      }
      if (Sec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Min);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (WeekDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekDay);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DateTimeEntry other) {
      if (other == null) {
        return;
      }
      if (other.Mcs != 0) {
        Mcs = other.Mcs;
      }
      if (other.Ms != 0) {
        Ms = other.Ms;
      }
      if (other.Sec != 0) {
        Sec = other.Sec;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.WeekDay != 0) {
        WeekDay = other.WeekDay;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mcs = input.ReadInt32();
            break;
          }
          case 16: {
            Ms = input.ReadInt32();
            break;
          }
          case 24: {
            Sec = input.ReadInt32();
            break;
          }
          case 32: {
            Min = input.ReadInt32();
            break;
          }
          case 40: {
            Hour = input.ReadInt32();
            break;
          }
          case 48: {
            Day = input.ReadInt32();
            break;
          }
          case 56: {
            WeekDay = input.ReadInt32();
            break;
          }
          case 64: {
            Month = input.ReadInt32();
            break;
          }
          case 72: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mcs = input.ReadInt32();
            break;
          }
          case 16: {
            Ms = input.ReadInt32();
            break;
          }
          case 24: {
            Sec = input.ReadInt32();
            break;
          }
          case 32: {
            Min = input.ReadInt32();
            break;
          }
          case 40: {
            Hour = input.ReadInt32();
            break;
          }
          case 48: {
            Day = input.ReadInt32();
            break;
          }
          case 56: {
            WeekDay = input.ReadInt32();
            break;
          }
          case 64: {
            Month = input.ReadInt32();
            break;
          }
          case 72: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Транзакции
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Transaction : pb::IMessage<Transaction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Transaction(Transaction other) : this() {
      transId_ = other.transId_;
      status_ = other.status_;
      resultMsg_ = other.resultMsg_;
      dateTime_ = other.dateTime_ != null ? other.dateTime_.Clone() : null;
      uid_ = other.uid_;
      flags_ = other.flags_;
      serverTransId_ = other.serverTransId_;
      orderNum_ = other.orderNum_;
      price_ = other.price_;
      quantity_ = other.quantity_;
      balance_ = other.balance_;
      firmId_ = other.firmId_;
      account_ = other.account_;
      clientCode_ = other.clientCode_;
      brokerref_ = other.brokerref_;
      classCode_ = other.classCode_;
      secCode_ = other.secCode_;
      exchangeCode_ = other.exchangeCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "trans_id" field.</summary>
    public const int TransIdFieldNumber = 1;
    private long transId_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransId {
      get { return transId_; }
      set {
        transId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result_msg" field.</summary>
    public const int ResultMsgFieldNumber = 3;
    private string resultMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ResultMsg {
      get { return resultMsg_; }
      set {
        resultMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date_time" field.</summary>
    public const int DateTimeFieldNumber = 4;
    private global::Qlua.Structs.DateTimeEntry dateTime_;
    /// <summary>
    /// TABLE in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DateTimeEntry DateTime {
      get { return dateTime_; }
      set {
        dateTime_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 5;
    private string uid_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 6;
    private int flags_;
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "server_trans_id" field.</summary>
    public const int ServerTransIdFieldNumber = 7;
    private string serverTransId_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ServerTransId {
      get { return serverTransId_; }
      set {
        serverTransId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_num" field.</summary>
    public const int OrderNumFieldNumber = 8;
    private string orderNum_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OrderNum {
      get { return orderNum_; }
      set {
        orderNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private string price_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Price {
      get { return price_; }
      set {
        price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 10;
    private string quantity_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Quantity {
      get { return quantity_; }
      set {
        quantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 11;
    private string balance_ = "";
    /// <summary>
    /// NUMBER in QLUA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firm_id" field.</summary>
    public const int FirmIdFieldNumber = 12;
    private string firmId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirmId {
      get { return firmId_; }
      set {
        firmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 13;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_code" field.</summary>
    public const int ClientCodeFieldNumber = 14;
    private string clientCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientCode {
      get { return clientCode_; }
      set {
        clientCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "brokerref" field.</summary>
    public const int BrokerrefFieldNumber = 15;
    private string brokerref_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Brokerref {
      get { return brokerref_; }
      set {
        brokerref_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 16;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 17;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exchange_code" field.</summary>
    public const int ExchangeCodeFieldNumber = 18;
    private string exchangeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchangeCode {
      get { return exchangeCode_; }
      set {
        exchangeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransId != other.TransId) return false;
      if (Status != other.Status) return false;
      if (ResultMsg != other.ResultMsg) return false;
      if (!object.Equals(DateTime, other.DateTime)) return false;
      if (Uid != other.Uid) return false;
      if (Flags != other.Flags) return false;
      if (ServerTransId != other.ServerTransId) return false;
      if (OrderNum != other.OrderNum) return false;
      if (Price != other.Price) return false;
      if (Quantity != other.Quantity) return false;
      if (Balance != other.Balance) return false;
      if (FirmId != other.FirmId) return false;
      if (Account != other.Account) return false;
      if (ClientCode != other.ClientCode) return false;
      if (Brokerref != other.Brokerref) return false;
      if (ClassCode != other.ClassCode) return false;
      if (SecCode != other.SecCode) return false;
      if (ExchangeCode != other.ExchangeCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TransId != 0L) hash ^= TransId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ResultMsg.Length != 0) hash ^= ResultMsg.GetHashCode();
      if (dateTime_ != null) hash ^= DateTime.GetHashCode();
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (ServerTransId.Length != 0) hash ^= ServerTransId.GetHashCode();
      if (OrderNum.Length != 0) hash ^= OrderNum.GetHashCode();
      if (Price.Length != 0) hash ^= Price.GetHashCode();
      if (Quantity.Length != 0) hash ^= Quantity.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (FirmId.Length != 0) hash ^= FirmId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (ClientCode.Length != 0) hash ^= ClientCode.GetHashCode();
      if (Brokerref.Length != 0) hash ^= Brokerref.GetHashCode();
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (ExchangeCode.Length != 0) hash ^= ExchangeCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TransId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (ResultMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResultMsg);
      }
      if (dateTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DateTime);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uid);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Flags);
      }
      if (ServerTransId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServerTransId);
      }
      if (OrderNum.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OrderNum);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      if (Quantity.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Quantity);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Balance);
      }
      if (FirmId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FirmId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Account);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Brokerref);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SecCode);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ExchangeCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TransId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      if (ResultMsg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResultMsg);
      }
      if (dateTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DateTime);
      }
      if (Uid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uid);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Flags);
      }
      if (ServerTransId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServerTransId);
      }
      if (OrderNum.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OrderNum);
      }
      if (Price.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Price);
      }
      if (Quantity.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Quantity);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Balance);
      }
      if (FirmId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FirmId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Account);
      }
      if (ClientCode.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ClientCode);
      }
      if (Brokerref.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Brokerref);
      }
      if (ClassCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(SecCode);
      }
      if (ExchangeCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ExchangeCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TransId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ResultMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResultMsg);
      }
      if (dateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateTime);
      }
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (ServerTransId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerTransId);
      }
      if (OrderNum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderNum);
      }
      if (Price.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
      }
      if (Quantity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Quantity);
      }
      if (Balance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (FirmId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (ClientCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientCode);
      }
      if (Brokerref.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Brokerref);
      }
      if (ClassCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (SecCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (ExchangeCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchangeCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TransId != 0L) {
        TransId = other.TransId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ResultMsg.Length != 0) {
        ResultMsg = other.ResultMsg;
      }
      if (other.dateTime_ != null) {
        if (dateTime_ == null) {
          DateTime = new global::Qlua.Structs.DateTimeEntry();
        }
        DateTime.MergeFrom(other.DateTime);
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.ServerTransId.Length != 0) {
        ServerTransId = other.ServerTransId;
      }
      if (other.OrderNum.Length != 0) {
        OrderNum = other.OrderNum;
      }
      if (other.Price.Length != 0) {
        Price = other.Price;
      }
      if (other.Quantity.Length != 0) {
        Quantity = other.Quantity;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.FirmId.Length != 0) {
        FirmId = other.FirmId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.ClientCode.Length != 0) {
        ClientCode = other.ClientCode;
      }
      if (other.Brokerref.Length != 0) {
        Brokerref = other.Brokerref;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      if (other.ExchangeCode.Length != 0) {
        ExchangeCode = other.ExchangeCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransId = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            ResultMsg = input.ReadString();
            break;
          }
          case 34: {
            if (dateTime_ == null) {
              DateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(DateTime);
            break;
          }
          case 42: {
            Uid = input.ReadString();
            break;
          }
          case 48: {
            Flags = input.ReadInt32();
            break;
          }
          case 58: {
            ServerTransId = input.ReadString();
            break;
          }
          case 66: {
            OrderNum = input.ReadString();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 82: {
            Quantity = input.ReadString();
            break;
          }
          case 90: {
            Balance = input.ReadString();
            break;
          }
          case 98: {
            FirmId = input.ReadString();
            break;
          }
          case 106: {
            Account = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            Brokerref = input.ReadString();
            break;
          }
          case 130: {
            ClassCode = input.ReadString();
            break;
          }
          case 138: {
            SecCode = input.ReadString();
            break;
          }
          case 146: {
            ExchangeCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TransId = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            ResultMsg = input.ReadString();
            break;
          }
          case 34: {
            if (dateTime_ == null) {
              DateTime = new global::Qlua.Structs.DateTimeEntry();
            }
            input.ReadMessage(DateTime);
            break;
          }
          case 42: {
            Uid = input.ReadString();
            break;
          }
          case 48: {
            Flags = input.ReadInt32();
            break;
          }
          case 58: {
            ServerTransId = input.ReadString();
            break;
          }
          case 66: {
            OrderNum = input.ReadString();
            break;
          }
          case 74: {
            Price = input.ReadString();
            break;
          }
          case 82: {
            Quantity = input.ReadString();
            break;
          }
          case 90: {
            Balance = input.ReadString();
            break;
          }
          case 98: {
            FirmId = input.ReadString();
            break;
          }
          case 106: {
            Account = input.ReadString();
            break;
          }
          case 114: {
            ClientCode = input.ReadString();
            break;
          }
          case 122: {
            Brokerref = input.ReadString();
            break;
          }
          case 130: {
            ClassCode = input.ReadString();
            break;
          }
          case 138: {
            SecCode = input.ReadString();
            break;
          }
          case 146: {
            ExchangeCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Информация из события изменения текущих параметров
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ParamEventInfo : pb::IMessage<ParamEventInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParamEventInfo> _parser = new pb::MessageParser<ParamEventInfo>(() => new ParamEventInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ParamEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParamEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParamEventInfo(ParamEventInfo other) : this() {
      classCode_ = other.classCode_;
      secCode_ = other.secCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ParamEventInfo Clone() {
      return new ParamEventInfo(this);
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 1;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 2;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ParamEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ParamEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassCode != other.ClassCode) return false;
      if (SecCode != other.SecCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClassCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClassCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ParamEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClassCode = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClassCode = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Информация из события изменения стакана
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class QuoteEventInfo : pb::IMessage<QuoteEventInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QuoteEventInfo> _parser = new pb::MessageParser<QuoteEventInfo>(() => new QuoteEventInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QuoteEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteEventInfo(QuoteEventInfo other) : this() {
      classCode_ = other.classCode_;
      secCode_ = other.secCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuoteEventInfo Clone() {
      return new QuoteEventInfo(this);
    }

    /// <summary>Field number for the "class_code" field.</summary>
    public const int ClassCodeFieldNumber = 1;
    private string classCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassCode {
      get { return classCode_; }
      set {
        classCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_code" field.</summary>
    public const int SecCodeFieldNumber = 2;
    private string secCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecCode {
      get { return secCode_; }
      set {
        secCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QuoteEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QuoteEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassCode != other.ClassCode) return false;
      if (SecCode != other.SecCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassCode.Length != 0) hash ^= ClassCode.GetHashCode();
      if (SecCode.Length != 0) hash ^= SecCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClassCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClassCode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassCode);
      }
      if (SecCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SecCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ClassCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassCode);
      }
      if (SecCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QuoteEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.ClassCode.Length != 0) {
        ClassCode = other.ClassCode;
      }
      if (other.SecCode.Length != 0) {
        SecCode = other.SecCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClassCode = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClassCode = input.ReadString();
            break;
          }
          case 18: {
            SecCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Информация из функции обратного вызова OnConnected
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ConnectedEventInfo : pb::IMessage<ConnectedEventInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectedEventInfo> _parser = new pb::MessageParser<ConnectedEventInfo>(() => new ConnectedEventInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConnectedEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConnectedEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConnectedEventInfo(ConnectedEventInfo other) : this() {
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConnectedEventInfo Clone() {
      return new ConnectedEventInfo(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConnectedEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConnectedEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Flag != false) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Flag != false) {
        output.WriteRawTag(8);
        output.WriteBool(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Flag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConnectedEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Информация из функций обратного вызова OnClose и OnStop
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StopEventInfo : pb::IMessage<StopEventInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopEventInfo> _parser = new pb::MessageParser<StopEventInfo>(() => new StopEventInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StopEventInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopEventInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopEventInfo(StopEventInfo other) : this() {
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StopEventInfo Clone() {
      return new StopEventInfo(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private int flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StopEventInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StopEventInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Flag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Flag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StopEventInfo other) {
      if (other == null) {
        return;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DataSourceTime : pb::IMessage<DataSourceTime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataSourceTime> _parser = new pb::MessageParser<DataSourceTime>(() => new DataSourceTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DataSourceTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceTime(DataSourceTime other) : this() {
      year_ = other.year_;
      month_ = other.month_;
      day_ = other.day_;
      weekDay_ = other.weekDay_;
      hour_ = other.hour_;
      min_ = other.min_;
      sec_ = other.sec_;
      ms_ = other.ms_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceTime Clone() {
      return new DataSourceTime(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 2;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 3;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "week_day" field.</summary>
    public const int WeekDayFieldNumber = 4;
    private int weekDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WeekDay {
      get { return weekDay_; }
      set {
        weekDay_ = value;
      }
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 5;
    private int hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 6;
    private int min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "sec" field.</summary>
    public const int SecFieldNumber = 7;
    private int sec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Sec {
      get { return sec_; }
      set {
        sec_ = value;
      }
    }

    /// <summary>Field number for the "ms" field.</summary>
    public const int MsFieldNumber = 8;
    private int ms_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ms {
      get { return ms_; }
      set {
        ms_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 9;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DataSourceTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DataSourceTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (Month != other.Month) return false;
      if (Day != other.Day) return false;
      if (WeekDay != other.WeekDay) return false;
      if (Hour != other.Hour) return false;
      if (Min != other.Min) return false;
      if (Sec != other.Sec) return false;
      if (Ms != other.Ms) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (WeekDay != 0) hash ^= WeekDay.GetHashCode();
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Sec != 0) hash ^= Sec.GetHashCode();
      if (Ms != 0) hash ^= Ms.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (WeekDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeekDay);
      }
      if (Hour != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hour);
      }
      if (Min != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Min);
      }
      if (Sec != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Sec);
      }
      if (Ms != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ms);
      }
      if (Count != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (Month != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Month);
      }
      if (Day != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Day);
      }
      if (WeekDay != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeekDay);
      }
      if (Hour != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hour);
      }
      if (Min != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Min);
      }
      if (Sec != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Sec);
      }
      if (Ms != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ms);
      }
      if (Count != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (WeekDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekDay);
      }
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
      }
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Min);
      }
      if (Sec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sec);
      }
      if (Ms != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ms);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DataSourceTime other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.WeekDay != 0) {
        WeekDay = other.WeekDay;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Sec != 0) {
        Sec = other.Sec;
      }
      if (other.Ms != 0) {
        Ms = other.Ms;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 32: {
            WeekDay = input.ReadInt32();
            break;
          }
          case 40: {
            Hour = input.ReadInt32();
            break;
          }
          case 48: {
            Min = input.ReadInt32();
            break;
          }
          case 56: {
            Sec = input.ReadInt32();
            break;
          }
          case 64: {
            Ms = input.ReadInt32();
            break;
          }
          case 72: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            Month = input.ReadInt32();
            break;
          }
          case 24: {
            Day = input.ReadInt32();
            break;
          }
          case 32: {
            WeekDay = input.ReadInt32();
            break;
          }
          case 40: {
            Hour = input.ReadInt32();
            break;
          }
          case 48: {
            Min = input.ReadInt32();
            break;
          }
          case 56: {
            Sec = input.ReadInt32();
            break;
          }
          case 64: {
            Ms = input.ReadInt32();
            break;
          }
          case 72: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DataSourceUpdateInfo : pb::IMessage<DataSourceUpdateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataSourceUpdateInfo> _parser = new pb::MessageParser<DataSourceUpdateInfo>(() => new DataSourceUpdateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DataSourceUpdateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Qlua.Structs.QluaStructuresReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceUpdateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceUpdateInfo(DataSourceUpdateInfo other) : this() {
      uuid_ = other.uuid_;
      index_ = other.index_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      volume_ = other.volume_;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      switch (other.SizeCase) {
        case SizeOneofCase.NullSize:
          NullSize = other.NullSize;
          break;
        case SizeOneofCase.ValueSize:
          ValueSize = other.ValueSize;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataSourceUpdateInfo Clone() {
      return new DataSourceUpdateInfo(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 3;
    private string open_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Open {
      get { return open_; }
      set {
        open_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 4;
    private string high_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string High {
      get { return high_; }
      set {
        high_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 5;
    private string low_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Low {
      get { return low_; }
      set {
        low_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 6;
    private string close_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Close {
      get { return close_; }
      set {
        close_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private string volume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Volume {
      get { return volume_; }
      set {
        volume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 8;
    private global::Qlua.Structs.DataSourceTime time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Qlua.Structs.DataSourceTime Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "null_size" field.</summary>
    public const int NullSizeFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NullSize {
      get { return HasNullSize ? (bool) size_ : false; }
      set {
        size_ = value;
        sizeCase_ = SizeOneofCase.NullSize;
      }
    }
    /// <summary>Gets whether the "null_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNullSize {
      get { return sizeCase_ == SizeOneofCase.NullSize; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "null_size" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNullSize() {
      if (HasNullSize) {
        ClearSize();
      }
    }

    /// <summary>Field number for the "value_size" field.</summary>
    public const int ValueSizeFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ValueSize {
      get { return HasValueSize ? (int) size_ : 0; }
      set {
        size_ = value;
        sizeCase_ = SizeOneofCase.ValueSize;
      }
    }
    /// <summary>Gets whether the "value_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValueSize {
      get { return sizeCase_ == SizeOneofCase.ValueSize; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "value_size" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValueSize() {
      if (HasValueSize) {
        ClearSize();
      }
    }

    private object size_;
    /// <summary>Enum of possible cases for the "size" oneof.</summary>
    public enum SizeOneofCase {
      None = 0,
      NullSize = 9,
      ValueSize = 10,
    }
    private SizeOneofCase sizeCase_ = SizeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SizeOneofCase SizeCase {
      get { return sizeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSize() {
      sizeCase_ = SizeOneofCase.None;
      size_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DataSourceUpdateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DataSourceUpdateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Index != other.Index) return false;
      if (Open != other.Open) return false;
      if (High != other.High) return false;
      if (Low != other.Low) return false;
      if (Close != other.Close) return false;
      if (Volume != other.Volume) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (NullSize != other.NullSize) return false;
      if (ValueSize != other.ValueSize) return false;
      if (SizeCase != other.SizeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Open.Length != 0) hash ^= Open.GetHashCode();
      if (High.Length != 0) hash ^= High.GetHashCode();
      if (Low.Length != 0) hash ^= Low.GetHashCode();
      if (Close.Length != 0) hash ^= Close.GetHashCode();
      if (Volume.Length != 0) hash ^= Volume.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (HasNullSize) hash ^= NullSize.GetHashCode();
      if (HasValueSize) hash ^= ValueSize.GetHashCode();
      hash ^= (int) sizeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Open.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Open);
      }
      if (High.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(High);
      }
      if (Low.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Low);
      }
      if (Close.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Close);
      }
      if (Volume.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Volume);
      }
      if (time_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Time);
      }
      if (HasNullSize) {
        output.WriteRawTag(72);
        output.WriteBool(NullSize);
      }
      if (HasValueSize) {
        output.WriteRawTag(80);
        output.WriteInt32(ValueSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (Open.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Open);
      }
      if (High.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(High);
      }
      if (Low.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Low);
      }
      if (Close.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Close);
      }
      if (Volume.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Volume);
      }
      if (time_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Time);
      }
      if (HasNullSize) {
        output.WriteRawTag(72);
        output.WriteBool(NullSize);
      }
      if (HasValueSize) {
        output.WriteRawTag(80);
        output.WriteInt32(ValueSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Open.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Open);
      }
      if (High.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(High);
      }
      if (Low.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Low);
      }
      if (Close.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Close);
      }
      if (Volume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Volume);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (HasNullSize) {
        size += 1 + 1;
      }
      if (HasValueSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DataSourceUpdateInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Open.Length != 0) {
        Open = other.Open;
      }
      if (other.High.Length != 0) {
        High = other.High;
      }
      if (other.Low.Length != 0) {
        Low = other.Low;
      }
      if (other.Close.Length != 0) {
        Close = other.Close;
      }
      if (other.Volume.Length != 0) {
        Volume = other.Volume;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Qlua.Structs.DataSourceTime();
        }
        Time.MergeFrom(other.Time);
      }
      switch (other.SizeCase) {
        case SizeOneofCase.NullSize:
          NullSize = other.NullSize;
          break;
        case SizeOneofCase.ValueSize:
          ValueSize = other.ValueSize;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 26: {
            Open = input.ReadString();
            break;
          }
          case 34: {
            High = input.ReadString();
            break;
          }
          case 42: {
            Low = input.ReadString();
            break;
          }
          case 50: {
            Close = input.ReadString();
            break;
          }
          case 58: {
            Volume = input.ReadString();
            break;
          }
          case 66: {
            if (time_ == null) {
              Time = new global::Qlua.Structs.DataSourceTime();
            }
            input.ReadMessage(Time);
            break;
          }
          case 72: {
            NullSize = input.ReadBool();
            break;
          }
          case 80: {
            ValueSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 26: {
            Open = input.ReadString();
            break;
          }
          case 34: {
            High = input.ReadString();
            break;
          }
          case 42: {
            Low = input.ReadString();
            break;
          }
          case 50: {
            Close = input.ReadString();
            break;
          }
          case 58: {
            Volume = input.ReadString();
            break;
          }
          case 66: {
            if (time_ == null) {
              Time = new global::Qlua.Structs.DataSourceTime();
            }
            input.ReadMessage(Time);
            break;
          }
          case 72: {
            NullSize = input.ReadBool();
            break;
          }
          case 80: {
            ValueSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
